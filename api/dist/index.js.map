{"version":3,"file":"index.js","mappingsj4pBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChpGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdxjtrpOA;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnzCA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChGA;AACA;AACA;AACA;;;;;;;;ACHA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjngBA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACttrvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzgnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChCA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtrLA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvnPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrjvhxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtpuvpftIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChzaA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;AEDA;AACA;AACA;AACA","sources":["../webpack://@appcenter-api-actions/api/./lib/generated/app-center/index.js","../webpack://@appcenter-api-actions/api/./lib/main.js","../webpack://@appcenter-api-actions/api/../node_modules/asap/asap.js","../webpack://@appcenter-api-actions/api/../node_modules/asap/raw.js","../webpack://@appcenter-api-actions/api/../node_modules/asynckit/index.js","../webpack://@appcenter-api-actions/api/../node_modules/asynckit/lib/abort.js","../webpack://@appcenter-api-actions/api/../node_modules/asynckit/lib/async.js","../webpack://@appcenter-api-actions/api/../node_modules/asynckit/lib/defer.js","../webpack://@appcenter-api-actions/api/../node_modules/asynckit/lib/iterate.js","../webpack://@appcenter-api-actions/api/../node_modules/asynckit/lib/state.js","../webpack://@appcenter-api-actions/api/../node_modules/asynckit/lib/terminator.js","../webpack://@appcenter-api-actions/api/../node_modules/asynckit/parallel.js","../webpack://@appcenter-api-actions/api/../node_modules/asynckit/serial.js","../webpack://@appcenter-api-actions/api/../node_modules/asynckit/serialOrdered.js","../webpack://@appcenter-api-actions/api/../node_modules/call-bind/callBound.js","../webpack://@appcenter-api-actions/api/../node_modules/call-bind/index.js","../webpack://@appcenter-api-actions/api/../node_modules/combined-stream/lib/combined_stream.js","../webpack://@appcenter-api-actions/api/../node_modules/cookiejar/cookiejar.js","../webpack://@appcenter-api-actions/api/../node_modules/debug/src/browser.js","../webpack://@appcenter-api-actions/api/../node_modules/debug/src/common.js","../webpack://@appcenter-api-actions/api/../node_modules/debug/src/index.js","../webpack://@appcenter-api-actions/api/../node_modules/debug/src/node.js","../webpack://@appcenter-api-actions/api/../node_modules/delayed-stream/lib/delayed_stream.js","../webpack://@appcenter-api-actions/api/../node_modules/dezalgo/dezalgo.js","../webpack://@appcenter-api-actions/api/../node_modules/fast-safe-stringify/index.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/Formidable.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/FormidableError.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/PersistentFile.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/VolatileFile.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/index.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/parsers/Dummy.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/parsers/JSON.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/parsers/Multipart.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/parsers/OctetStream.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/parsers/Querystring.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/parsers/index.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/plugins/index.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/plugins/json.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/plugins/multipart.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/plugins/octetstream.js","../webpack://@appcenter-api-actions/api/../node_modules/formidable/src/plugins/querystring.js","../webpack://@appcenter-api-actions/api/../node_modules/function-bind/implementation.js","../webpack://@appcenter-api-actions/api/../node_modules/function-bind/index.js","../webpack://@appcenter-api-actions/api/../node_modules/get-intrinsic/index.js","../webpack://@appcenter-api-actions/api/../node_modules/has-flag/index.js","../webpack://@appcenter-api-actions/api/../node_modules/has-symbols/index.js","../webpack://@appcenter-api-actions/api/../node_modules/has-symbols/shams.js","../webpack://@appcenter-api-actions/api/../node_modules/has/src/index.js","../webpack://@appcenter-api-actions/api/../node_modules/hexoid/dist/index.js","../webpack://@appcenter-api-actions/api/../node_modules/lru-cache/index.js","../webpack://@appcenter-api-actions/api/../node_modules/methods/index.js","../webpack://@appcenter-api-actions/api/../node_modules/mime-db/index.js","../webpack://@appcenter-api-actions/api/../node_modules/mime-types/index.js","../webpack://@appcenter-api-actions/api/../node_modules/mime/Mime.js","../webpack://@appcenter-api-actions/api/../node_modules/mime/index.js","../webpack://@appcenter-api-actions/api/../node_modules/mime/types/other.js","../webpack://@appcenter-api-actions/api/../node_modules/mime/types/standard.js","../webpack://@appcenter-api-actions/api/../node_modules/ms/index.js","../webpack://@appcenter-api-actions/api/../node_modules/object-inspect/index.js","../webpack://@appcenter-api-actions/api/../node_modules/object-inspect/util.inspect.js","../webpack://@appcenter-api-actions/api/../node_modules/once/once.js","../webpack://@appcenter-api-actions/api/../node_modules/qs/lib/formats.js","../webpack://@appcenter-api-actions/api/../node_modules/qs/lib/index.js","../webpack://@appcenter-api-actions/api/../node_modules/qs/lib/parse.js","../webpack://@appcenter-api-actions/api/../node_modules/qs/lib/stringify.js","../webpack://@appcenter-api-actions/api/../node_modules/qs/lib/utils.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/classes/comparator.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/classes/range.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/classes/semver.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/clean.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/cmp.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/coerce.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/compare-build.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/compare-loose.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/compare.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/diff.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/eq.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/gt.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/gte.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/inc.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/lt.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/lte.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/major.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/minor.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/neq.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/parse.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/patch.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/prerelease.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/rcompare.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/rsort.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/satisfies.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/sort.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/functions/valid.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/index.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/internal/constants.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/internal/debug.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/internal/identifiers.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/internal/parse-options.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/internal/re.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/gtr.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/intersects.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/ltr.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/max-satisfying.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/min-satisfying.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/min-version.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/outside.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/simplify.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/subset.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/to-comparators.js","../webpack://@appcenter-api-actions/api/../node_modules/semver/ranges/valid.js","../webpack://@appcenter-api-actions/api/../node_modules/side-channel/index.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/agent-base.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/node/agent.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/node/http2wrapper.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/node/index.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/node/parsers/image.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/node/parsers/index.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/node/parsers/json.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/node/parsers/text.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/node/parsers/urlencoded.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/node/response.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/node/unzip.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/request-base.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/response-base.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/lib/utils.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/node_modules/form-data/lib/form_data.js","../webpack://@appcenter-api-actions/api/../node_modules/superagent/node_modules/form-data/lib/populate.js","../webpack://@appcenter-api-actions/api/../node_modules/supports-color/index.js","../webpack://@appcenter-api-actions/api/../node_modules/wrappy/wrappy.js","../webpack://@appcenter-api-actions/api/../node_modules/yallist/iterator.js","../webpack://@appcenter-api-actions/api/../node_modules/yallist/yallist.js","../webpack://@appcenter-api-actions/api/external node-commonjs \"crypto\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"domain\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"events\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"fs\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"http\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"http2\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"https\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"net\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"os\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"path\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"process\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"querystring\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"stream\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"string_decoder\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"tls\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"tty\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"url\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"util\"","../webpack://@appcenter-api-actions/api/external node-commonjs \"zlib\"","../webpack://@appcenter-api-actions/api/webpack/bootstrap","../webpack://@appcenter-api-actions/api/webpack/runtime/compat","../webpack://@appcenter-api-actions/api/webpack/before-startup","../webpack://@appcenter-api-actions/api/webpack/startup","../webpack://@appcenter-api-actions/api/webpack/after-startup"],"sourcesContent":["\"use strict\";\n// tslint:disable\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppCenter = void 0;\nconst request = __importStar(require(\"superagent\"));\n/**\n * Microsoft Visual Studio App Center API\n * @class AppCenter\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nclass AppCenter {\n    constructor(domain, logger) {\n        this.logger = logger;\n        this.domain = \"https://api.appcenter.ms\";\n        this.errorHandlers = [];\n        if (domain) {\n            this.domain = domain;\n        }\n    }\n    getDomain() {\n        return this.domain;\n    }\n    addErrorHandler(handler) {\n        this.errorHandlers.push(handler);\n    }\n    setRequestHeadersHandler(handler) {\n        this.requestHeadersHandler = handler;\n    }\n    setConfigureAgentHandler(handler) {\n        this.configureAgentHandler = handler;\n    }\n    setConfigureRequestHandler(handler) {\n        this.configureRequestHandler = handler;\n    }\n    request(method, url, body, headers, queryParameters, form, reject, resolve, opts) {\n        if (this.logger) {\n            this.logger.log(`Call ${method} ${url}`);\n        }\n        const agent = this.configureAgentHandler ?\n            this.configureAgentHandler(request.default) :\n            request.default;\n        let req = agent(method, url);\n        if (this.configureRequestHandler) {\n            req = this.configureRequestHandler(req);\n        }\n        req = req.query(queryParameters);\n        if (this.requestHeadersHandler) {\n            headers = this.requestHeadersHandler({\n                ...headers\n            });\n        }\n        req.set(headers);\n        if (body) {\n            req.send(body);\n            if (typeof (body) === 'object' && !(body.constructor.name === 'Buffer')) {\n                headers['content-type'] = 'application/json';\n            }\n        }\n        if (Object.keys(form).length > 0) {\n            req.type('form');\n            req.send(form);\n        }\n        if (opts.$retries && opts.$retries > 0) {\n            req.retry(opts.$retries);\n        }\n        if (opts.$timeout && opts.$timeout > 0 || opts.$deadline && opts.$deadline > 0) {\n            req.timeout({\n                deadline: opts.$deadline,\n                response: opts.$timeout\n            });\n        }\n        req.end((error, response) => {\n            // an error will also be emitted for a 4xx and 5xx status code\n            // the error object will then have error.status and error.response fields\n            // see superagent error handling: https://github.com/visionmedia/superagent/blob/master/docs/index.md#error-handling\n            if (error) {\n                reject(error);\n                this.errorHandlers.forEach(handler => handler(error));\n            }\n            else {\n                resolve(response);\n            }\n        });\n    }\n    convertParameterCollectionFormat(param, collectionFormat) {\n        if (Array.isArray(param) && param.length >= 2) {\n            switch (collectionFormat) {\n                case \"csv\":\n                    return param.join(\",\");\n                case \"ssv\":\n                    return param.join(\" \");\n                case \"tsv\":\n                    return param.join(\"\\t\");\n                case \"pipes\":\n                    return param.join(\"|\");\n                default:\n                    return param;\n            }\n        }\n        return param;\n    }\n    devices_registerUserForDeviceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/users/{user_id}/devices/register';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{user_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Registers a user for an existing device\n     * @method\n     * @name AppCenter#devices_registerUserForDevice\n     * @param {string} userId - The ID of the user\n     * @param {} body - The device info.\n     */\n    devices_registerUserForDevice(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/users/{user_id}/devices/register';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{user_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userId'], '').toString())}`);\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    notifications_getUserEmailSettingsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/notifications/emailSettings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get Default email notification settings for the user\n     * @method\n     * @name AppCenter#notifications_getUserEmailSettings\n     */\n    notifications_getUserEmailSettings(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/notifications/emailSettings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Users_getUserMetadataURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/metadata/optimizely';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#Users_getUserMetadata\n     */\n    Users_getUserMetadata(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/metadata/optimizely';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_rejectURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/orgs/{invitation_token}/reject';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Rejects a pending organization invitation\n     * @method\n     * @name AppCenter#orgInvitations_reject\n     * @param {string} invitationToken - The app invitation token that was sent to the user\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    orgInvitations_reject(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/orgs/{invitation_token}/reject';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n            if (parameters['invitationToken'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationToken'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_acceptURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/orgs/{invitation_token}/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Accepts a pending organization invitation for the specified user\n     * @method\n     * @name AppCenter#orgInvitations_accept\n     * @param {string} invitationToken - The app invitation token that was sent to the user\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    orgInvitations_accept(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/orgs/{invitation_token}/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n            if (parameters['invitationToken'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationToken'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroupInvitations_acceptAllURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/distribution_groups/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Accepts all pending invitations to distribution groups for the specified user\n     * @method\n     * @name AppCenter#distributionGroupInvitations_acceptAll\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    distributionGroupInvitations_acceptAll(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/distribution_groups/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_rejectURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/apps/{invitation_token}/reject';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Rejects a pending invitation for the specified user\n     * @method\n     * @name AppCenter#appInvitations_reject\n     * @param {string} invitationToken - The app invitation token that was sent to the user\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    appInvitations_reject(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/apps/{invitation_token}/reject';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n            if (parameters['invitationToken'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationToken'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_acceptURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/apps/{invitation_token}/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Accepts a pending invitation for the specified user\n     * @method\n     * @name AppCenter#appInvitations_accept\n     * @param {string} invitationToken - The app invitation token that was sent to the user\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    appInvitations_accept(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/apps/{invitation_token}/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n            if (parameters['invitationToken'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationToken'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    sharedconnection_ConnectionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/export/serviceConnections';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets all service connections of the service type for GDPR export.\n     * @method\n     * @name AppCenter#sharedconnection_Connections\n     */\n    sharedconnection_Connections(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/export/serviceConnections';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_CancelExportRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export/{token}/cancel';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_CancelExportRequest\n     * @param {string} token - Unique request ID (GUID)\n     */\n    DataSubjectRight_CancelExportRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export/{token}/cancel';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n            if (parameters['token'] === undefined) {\n                reject(new Error('Missing required  parameter: token'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_ExportStatusRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export/{token}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_ExportStatusRequest\n     * @param {string} token - Unique request ID (GUID)\n     */\n    DataSubjectRight_ExportStatusRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export/{token}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n            if (parameters['token'] === undefined) {\n                reject(new Error('Missing required  parameter: token'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_ExportRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_ExportRequest\n     */\n    DataSubjectRight_ExportRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_CancelDeleteRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete/{token}/cancel';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_CancelDeleteRequest\n     * @param {string} token - Unique request ID (GUID)\n     * @param {} email - Microsoft Visual Studio App Center API\n     */\n    DataSubjectRight_CancelDeleteRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete/{token}/cancel';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n            if (parameters['token'] === undefined) {\n                reject(new Error('Missing required  parameter: token'));\n                return;\n            }\n            if (parameters['email'] !== undefined) {\n                body = parameters['email'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_DeleteStatusRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete/{token}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n        if (parameters['email'] !== undefined) {\n            queryParameters['email'] = this.convertParameterCollectionFormat(parameters['email'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_DeleteStatusRequest\n     * @param {string} token - Unique request ID (GUID)\n     * @param {string} email - Email used for delete with x-authz-bypass headers\n     */\n    DataSubjectRight_DeleteStatusRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete/{token}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n            if (parameters['token'] === undefined) {\n                reject(new Error('Missing required  parameter: token'));\n                return;\n            }\n            if (parameters['email'] !== undefined) {\n                queryParameters['email'] = this.convertParameterCollectionFormat(parameters['email'], '');\n            }\n            if (parameters['email'] === undefined) {\n                reject(new Error('Missing required  parameter: email'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_DeleteRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_DeleteRequest\n     */\n    DataSubjectRight_DeleteRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_deviceDetailsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices/{device_udid}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{device_udid}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deviceUdid'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the device details.\n     * @method\n     * @name AppCenter#devices_deviceDetails\n     * @param {string} deviceUdid - The UDID of the device\n     */\n    devices_deviceDetails(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices/{device_udid}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{device_udid}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deviceUdid'], '').toString())}`);\n            if (parameters['deviceUdid'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceUdid'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_removeUserDeviceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices/{device_udid}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{device_udid}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deviceUdid'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes an existing device from a user\n     * @method\n     * @name AppCenter#devices_removeUserDevice\n     * @param {string} deviceUdid - The UDID of the device\n     */\n    devices_removeUserDevice(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices/{device_udid}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{device_udid}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deviceUdid'], '').toString())}`);\n            if (parameters['deviceUdid'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceUdid'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_userDevicesListURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns all devices associated with the given user.\n     * @method\n     * @name AppCenter#devices_userDevicesList\n     */\n    devices_userDevicesList(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the user profile data\n     * @method\n     * @name AppCenter#users_get\n     */\n    users_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates the user profile and returns the updated user data\n     * @method\n     * @name AppCenter#users_update\n     * @param {} user - The data for the created user\n     */\n    users_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['user'] !== undefined) {\n                body = parameters['user'];\n            }\n            if (parameters['user'] === undefined) {\n                reject(new Error('Missing required  parameter: user'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getLatestByHashURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/sdk/apps/{app_secret}/releases/{release_hash}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n        path = path.replace('{release_hash}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseHash'], '').toString())}`);\n        if (parameters['udid'] !== undefined) {\n            queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.\n     * @method\n     * @name AppCenter#releases_getLatestByHash\n     * @param {string} appSecret - The secret of the target application\n     * @param {string} releaseHash - The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user.\n     * @param {string} udid - When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.\n     */\n    releases_getLatestByHash(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/sdk/apps/{app_secret}/releases/{release_hash}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n            if (parameters['appSecret'] === undefined) {\n                reject(new Error('Missing required  parameter: appSecret'));\n                return;\n            }\n            path = path.replace('{release_hash}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseHash'], '').toString())}`);\n            if (parameters['releaseHash'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseHash'));\n                return;\n            }\n            if (parameters['udid'] !== undefined) {\n                queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getLatestPrivateReleaseURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/sdk/apps/{app_secret}/releases/private/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n        if (parameters['udid'] !== undefined) {\n            queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get the latest release distributed to a private group the given user is a member of for the given app.\n     * @method\n     * @name AppCenter#releases_getLatestPrivateRelease\n     * @param {string} appSecret - The secret of the target application\n     * @param {string} udid - When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.\n     */\n    releases_getLatestPrivateRelease(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/sdk/apps/{app_secret}/releases/private/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n            if (parameters['appSecret'] === undefined) {\n                reject(new Error('Missing required  parameter: appSecret'));\n                return;\n            }\n            if (parameters['udid'] !== undefined) {\n                queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getSparkleFeedURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sparkle/apps/{app_secret}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the sparkle feed of the releases that are distributed to all the public distribution groups.\n     * @method\n     * @name AppCenter#releases_getSparkleFeed\n     * @param {string} appSecret - The secret of the application.\n     */\n    releases_getSparkleFeed(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sparkle/apps/{app_secret}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n            if (parameters['appSecret'] === undefined) {\n                reject(new Error('Missing required  parameter: appSecret'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getPublicGroupsForReleaseByHashURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n        path = path.replace('{release_hash}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseHash'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get all public distribution groups that a given release has been distributed to\n     * @method\n     * @name AppCenter#releases_getPublicGroupsForReleaseByHash\n     * @param {string} appSecret - The secret of the target application\n     * @param {string} releaseHash - The hash of the release\n     */\n    releases_getPublicGroupsForReleaseByHash(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n            if (parameters['appSecret'] === undefined) {\n                reject(new Error('Missing required  parameter: appSecret'));\n                return;\n            }\n            path = path.replace('{release_hash}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseHash'], '').toString())}`);\n            if (parameters['releaseHash'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseHash'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getLatestByPublicDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n        path = path.replace('{distribution_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get a release with 'latest' for the given public group.\n     * @method\n     * @name AppCenter#releases_getLatestByPublicDistributionGroup\n     * @param {string} appSecret - The secret of the target application\n     * @param {string} distributionGroupId - the id for destination\n     */\n    releases_getLatestByPublicDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n            if (parameters['appSecret'] === undefined) {\n                reject(new Error('Missing required  parameter: appSecret'));\n                return;\n            }\n            path = path.replace('{distribution_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupId'], '').toString())}`);\n            if (parameters['distributionGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupId'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_webhookURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/hooks';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Public webhook sink\n     * @method\n     * @name AppCenter#builds_webhook\n     * @param {} payload - Microsoft Visual Studio App Center API\n     */\n    builds_webhook(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/hooks';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['payload'] !== undefined) {\n                body = parameters['payload'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushAcquisition_updateCheckURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/update_check';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['deploymentKey'] !== undefined) {\n            queryParameters['deployment_key'] = this.convertParameterCollectionFormat(parameters['deploymentKey'], '');\n        }\n        if (parameters['appVersion'] !== undefined) {\n            queryParameters['app_version'] = this.convertParameterCollectionFormat(parameters['appVersion'], '');\n        }\n        if (parameters['packageHash'] !== undefined) {\n            queryParameters['package_hash'] = this.convertParameterCollectionFormat(parameters['packageHash'], '');\n        }\n        if (parameters['label'] !== undefined) {\n            queryParameters['label'] = this.convertParameterCollectionFormat(parameters['label'], '');\n        }\n        if (parameters['clientUniqueId'] !== undefined) {\n            queryParameters['client_unique_id'] = this.convertParameterCollectionFormat(parameters['clientUniqueId'], '');\n        }\n        if (parameters['isCompanion'] !== undefined) {\n            queryParameters['is_companion'] = this.convertParameterCollectionFormat(parameters['isCompanion'], '');\n        }\n        if (parameters['previousLabelOrAppVersion'] !== undefined) {\n            queryParameters['previous_label_or_app_version'] = this.convertParameterCollectionFormat(parameters['previousLabelOrAppVersion'], '');\n        }\n        if (parameters['previousDeploymentKey'] !== undefined) {\n            queryParameters['previous_deployment_key'] = this.convertParameterCollectionFormat(parameters['previousDeploymentKey'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Check for updates\n     * @method\n     * @name AppCenter#codePushAcquisition_updateCheck\n     * @param {string} deploymentKey - Microsoft Visual Studio App Center API\n     * @param {string} appVersion - Microsoft Visual Studio App Center API\n     * @param {string} packageHash - Microsoft Visual Studio App Center API\n     * @param {string} label - Microsoft Visual Studio App Center API\n     * @param {string} clientUniqueId - Microsoft Visual Studio App Center API\n     * @param {boolean} isCompanion - Microsoft Visual Studio App Center API\n     * @param {string} previousLabelOrAppVersion - Microsoft Visual Studio App Center API\n     * @param {string} previousDeploymentKey - Microsoft Visual Studio App Center API\n     */\n    codePushAcquisition_updateCheck(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/update_check';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deploymentKey'] !== undefined) {\n                queryParameters['deployment_key'] = this.convertParameterCollectionFormat(parameters['deploymentKey'], '');\n            }\n            if (parameters['deploymentKey'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentKey'));\n                return;\n            }\n            if (parameters['appVersion'] !== undefined) {\n                queryParameters['app_version'] = this.convertParameterCollectionFormat(parameters['appVersion'], '');\n            }\n            if (parameters['appVersion'] === undefined) {\n                reject(new Error('Missing required  parameter: appVersion'));\n                return;\n            }\n            if (parameters['packageHash'] !== undefined) {\n                queryParameters['package_hash'] = this.convertParameterCollectionFormat(parameters['packageHash'], '');\n            }\n            if (parameters['label'] !== undefined) {\n                queryParameters['label'] = this.convertParameterCollectionFormat(parameters['label'], '');\n            }\n            if (parameters['clientUniqueId'] !== undefined) {\n                queryParameters['client_unique_id'] = this.convertParameterCollectionFormat(parameters['clientUniqueId'], '');\n            }\n            if (parameters['isCompanion'] !== undefined) {\n                queryParameters['is_companion'] = this.convertParameterCollectionFormat(parameters['isCompanion'], '');\n            }\n            if (parameters['previousLabelOrAppVersion'] !== undefined) {\n                queryParameters['previous_label_or_app_version'] = this.convertParameterCollectionFormat(parameters['previousLabelOrAppVersion'], '');\n            }\n            if (parameters['previousDeploymentKey'] !== undefined) {\n                queryParameters['previous_deployment_key'] = this.convertParameterCollectionFormat(parameters['previousDeploymentKey'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushAcquisition_getAcquisitionStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the acquisition service status to the caller\n     * @method\n     * @name AppCenter#codePushAcquisition_getAcquisitionStatus\n     */\n    codePushAcquisition_getAcquisitionStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushAcquisition_updateDownloadStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/report_status/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Report download of specified release\n     * @method\n     * @name AppCenter#codePushAcquisition_updateDownloadStatus\n     * @param {} releaseMetadata - Deployment status metric properties\n     */\n    codePushAcquisition_updateDownloadStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/report_status/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['releaseMetadata'] !== undefined) {\n                body = parameters['releaseMetadata'];\n            }\n            if (parameters['releaseMetadata'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseMetadata'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushAcquisition_updateDeployStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/report_status/deploy';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Report Deployment status metric\n     * @method\n     * @name AppCenter#codePushAcquisition_updateDeployStatus\n     * @param {} releaseMetadata - Deployment status metric properties\n     */\n    codePushAcquisition_updateDeployStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/report_status/deploy';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['releaseMetadata'] !== undefined) {\n                body = parameters['releaseMetadata'];\n            }\n            if (parameters['releaseMetadata'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseMetadata'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distibutionReleases_installAnalyticsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/apps/{owner_name}/{app_name}/install_analytics';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Notify download(s) for the provided distribution release(s).\n     * @method\n     * @name AppCenter#distibutionReleases_installAnalytics\n     * @param {string} ownerName - The name of the app owner\n     * @param {string} appName - The name of the app\n     * @param {} body - The install analytics request payload\n     */\n    distibutionReleases_installAnalytics(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/apps/{owner_name}/{app_name}/install_analytics';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getIosManifestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appId'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        if (parameters['token'] !== undefined) {\n            queryParameters['token'] = this.convertParameterCollectionFormat(parameters['token'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.\n     * @method\n     * @name AppCenter#releases_getIosManifest\n     * @param {string} appId - The ID of the application\n     * @param {integer} releaseId - The release_id\n     * @param {string} token - A hash that authorizes the download if it matches the release info.\n     */\n    releases_getIosManifest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appId'], '').toString())}`);\n            if (parameters['appId'] === undefined) {\n                reject(new Error('Missing required  parameter: appId'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['token'] !== undefined) {\n                queryParameters['token'] = this.convertParameterCollectionFormat(parameters['token'], '');\n            }\n            if (parameters['token'] === undefined) {\n                reject(new Error('Missing required  parameter: token'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_getForOrgUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get a user apps information from an organization by name\n     * @method\n     * @name AppCenter#apps_getForOrgUser\n     * @param {string} orgName - The organization's name\n     * @param {string} userName - The slug name of the user\n     */\n    apps_getForOrgUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_updateOrgRoleURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates the given organization user\n     * @method\n     * @name AppCenter#users_updateOrgRole\n     * @param {string} orgName - The organization's name\n     * @param {string} userName - The slug name of the user\n     * @param {} organizationUser - Microsoft Visual Studio App Center API\n     */\n    users_updateOrgRole(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n            if (parameters['organizationUser'] !== undefined) {\n                body = parameters['organizationUser'];\n            }\n            if (parameters['organizationUser'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationUser'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_removeFromOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes a user from an organization.\n     * @method\n     * @name AppCenter#users_removeFromOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} userName - The slug name of the user\n     */\n    users_removeFromOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_getForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission\n     * @method\n     * @name AppCenter#users_getForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} userName - The slug name of the user\n     */\n    users_getForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_listForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of users that belong to an organization\n     * @method\n     * @name AppCenter#users_listForOrg\n     * @param {string} orgName - The organization's name\n     */\n    users_listForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_listAllTestersForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a unique list of users including the whole organization members plus testers in any shared group of that org\n     * @method\n     * @name AppCenter#distributionGroups_listAllTestersForOrg\n     * @param {string} orgName - The organization's name\n     */\n    distributionGroups_listAllTestersForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_removeUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes a user from a team that is owned by an organization\n     * @method\n     * @name AppCenter#teams_removeUser\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {string} userName - The slug name of the user\n     */\n    teams_removeUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_getUsersURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the users of a team which is owned by an organization\n     * @method\n     * @name AppCenter#teams_getUsers\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     */\n    teams_getUsers(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_addUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Adds a new user to a team that is owned by an organization\n     * @method\n     * @name AppCenter#teams_addUser\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {} userEmail - The email of the user to add to the team\n     */\n    teams_addUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters['userEmail'] !== undefined) {\n                body = parameters['userEmail'];\n            }\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_updatePermissionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates the permissions the team has to the app\n     * @method\n     * @name AppCenter#teams_updatePermissions\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {string} appName - The name of the application\n     * @param {} team - Microsoft Visual Studio App Center API\n     */\n    teams_updatePermissions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['team'] !== undefined) {\n                body = parameters['team'];\n            }\n            if (parameters['team'] === undefined) {\n                reject(new Error('Missing required  parameter: team'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_removeAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes an app from a team\n     * @method\n     * @name AppCenter#teams_removeApp\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {string} appName - The name of the application\n     */\n    teams_removeApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_addAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Adds an app to a team\n     * @method\n     * @name AppCenter#teams_addApp\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {} app - The name of the app to be added to the team. The app has to be owned by the organization.\n     */\n    teams_addApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters['app'] !== undefined) {\n                body = parameters['app'];\n            }\n            if (parameters['app'] === undefined) {\n                reject(new Error('Missing required  parameter: app'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_listAppsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the apps a team has access to\n     * @method\n     * @name AppCenter#teams_listApps\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     */\n    teams_listApps(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_getTeamURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the details of a single team\n     * @method\n     * @name AppCenter#teams_getTeam\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     */\n    teams_getTeam(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a single team\n     * @method\n     * @name AppCenter#teams_delete\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     */\n    teams_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates a single team\n     * @method\n     * @name AppCenter#teams_update\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {} team - The information used to update the team\n     */\n    teams_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters['team'] !== undefined) {\n                body = parameters['team'];\n            }\n            if (parameters['team'] === undefined) {\n                reject(new Error('Missing required  parameter: team'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_listAllURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the list of all teams in this org\n     * @method\n     * @name AppCenter#teams_listAll\n     * @param {string} orgName - The organization's name\n     */\n    teams_listAll(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_createTeamURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a team and returns it\n     * @method\n     * @name AppCenter#teams_createTeam\n     * @param {string} orgName - The organization's name\n     * @param {} team - The information used to create the team\n     */\n    teams_createTeam(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['team'] !== undefined) {\n                body = parameters['team'];\n            }\n            if (parameters['team'] === undefined) {\n                reject(new Error('Missing required  parameter: team'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_URL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}/revoke';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes a user's invitation to an organization\n     * @method\n     * @name AppCenter#orgInvitations_\n     * @param {string} orgName - The organization's name\n     * @param {string} email - The email address of the user to send the password reset mail to.\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    orgInvitations_(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}/revoke';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n            if (parameters['email'] === undefined) {\n                reject(new Error('Missing required  parameter: email'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_sendNewInvitationURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}/resend';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Cancels an existing organization invitation for the user and sends a new one\n     * @method\n     * @name AppCenter#orgInvitations_sendNewInvitation\n     * @param {string} orgName - The organization's name\n     * @param {string} email - The email address of the user to send the password reset mail to.\n     * @param {} role - The role of the user to be added\n     */\n    orgInvitations_sendNewInvitation(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}/resend';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n            if (parameters['email'] === undefined) {\n                reject(new Error('Missing required  parameter: email'));\n                return;\n            }\n            if (parameters['role'] !== undefined) {\n                body = parameters['role'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Allows the role of an invited user to be changed\n     * @method\n     * @name AppCenter#orgInvitations_update\n     * @param {string} orgName - The organization's name\n     * @param {string} email - The email address of the user to send the password reset mail to.\n     * @param {} userRole - The new role of the user\n     */\n    orgInvitations_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n            if (parameters['email'] === undefined) {\n                reject(new Error('Missing required  parameter: email'));\n                return;\n            }\n            if (parameters['userRole'] !== undefined) {\n                body = parameters['userRole'];\n            }\n            if (parameters['userRole'] === undefined) {\n                reject(new Error('Missing required  parameter: userRole'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Invites a new or existing user to an organization\n     * @method\n     * @name AppCenter#orgInvitations_create\n     * @param {string} orgName - The organization's name\n     * @param {} userEmail - The email of the user to invite\n     */\n    orgInvitations_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['userEmail'] !== undefined) {\n                body = parameters['userEmail'];\n            }\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes a user's invitation to an organization\n     * @method\n     * @name AppCenter#orgInvitations_delete\n     * @param {string} orgName - The organization's name\n     * @param {} userEmail - The email of the user whose invitation should be removed\n     */\n    orgInvitations_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['userEmail'] !== undefined) {\n                body = parameters['userEmail'];\n            }\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_listPendingURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the pending invitations for the organization\n     * @method\n     * @name AppCenter#orgInvitations_listPending\n     * @param {string} orgName - The organization's name\n     */\n    orgInvitations_listPending(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_detailsForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups_details';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters['appsLimit'] !== undefined) {\n            queryParameters['apps_limit'] = this.convertParameterCollectionFormat(parameters['appsLimit'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of distribution groups with details for an organization\n     * @method\n     * @name AppCenter#distributionGroups_detailsForOrg\n     * @param {string} orgName - The organization's name\n     * @param {number} appsLimit - The max number of apps to include in the response\n     */\n    distributionGroups_detailsForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups_details';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['appsLimit'] !== undefined) {\n                queryParameters['apps_limit'] = this.convertParameterCollectionFormat(parameters['appsLimit'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_resendSharedInviteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Resend shared distribution group invite notification to previously invited testers\n     * @method\n     * @name AppCenter#distributionGroups_resendSharedInvite\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} members - The list of members to add\n     */\n    distributionGroups_resendSharedInvite(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['members'] !== undefined) {\n                body = parameters['members'];\n            }\n            if (parameters['members'] === undefined) {\n                reject(new Error('Missing required  parameter: members'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_bulkDeleteUsersURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete testers from distribution group in an org\n     * @method\n     * @name AppCenter#distributionGroups_bulkDeleteUsers\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} members - The list of members to add\n     */\n    distributionGroups_bulkDeleteUsers(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['members'] !== undefined) {\n                body = parameters['members'];\n            }\n            if (parameters['members'] === undefined) {\n                reject(new Error('Missing required  parameter: members'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_listUsersForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of member in the distribution group specified\n     * @method\n     * @name AppCenter#distributionGroups_listUsersForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_listUsersForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_addUsersForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Accepts an array of user email addresses to get added to the specified group\n     * @method\n     * @name AppCenter#distributionGroups_addUsersForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} memberEmails - list of user email addresses that should get added as members to the specified group\n     */\n    distributionGroups_addUsersForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['memberEmails'] !== undefined) {\n                body = parameters['memberEmails'];\n            }\n            if (parameters['memberEmails'] === undefined) {\n                reject(new Error('Missing required  parameter: memberEmails'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_bulkDeleteAppsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete apps from distribution group in an org\n     * @method\n     * @name AppCenter#distributionGroups_bulkDeleteApps\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} apps - The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.\n     */\n    distributionGroups_bulkDeleteApps(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['apps'] !== undefined) {\n                body = parameters['apps'];\n            }\n            if (parameters['apps'] === undefined) {\n                reject(new Error('Missing required  parameter: apps'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_getAppsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get apps from a distribution group in an org\n     * @method\n     * @name AppCenter#distributionGroups_getApps\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_getApps(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_addAppsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Add apps to distribution group in an org\n     * @method\n     * @name AppCenter#distributionGroups_addApps\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} apps - The name of the apps to be added to the distribution group. The apps have to be owned by the organization.\n     */\n    distributionGroups_addApps(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['apps'] !== undefined) {\n                body = parameters['apps'];\n            }\n            if (parameters['apps'] === undefined) {\n                reject(new Error('Missing required  parameter: apps'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_getForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a single distribution group in org for a given distribution group name\n     * @method\n     * @name AppCenter#distributionGroups_getForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_getForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_patchForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update one given distribution group name in an org\n     * @method\n     * @name AppCenter#distributionGroups_patchForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} distributionGroupForOrg - The attributes to update for the distribution group\n     */\n    distributionGroups_patchForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['distributionGroupForOrg'] !== undefined) {\n                body = parameters['distributionGroupForOrg'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_deleteForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a single distribution group from an org with a given distribution group name\n     * @method\n     * @name AppCenter#distributionGroups_deleteForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_deleteForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_createForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a disribution goup which can be shared across apps under an organization\n     * @method\n     * @name AppCenter#distributionGroups_createForOrg\n     * @param {string} orgName - The organization's name\n     * @param {} distributionGroup - The attributes to update for the distribution group\n     */\n    distributionGroups_createForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['distributionGroup'] !== undefined) {\n                body = parameters['distributionGroup'];\n            }\n            if (parameters['distributionGroup'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroup'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_listForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of distribution groups in the org specified\n     * @method\n     * @name AppCenter#distributionGroups_listForOrg\n     * @param {string} orgName - The organization's name\n     */\n    distributionGroups_listForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    azureSubscription_listForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of azure subscriptions for the organization\n     * @method\n     * @name AppCenter#azureSubscription_listForOrg\n     * @param {string} orgName - The organization's name\n     */\n    azureSubscription_listForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organization_updateAvatarURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Sets the organization avatar\n     * @method\n     * @name AppCenter#organization_updateAvatar\n     * @param {string} orgName - The organization's name\n     * @param {file} avatar - The image for an Organization avatar to upload.\n     */\n    organization_updateAvatar(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'multipart/form-data';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['avatar'] !== undefined) {\n                form['avatar'] = parameters['avatar'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organization_deleteAvatarURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes the uploaded organization avatar\n     * @method\n     * @name AppCenter#organization_deleteAvatar\n     * @param {string} orgName - The organization's name\n     */\n    organization_deleteAvatar(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_createForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new app for the organization and returns it to the caller\n     * @method\n     * @name AppCenter#apps_createForOrg\n     * @param {string} orgName - The organization's name\n     * @param {} app - The data for the app\n     */\n    apps_createForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['app'] !== undefined) {\n                body = parameters['app'];\n            }\n            if (parameters['app'] === undefined) {\n                reject(new Error('Missing required  parameter: app'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_listForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of apps for the organization\n     * @method\n     * @name AppCenter#apps_listForOrg\n     * @param {string} orgName - The organization's name\n     */\n    apps_listForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the details of a single organization\n     * @method\n     * @name AppCenter#organizations_get\n     * @param {string} orgName - The organization's name\n     */\n    organizations_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of organizations the requesting user has access to\n     * @method\n     * @name AppCenter#organizations_update\n     * @param {string} orgName - The organization's name\n     * @param {} org - The data for the org\n     */\n    organizations_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['org'] !== undefined) {\n                body = parameters['org'];\n            }\n            if (parameters['org'] === undefined) {\n                reject(new Error('Missing required  parameter: org'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a single organization\n     * @method\n     * @name AppCenter#organizations_delete\n     * @param {string} orgName - The organization's name\n     */\n    organizations_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    billingAggregatedInformation_getForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{orgName}/billing/aggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{orgName}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters['service'] !== undefined) {\n            queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n        }\n        if (parameters['period'] !== undefined) {\n            queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n        }\n        if (parameters['showOriginalPlans'] !== undefined) {\n            queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Aggregated Billing Information for a given Organization.\n     * @method\n     * @name AppCenter#billingAggregatedInformation_getForOrg\n     * @param {string} orgName - The name of the Organization\n     * @param {string} service - Type of service that should be included in the Billing Information\n     * @param {string} period - Type of period that should be included in the Billing Information\n     * @param {boolean} showOriginalPlans - Controls whether the API should show the original plan when Azure Subscription is not enabled\n     */\n    billingAggregatedInformation_getForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{orgName}/billing/aggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{orgName}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['service'] !== undefined) {\n                queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n            }\n            if (parameters['period'] !== undefined) {\n                queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n            }\n            if (parameters['showOriginalPlans'] !== undefined) {\n                queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_createOrUpdateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new organization and returns it to the caller\n     * @method\n     * @name AppCenter#organizations_createOrUpdate\n     * @param {} organization - The organization data\n     */\n    organizations_createOrUpdate(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['organization'] !== undefined) {\n                body = parameters['organization'];\n            }\n            if (parameters['organization'] === undefined) {\n                reject(new Error('Missing required  parameter: organization'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of organizations the requesting user has access to\n     * @method\n     * @name AppCenter#organizations_list\n     */\n    organizations_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    legacyCodePushAcquisition_updateCheckURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/updateCheck';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['deploymentKey'] !== undefined) {\n            queryParameters['deploymentKey'] = this.convertParameterCollectionFormat(parameters['deploymentKey'], '');\n        }\n        if (parameters['appVersion'] !== undefined) {\n            queryParameters['appVersion'] = this.convertParameterCollectionFormat(parameters['appVersion'], '');\n        }\n        if (parameters['packageHash'] !== undefined) {\n            queryParameters['packageHash'] = this.convertParameterCollectionFormat(parameters['packageHash'], '');\n        }\n        if (parameters['label'] !== undefined) {\n            queryParameters['label'] = this.convertParameterCollectionFormat(parameters['label'], '');\n        }\n        if (parameters['clientUniqueId'] !== undefined) {\n            queryParameters['clientUniqueId'] = this.convertParameterCollectionFormat(parameters['clientUniqueId'], '');\n        }\n        if (parameters['isCompanion'] !== undefined) {\n            queryParameters['isCompanion'] = this.convertParameterCollectionFormat(parameters['isCompanion'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Check for updates\n     * @method\n     * @name AppCenter#legacyCodePushAcquisition_updateCheck\n     * @param {string} deploymentKey - Microsoft Visual Studio App Center API\n     * @param {string} appVersion - Microsoft Visual Studio App Center API\n     * @param {string} packageHash - Microsoft Visual Studio App Center API\n     * @param {string} label - Microsoft Visual Studio App Center API\n     * @param {string} clientUniqueId - Microsoft Visual Studio App Center API\n     * @param {string} isCompanion - Microsoft Visual Studio App Center API\n     */\n    legacyCodePushAcquisition_updateCheck(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/updateCheck';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deploymentKey'] !== undefined) {\n                queryParameters['deploymentKey'] = this.convertParameterCollectionFormat(parameters['deploymentKey'], '');\n            }\n            if (parameters['appVersion'] !== undefined) {\n                queryParameters['appVersion'] = this.convertParameterCollectionFormat(parameters['appVersion'], '');\n            }\n            if (parameters['packageHash'] !== undefined) {\n                queryParameters['packageHash'] = this.convertParameterCollectionFormat(parameters['packageHash'], '');\n            }\n            if (parameters['label'] !== undefined) {\n                queryParameters['label'] = this.convertParameterCollectionFormat(parameters['label'], '');\n            }\n            if (parameters['clientUniqueId'] !== undefined) {\n                queryParameters['clientUniqueId'] = this.convertParameterCollectionFormat(parameters['clientUniqueId'], '');\n            }\n            if (parameters['isCompanion'] !== undefined) {\n                queryParameters['isCompanion'] = this.convertParameterCollectionFormat(parameters['isCompanion'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    legacyCodePushAcquisition_updateDownloadStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/reportStatus/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Report download of specified release\n     * @method\n     * @name AppCenter#legacyCodePushAcquisition_updateDownloadStatus\n     * @param {} releaseMetadata - Deployment status metric properties\n     */\n    legacyCodePushAcquisition_updateDownloadStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/reportStatus/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['releaseMetadata'] !== undefined) {\n                body = parameters['releaseMetadata'];\n            }\n            if (parameters['releaseMetadata'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseMetadata'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    legacyCodePushAcquisition_updateInstallsStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/reportStatus/deploy';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Report deploy of specified release\n     * @method\n     * @name AppCenter#legacyCodePushAcquisition_updateInstallsStatus\n     * @param {} releaseMetadata - Deployment status metric properties\n     */\n    legacyCodePushAcquisition_updateInstallsStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/reportStatus/deploy';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['releaseMetadata'] !== undefined) {\n                body = parameters['releaseMetadata'];\n            }\n            if (parameters['releaseMetadata'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseMetadata'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    invitations_sentURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/invitations/sent';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns all invitations sent by the caller\n     * @method\n     * @name AppCenter#invitations_sent\n     */\n    invitations_sent(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/invitations/sent';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    billingAggregatedInformation_getAllURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/billing/allAccountsAggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['service'] !== undefined) {\n            queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n        }\n        if (parameters['period'] !== undefined) {\n            queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n        }\n        if (parameters['showOriginalPlans'] !== undefined) {\n            queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.\n     * @method\n     * @name AppCenter#billingAggregatedInformation_getAll\n     * @param {string} service - Type of service that should be included in the Billing Information\n     * @param {string} period - Type of period that should be included in the Billing Information\n     * @param {boolean} showOriginalPlans - Controls whether the API should show the original plan when Azure Subscription is not enabled\n     */\n    billingAggregatedInformation_getAll(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/billing/allAccountsAggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['service'] !== undefined) {\n                queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n            }\n            if (parameters['period'] !== undefined) {\n                queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n            }\n            if (parameters['showOriginalPlans'] !== undefined) {\n                queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    azureSubscription_listForUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of azure subscriptions for the user\n     * @method\n     * @name AppCenter#azureSubscription_listForUser\n     */\n    azureSubscription_listForUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    webhooks_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/webhooks';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get web hooks configured for a particular app\n     * @method\n     * @name AppCenter#webhooks_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    webhooks_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/webhooks';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_removeUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes the user from the app\n     * @method\n     * @name AppCenter#apps_removeUser\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} userEmail - The user email of the user to delete\n     */\n    apps_removeUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_updateUserPermissionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update user permission for the app\n     * @method\n     * @name AppCenter#apps_updateUserPermissions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} userEmail - The user email of the user to patch\n     * @param {} userAppPermissionsData - The value to update the user permission for the app.\n     */\n    apps_updateUserPermissions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters['userAppPermissionsData'] !== undefined) {\n                body = parameters['userAppPermissionsData'];\n            }\n            if (parameters['userAppPermissionsData'] === undefined) {\n                reject(new Error('Missing required  parameter: userAppPermissionsData'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the users associated with the app specified with the given app name which belongs to the given owner.\n     * @method\n     * @name AppCenter#users_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    users_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getDeviceSetOfUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets a device set belonging to the user\n     * @method\n     * @name AppCenter#test_getDeviceSetOfUser\n     * @param {string} id - The UUID of the device set\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getDeviceSetOfUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_updateDeviceSetOfUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates a device set belonging to the user\n     * @method\n     * @name AppCenter#test_updateDeviceSetOfUser\n     * @param {string} id - The UUID of the device set\n     * @param {} deviceSet - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_updateDeviceSetOfUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            if (parameters['deviceSet'] !== undefined) {\n                body = parameters['deviceSet'];\n            }\n            if (parameters['deviceSet'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceSet'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_deleteDeviceSetOfUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a device set belonging to the user\n     * @method\n     * @name AppCenter#test_deleteDeviceSetOfUser\n     * @param {string} id - The UUID of the device set\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_deleteDeviceSetOfUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_listDeviceSetsOfUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists device sets belonging to the user\n     * @method\n     * @name AppCenter#test_listDeviceSetsOfUser\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_listDeviceSetsOfUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createDeviceSetOfUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a device set belonging to the user\n     * @method\n     * @name AppCenter#test_createDeviceSetOfUser\n     * @param {} deviceSet - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createDeviceSetOfUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deviceSet'] !== undefined) {\n                body = parameters['deviceSet'];\n            }\n            if (parameters['deviceSet'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceSet'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getReleaseUploadStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['uploadId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get the current status of the release upload.\n     * @method\n     * @name AppCenter#releases_getReleaseUploadStatus\n     * @param {string} uploadId - The ID of the release upload\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_getReleaseUploadStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['uploadId'], '').toString())}`);\n            if (parameters['uploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: uploadId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_updateReleaseUploadStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['uploadId'], '').toString())}`);\n        if (parameters['extract'] !== undefined) {\n            queryParameters['extract'] = this.convertParameterCollectionFormat(parameters['extract'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update the current status of the release upload.\n     * @method\n     * @name AppCenter#releases_updateReleaseUploadStatus\n     * @param {string} uploadId - The ID of the release upload\n     * @param {} body - The release upload status information.\n     * @param {boolean} extract - A flag that indicates to extract release or not, true by default\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_updateReleaseUploadStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['uploadId'], '').toString())}`);\n            if (parameters['uploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: uploadId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            if (parameters['extract'] !== undefined) {\n                queryParameters['extract'] = this.convertParameterCollectionFormat(parameters['extract'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_createReleaseUploadURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Initiate a new release upload. This API is part of multi-step upload process.\n     * @method\n     * @name AppCenter#releases_createReleaseUpload\n     * @param {} body - Optional parameters to create releases with user defined metadata\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_createReleaseUpload(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_transferToOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/transfer_to_org';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Transfers ownership of an app to a new organization\n     * @method\n     * @name AppCenter#apps_transferToOrg\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    apps_transferToOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/transfer_to_org';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_transferOwnershipURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{destination_owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['destinationOwnerName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Transfers ownership of an app to a different user or organization\n     * @method\n     * @name AppCenter#apps_transferOwnership\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     * @param {string} destinationOwnerName - The name of the owner (user or organization) to which the app is being transferred\n     */\n    apps_transferOwnership(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            path = path.replace('{destination_owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['destinationOwnerName'], '').toString())}`);\n            if (parameters['destinationOwnerName'] === undefined) {\n                reject(new Error('Missing required  parameter: destinationOwnerName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_listToolsetsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/toolsets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['tools'] !== undefined) {\n            queryParameters['tools'] = this.convertParameterCollectionFormat(parameters['tools'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns available toolsets for application\n     * @method\n     * @name AppCenter#builds_listToolsets\n     * @param {string} tools - Toolset name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_listToolsets(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/toolsets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['tools'] !== undefined) {\n                queryParameters['tools'] = this.convertParameterCollectionFormat(parameters['tools'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteTesterFromDestinationsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the given tester from the all releases\n     * @method\n     * @name AppCenter#releases_deleteTesterFromDestinations\n     * @param {string} testerId - The id of the tester\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_deleteTesterFromDestinations(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n            if (parameters['testerId'] === undefined) {\n                reject(new Error('Missing required  parameter: testerId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_listTestersURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the testers associated with the app specified with the given app name which belongs to the given owner.\n     * @method\n     * @name AppCenter#apps_listTesters\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    apps_listTesters(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getAllTestRunsForSeriesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns list of all test runs for a given test series\n     * @method\n     * @name AppCenter#test_getAllTestRunsForSeries\n     * @param {string} testSeriesSlug - The slug of the test series\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getAllTestRunsForSeries(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n            if (parameters['testSeriesSlug'] === undefined) {\n                reject(new Error('Missing required  parameter: testSeriesSlug'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_deleteTestSeriesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a single test series\n     * @method\n     * @name AppCenter#test_deleteTestSeries\n     * @param {string} testSeriesSlug - The slug of the test series\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_deleteTestSeries(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n            if (parameters['testSeriesSlug'] === undefined) {\n                reject(new Error('Missing required  parameter: testSeriesSlug'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_patchTestSeriesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates name and slug of a test series\n     * @method\n     * @name AppCenter#test_patchTestSeries\n     * @param {string} testSeriesSlug - The slug of the test series\n     * @param {} name - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_patchTestSeries(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n            if (parameters['testSeriesSlug'] === undefined) {\n                reject(new Error('Missing required  parameter: testSeriesSlug'));\n                return;\n            }\n            if (parameters['name'] !== undefined) {\n                body = parameters['name'];\n            }\n            if (parameters['name'] === undefined) {\n                reject(new Error('Missing required  parameter: name'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getAllTestSeriesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['query'] !== undefined) {\n            queryParameters['query'] = this.convertParameterCollectionFormat(parameters['query'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns list of all test series for an application\n     * @method\n     * @name AppCenter#test_getAllTestSeries\n     * @param {string} query - A query string to filter test series\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getAllTestSeries(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['query'] !== undefined) {\n                queryParameters['query'] = this.convertParameterCollectionFormat(parameters['query'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createTestSeriesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates new test series for an application\n     * @method\n     * @name AppCenter#test_createTestSeries\n     * @param {} testSeriesName - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createTestSeries(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['testSeriesName'] !== undefined) {\n                body = parameters['testSeriesName'];\n            }\n            if (parameters['testSeriesName'] === undefined) {\n                reject(new Error('Missing required  parameter: testSeriesName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_stopTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Stop a test run execution\n     * @method\n     * @name AppCenter#test_stopTestRun\n     * @param {string} testRunId - The ID of the test run to be stopped\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_stopTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getTestRunStateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets state of the test run\n     * @method\n     * @name AppCenter#test_getTestRunState\n     * @param {string} testRunId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getTestRunState(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_startTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Starts test run\n     * @method\n     * @name AppCenter#test_startTestRun\n     * @param {string} testRunId - The ID of the test run\n     * @param {} startOptions - Option required to start the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_startTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            if (parameters['startOptions'] !== undefined) {\n                body = parameters['startOptions'];\n            }\n            if (parameters['startOptions'] === undefined) {\n                reject(new Error('Missing required  parameter: startOptions'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getTestReportURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a single test report\n     * @method\n     * @name AppCenter#test_getTestReport\n     * @param {string} testRunId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getTestReport(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_uploadHashesBatchURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Adds file with the given hash to a test run\n     * @method\n     * @name AppCenter#test_uploadHashesBatch\n     * @param {string} testRunId - The ID of the test run\n     * @param {} fileInfo - File hash information\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_uploadHashesBatch(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            if (parameters['fileInfo'] !== undefined) {\n                body = parameters['fileInfo'];\n            }\n            if (parameters['fileInfo'] === undefined) {\n                reject(new Error('Missing required  parameter: fileInfo'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_uploadHashURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Adds file with the given hash to a test run\n     * @method\n     * @name AppCenter#test_uploadHash\n     * @param {string} testRunId - The ID of the test run\n     * @param {} fileInfo - File hash information\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_uploadHash(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            if (parameters['fileInfo'] !== undefined) {\n                body = parameters['fileInfo'];\n            }\n            if (parameters['fileInfo'] === undefined) {\n                reject(new Error('Missing required  parameter: fileInfo'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_startUploadingFileURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Uploads file for a test run\n     * @method\n     * @name AppCenter#test_startUploadingFile\n     * @param {string} testRunId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_startUploadingFile(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a single test runs\n     * @method\n     * @name AppCenter#test_getTestRun\n     * @param {string} testRunId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_archiveTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Logically deletes a test run\n     * @method\n     * @name AppCenter#test_archiveTestRun\n     * @param {string} testRunId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_archiveTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getTestRunsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of test runs\n     * @method\n     * @name AppCenter#test_getTestRuns\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getTestRuns(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new test run\n     * @method\n     * @name AppCenter#test_createTestRun\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists test run data\n     * @method\n     * @name AppCenter#test_gdprExportTestRun\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportPipelineTestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists pipeline test data\n     * @method\n     * @name AppCenter#test_gdprExportPipelineTest\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportPipelineTest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportHashFileURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists hash file data\n     * @method\n     * @name AppCenter#test_gdprExportHashFile\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportHashFile(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportFileSetFileURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists file set file data\n     * @method\n     * @name AppCenter#test_gdprExportFileSetFile\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportFileSetFile(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists app data\n     * @method\n     * @name AppCenter#test_gdprExportApp\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportAppsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists all the endpoints available for Test apps data\n     * @method\n     * @name AppCenter#test_gdprExportApps\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportApps(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_getTeamsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the details of all teams that have access to the app.\n     * @method\n     * @name AppCenter#apps_getTeams\n     * @param {string} appName - The name of the application\n     * @param {string} ownerName - The name of the owner\n     */\n    apps_getTeams(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbols_getStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a particular symbol by id (uuid) for the provided application\n     * @method\n     * @name AppCenter#symbols_getStatus\n     * @param {string} symbolId - The ID of the symbol (uuid of the symbol)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbols_getStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n            if (parameters['symbolId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbols_getLocationURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the URL to download the symbol\n     * @method\n     * @name AppCenter#symbols_getLocation\n     * @param {string} symbolId - The ID of the symbol (uuid of the symbol)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbols_getLocation(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n            if (parameters['symbolId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbols_ignoreURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Marks a symbol by id (uuid) as ignored\n     * @method\n     * @name AppCenter#symbols_ignore\n     * @param {string} symbolId - The ID of the symbol (uuid of the symbol)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbols_ignore(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n            if (parameters['symbolId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbols_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a particular symbol by id (uuid) for the provided application\n     * @method\n     * @name AppCenter#symbols_get\n     * @param {string} symbolId - The ID of the symbol (uuid of the symbol)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbols_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n            if (parameters['symbolId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbols_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the list of all symbols for the provided application\n     * @method\n     * @name AppCenter#symbols_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbols_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_getLocationURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the URL to download the symbol upload\n     * @method\n     * @name AppCenter#symbolUploads_getLocation\n     * @param {string} symbolUploadId - The ID of the symbol upload\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbolUploads_getLocation(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n            if (parameters['symbolUploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolUploadId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets a symbol upload by id for the specified application\n     * @method\n     * @name AppCenter#symbolUploads_get\n     * @param {string} symbolUploadId - The ID of the symbol upload\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbolUploads_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n            if (parameters['symbolUploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolUploadId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_completeURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Commits or aborts the symbol upload process for a new set of symbols for the specified application\n     * @method\n     * @name AppCenter#symbolUploads_complete\n     * @param {string} symbolUploadId - The ID of the symbol upload\n     * @param {} body - The symbol information\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbolUploads_complete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n            if (parameters['symbolUploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolUploadId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a symbol upload by id for the specified application\n     * @method\n     * @name AppCenter#symbolUploads_delete\n     * @param {string} symbolUploadId - The ID of the symbol upload\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbolUploads_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n            if (parameters['symbolUploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolUploadId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['status'] !== undefined) {\n            queryParameters['status'] = this.convertParameterCollectionFormat(parameters['status'], '');\n        }\n        if (parameters['symbolType'] !== undefined) {\n            queryParameters['symbol_type'] = this.convertParameterCollectionFormat(parameters['symbolType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n    * Gets a list of all uploads for the specified application\n    * @method\n    * @name AppCenter#symbolUploads_list\n         * @param {integer} top - The maximum number of results to return.\n         * @param {string} status - Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.\n\n         * @param {string} symbolType - The type of symbols\n         * @param {string} ownerName - The name of the owner\n         * @param {string} appName - The name of the application\n    */\n    symbolUploads_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['top'] !== undefined) {\n                queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['status'] !== undefined) {\n                queryParameters['status'] = this.convertParameterCollectionFormat(parameters['status'], '');\n            }\n            if (parameters['symbolType'] !== undefined) {\n                queryParameters['symbol_type'] = this.convertParameterCollectionFormat(parameters['symbolType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Begins the symbol upload process for a new set of symbols for the specified application\n     * @method\n     * @name AppCenter#symbolUploads_create\n     * @param {} body - The symbol information\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbolUploads_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getSubscriptionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get information about the currently active subscriptions, if any\n     * @method\n     * @name AppCenter#test_getSubscriptions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getSubscriptions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createSubscriptionURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Accept a free trial subscription\n     * @method\n     * @name AppCenter#test_createSubscription\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createSubscription(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeNotifications_getNotificationByAppIdURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/store_service_status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Application specific store service status\n     * @method\n     * @name AppCenter#storeNotifications_getNotificationByAppId\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeNotifications_getNotificationByAppId(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/store_service_status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    repositories_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{source_host}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['sourceHost'], '').toString())}`);\n        if (parameters['vstsAccountName'] !== undefined) {\n            queryParameters['vstsAccountName'] = this.convertParameterCollectionFormat(parameters['vstsAccountName'], '');\n        }\n        if (parameters['vstsProjectId'] !== undefined) {\n            queryParameters['vstsProjectId'] = this.convertParameterCollectionFormat(parameters['vstsProjectId'], '');\n        }\n        if (parameters['serviceConnectionId'] !== undefined) {\n            queryParameters['service_connection_id'] = this.convertParameterCollectionFormat(parameters['serviceConnectionId'], '');\n        }\n        if (parameters['form'] !== undefined) {\n            queryParameters['form'] = this.convertParameterCollectionFormat(parameters['form'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the repositories available from the source code host\n     * @method\n     * @name AppCenter#repositories_list\n     * @param {string} sourceHost - The source host\n     * @param {string} vstsAccountName - Filter repositories only for specified account and project, \"vstsProjectId\" is required\n     * @param {string} vstsProjectId - Filter repositories only for specified account and project, \"vstsAccountName\" is required\n     * @param {string} serviceConnectionId - The id of the service connection (private). Required for GitLab self-hosted repositories\n     * @param {string} form - The selected form of the object\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    repositories_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{source_host}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['sourceHost'], '').toString())}`);\n            if (parameters['sourceHost'] === undefined) {\n                reject(new Error('Missing required  parameter: sourceHost'));\n                return;\n            }\n            if (parameters['vstsAccountName'] !== undefined) {\n                queryParameters['vstsAccountName'] = this.convertParameterCollectionFormat(parameters['vstsAccountName'], '');\n            }\n            if (parameters['vstsProjectId'] !== undefined) {\n                queryParameters['vstsProjectId'] = this.convertParameterCollectionFormat(parameters['vstsProjectId'], '');\n            }\n            if (parameters['serviceConnectionId'] !== undefined) {\n                queryParameters['service_connection_id'] = this.convertParameterCollectionFormat(parameters['serviceConnectionId'], '');\n            }\n            if (parameters['form'] !== undefined) {\n                queryParameters['form'] = this.convertParameterCollectionFormat(parameters['form'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    repositoryConfigurations_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['includeInactive'] !== undefined) {\n            queryParameters['includeInactive'] = this.convertParameterCollectionFormat(parameters['includeInactive'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the repository build configuration status of the app\n     * @method\n     * @name AppCenter#repositoryConfigurations_list\n     * @param {boolean} includeInactive - Include inactive configurations if none are active\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    repositoryConfigurations_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['includeInactive'] !== undefined) {\n                queryParameters['includeInactive'] = this.convertParameterCollectionFormat(parameters['includeInactive'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    repositoryConfigurations_createOrUpdateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Configures the repository for build\n     * @method\n     * @name AppCenter#repositoryConfigurations_createOrUpdate\n     * @param {} repo - The repository information\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    repositoryConfigurations_createOrUpdate(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['repo'] !== undefined) {\n                body = parameters['repo'];\n            }\n            if (parameters['repo'] === undefined) {\n                reject(new Error('Missing required  parameter: repo'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    repositoryConfigurations_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes the configuration for the repository\n     * @method\n     * @name AppCenter#repositoryConfigurations_delete\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    repositoryConfigurations_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_getReleaseUpdateDevicesStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{resign_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['resignId'], '').toString())}`);\n        if (parameters['includeProvisioningProfile'] !== undefined) {\n            queryParameters['include_provisioning_profile'] = this.convertParameterCollectionFormat(parameters['includeProvisioningProfile'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the resign status to the caller\n     * @method\n     * @name AppCenter#devices_getReleaseUpdateDevicesStatus\n     * @param {string} releaseId - The ID of the release.\n     * @param {string} resignId - The ID of the resign operation.\n     * @param {boolean} includeProvisioningProfile - A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    devices_getReleaseUpdateDevicesStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{resign_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['resignId'], '').toString())}`);\n            if (parameters['resignId'] === undefined) {\n                reject(new Error('Missing required  parameter: resignId'));\n                return;\n            }\n            if (parameters['includeProvisioningProfile'] !== undefined) {\n                queryParameters['include_provisioning_profile'] = this.convertParameterCollectionFormat(parameters['includeProvisioningProfile'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_putDistributionTesterURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update details about the specified tester associated with the release\n     * @method\n     * @name AppCenter#releases_putDistributionTester\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} testerId - The id of the tester\n     * @param {} destinationTesterUpdateDetails - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_putDistributionTester(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n            if (parameters['testerId'] === undefined) {\n                reject(new Error('Missing required  parameter: testerId'));\n                return;\n            }\n            if (parameters['destinationTesterUpdateDetails'] !== undefined) {\n                body = parameters['destinationTesterUpdateDetails'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteDistributionTesterURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the given tester from the release\n     * @method\n     * @name AppCenter#releases_deleteDistributionTester\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} testerId - The id of the tester\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_deleteDistributionTester(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n            if (parameters['testerId'] === undefined) {\n                reject(new Error('Missing required  parameter: testerId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_addTestersURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Distributes a release to a user\n     * @method\n     * @name AppCenter#releases_addTesters\n     * @param {integer} releaseId - The ID of the release\n     * @param {} body - The release information.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_addTesters(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteDistributionStoreURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{store_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the given distribution store from the release\n     * @method\n     * @name AppCenter#releases_deleteDistributionStore\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} storeId - The id of the distribution store\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_deleteDistributionStore(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{store_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeId'], '').toString())}`);\n            if (parameters['storeId'] === undefined) {\n                reject(new Error('Missing required  parameter: storeId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_addStoreURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Distributes a release to a store\n     * @method\n     * @name AppCenter#releases_addStore\n     * @param {integer} releaseId - The ID of the release\n     * @param {} body - The release information.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_addStore(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    provisioning_profileURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return information about the provisioning profile. Only available for iOS.\n     * @method\n     * @name AppCenter#provisioning_profile\n     * @param {integer} releaseId - The release_id\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    provisioning_profile(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_putDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['groupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update details about the specified distribution group associated with the release\n     * @method\n     * @name AppCenter#releases_putDistributionGroup\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} groupId - The id of the releases destination\n     * @param {} destinationGroupUpdateDetails - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_putDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['groupId'], '').toString())}`);\n            if (parameters['groupId'] === undefined) {\n                reject(new Error('Missing required  parameter: groupId'));\n                return;\n            }\n            if (parameters['destinationGroupUpdateDetails'] !== undefined) {\n                body = parameters['destinationGroupUpdateDetails'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['groupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the given distribution group from the release\n     * @method\n     * @name AppCenter#releases_deleteDistributionGroup\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} groupId - The id of the distribution group\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_deleteDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['groupId'], '').toString())}`);\n            if (parameters['groupId'] === undefined) {\n                reject(new Error('Missing required  parameter: groupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_addDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Distributes a release to a group\n     * @method\n     * @name AppCenter#releases_addDistributionGroup\n     * @param {integer} releaseId - The ID of the release\n     * @param {} body - The release information.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_addDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getLatestByUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        if (parameters['udid'] !== undefined) {\n            queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n        }\n        if (parameters['isInstallPage'] !== undefined) {\n            queryParameters['is_install_page'] = this.convertParameterCollectionFormat(parameters['isInstallPage'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).\n     * @method\n     * @name AppCenter#releases_getLatestByUser\n     * @param {string} releaseId - The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user.\n     * @param {string} udid - when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.\n     * @param {boolean} isInstallPage - The check if the request is from Install page\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_getLatestByUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['udid'] !== undefined) {\n                queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n            }\n            if (parameters['isInstallPage'] !== undefined) {\n                queryParameters['is_install_page'] = this.convertParameterCollectionFormat(parameters['isInstallPage'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_updateDetailsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update details of a release.\n     * @method\n     * @name AppCenter#releases_updateDetails\n     * @param {integer} releaseId - The ID of the release\n     * @param {} body - The release information.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_updateDetails(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates a release.\n     * @method\n     * @name AppCenter#releases_update\n     * @param {integer} releaseId - The ID of the release\n     * @param {} body - The release information.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'text/plain';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a release.\n     * @method\n     * @name AppCenter#releases_delete\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['publishedOnly'] !== undefined) {\n            queryParameters['published_only'] = this.convertParameterCollectionFormat(parameters['publishedOnly'], '');\n        }\n        if (parameters['scope'] !== undefined) {\n            queryParameters['scope'] = this.convertParameterCollectionFormat(parameters['scope'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['releaseId'] !== undefined) {\n            queryParameters['releaseId'] = this.convertParameterCollectionFormat(parameters['releaseId'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return basic information about releases.\n     * @method\n     * @name AppCenter#releases_list\n     * @param {boolean} publishedOnly - When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.\n     * @param {string} scope - When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.\n     * @param {number} top - The number of releases to return\n     * @param {number} releaseId - The id of a release\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['publishedOnly'] !== undefined) {\n                queryParameters['published_only'] = this.convertParameterCollectionFormat(parameters['publishedOnly'], '');\n            }\n            if (parameters['scope'] !== undefined) {\n                queryParameters['scope'] = this.convertParameterCollectionFormat(parameters['scope'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['releaseId'] !== undefined) {\n                queryParameters['releaseId'] = this.convertParameterCollectionFormat(parameters['releaseId'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_listLatestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/recent_releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get the latest release from every distribution group associated with an application.\n     * @method\n     * @name AppCenter#releases_listLatest\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_listLatest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/recent_releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getDeviceSetOfOwnerURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets a device set belonging to the owner\n     * @method\n     * @name AppCenter#test_getDeviceSetOfOwner\n     * @param {string} id - The UUID of the device set\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getDeviceSetOfOwner(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_updateDeviceSetOfOwnerURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates a device set belonging to the owner\n     * @method\n     * @name AppCenter#test_updateDeviceSetOfOwner\n     * @param {string} id - The UUID of the device set\n     * @param {} deviceSet - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_updateDeviceSetOfOwner(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            if (parameters['deviceSet'] !== undefined) {\n                body = parameters['deviceSet'];\n            }\n            if (parameters['deviceSet'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceSet'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_deleteDeviceSetOfOwnerURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a device set belonging to the owner\n     * @method\n     * @name AppCenter#test_deleteDeviceSetOfOwner\n     * @param {string} id - The UUID of the device set\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_deleteDeviceSetOfOwner(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_listDeviceSetsOfOwnerURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists device sets belonging to the owner\n     * @method\n     * @name AppCenter#test_listDeviceSetsOfOwner\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_listDeviceSetsOfOwner(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createDeviceSetOfOwnerURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a device set belonging to the owner\n     * @method\n     * @name AppCenter#test_createDeviceSetOfOwner\n     * @param {} deviceSet - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createDeviceSetOfOwner(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deviceSet'] !== undefined) {\n                body = parameters['deviceSet'];\n            }\n            if (parameters['deviceSet'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceSet'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    notifications_getAppEmailSettingsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get Email notification settings of user for a particular app\n     * @method\n     * @name AppCenter#notifications_getAppEmailSettings\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    notifications_getAppEmailSettings(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_updatePermissionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update pending invitation permission\n     * @method\n     * @name AppCenter#appInvitations_updatePermissions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} userEmail - The email of the user to invite\n     * @param {} userInvitationPermissionsData - The value to update the user permission in the invite.\n     */\n    appInvitations_updatePermissions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters['userInvitationPermissionsData'] !== undefined) {\n                body = parameters['userInvitationPermissionsData'];\n            }\n            if (parameters['userInvitationPermissionsData'] === undefined) {\n                reject(new Error('Missing required  parameter: userInvitationPermissionsData'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes a user's invitation to an app\n     * @method\n     * @name AppCenter#appInvitations_delete\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} userEmail - The email of the user to invite\n     */\n    appInvitations_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Invites a new or existing user to an app\n     * @method\n     * @name AppCenter#appInvitations_create\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} userEmail - The email of the user to invite\n     */\n    appInvitations_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['userEmail'] !== undefined) {\n                body = parameters['userEmail'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the pending invitations for the app\n     * @method\n     * @name AppCenter#appInvitations_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    appInvitations_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    fileAssets_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/file_asset';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a new asset to upload a file\n     * @method\n     * @name AppCenter#fileAssets_create\n     * @param {} payload - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    fileAssets_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/file_asset';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['payload'] !== undefined) {\n                body = parameters['payload'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_EnableURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Enable export configuration.\n     * @method\n     * @name AppCenter#ExportConfigurations_Enable\n     * @param {string} exportConfigurationId - The id of the export configuration.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_Enable(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n            if (parameters['exportConfigurationId'] === undefined) {\n                reject(new Error('Missing required  parameter: exportConfigurationId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_DisableURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Disable export configuration.\n     * @method\n     * @name AppCenter#ExportConfigurations_Disable\n     * @param {string} exportConfigurationId - The id of the export configuration.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_Disable(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n            if (parameters['exportConfigurationId'] === undefined) {\n                reject(new Error('Missing required  parameter: exportConfigurationId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_GetURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get export configuration.\n     * @method\n     * @name AppCenter#ExportConfigurations_Get\n     * @param {string} exportConfigurationId - The id of the export configuration.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_Get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n            if (parameters['exportConfigurationId'] === undefined) {\n                reject(new Error('Missing required  parameter: exportConfigurationId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_PartialUpdateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Partially update export configuration.\n     * @method\n     * @name AppCenter#ExportConfigurations_PartialUpdate\n     * @param {string} exportConfigurationId - The id of the export configuration.\n     * @param {} properties - Export configurations.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_PartialUpdate(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n            if (parameters['exportConfigurationId'] === undefined) {\n                reject(new Error('Missing required  parameter: exportConfigurationId'));\n                return;\n            }\n            if (parameters['properties'] !== undefined) {\n                body = parameters['properties'];\n            }\n            if (parameters['properties'] === undefined) {\n                reject(new Error('Missing required  parameter: properties'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_DeleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete export configuration.\n     * @method\n     * @name AppCenter#ExportConfigurations_Delete\n     * @param {string} exportConfigurationId - The id of the export configuration.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_Delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n            if (parameters['exportConfigurationId'] === undefined) {\n                reject(new Error('Missing required  parameter: exportConfigurationId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_ListURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * List export configurations.\n     * @method\n     * @name AppCenter#ExportConfigurations_List\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_List(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_CreateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create new export configuration\n     * @method\n     * @name AppCenter#ExportConfigurations_Create\n     * @param {} properties - Export configurations.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_Create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['properties'] !== undefined) {\n                body = parameters['properties'];\n            }\n            if (parameters['properties'] === undefined) {\n                reject(new Error('Missing required  parameter: properties'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ListSessionLogsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        if (parameters['date'] !== undefined) {\n            queryParameters['date'] = this.convertParameterCollectionFormat(parameters['date'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get session logs by error ID\n     * @method\n     * @name AppCenter#Errors_ListSessionLogs\n     * @param {string} errorId - The id of the error\n     * @param {string} date - Date of data requested\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ListSessionLogs(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            if (parameters['date'] !== undefined) {\n                queryParameters['date'] = this.convertParameterCollectionFormat(parameters['date'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorAttachmentTextURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{attachmentId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['attachmentId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error attachment text.\n     * @method\n     * @name AppCenter#Errors_ErrorAttachmentText\n     * @param {string} errorId - The id of the error\n     * @param {string} attachmentId - Error attachment id.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorAttachmentText(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{attachmentId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['attachmentId'], '').toString())}`);\n            if (parameters['attachmentId'] === undefined) {\n                reject(new Error('Missing required  parameter: attachmentId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorAttachmentLocationURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{attachmentId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['attachmentId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error attachment location.\n     * @method\n     * @name AppCenter#Errors_ErrorAttachmentLocation\n     * @param {string} errorId - The id of the error\n     * @param {string} attachmentId - Error attachment id.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorAttachmentLocation(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{attachmentId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['attachmentId'], '').toString())}`);\n            if (parameters['attachmentId'] === undefined) {\n                reject(new Error('Missing required  parameter: attachmentId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorAttachmentsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * List error attachments.\n     * @method\n     * @name AppCenter#Errors_ErrorAttachments\n     * @param {string} errorId - The id of the error\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorAttachments(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorSearchURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/search';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['filter'] !== undefined) {\n            queryParameters['filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n        }\n        if (parameters['q'] !== undefined) {\n            queryParameters['q'] = this.convertParameterCollectionFormat(parameters['q'], '');\n        }\n        if (parameters['order'] !== undefined) {\n            queryParameters['order'] = this.convertParameterCollectionFormat(parameters['order'], '');\n        }\n        if (parameters['sort'] !== undefined) {\n            queryParameters['sort'] = this.convertParameterCollectionFormat(parameters['sort'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['skip'] !== undefined) {\n            queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Errors list based on search parameters\n     * @method\n     * @name AppCenter#Errors_ErrorSearch\n     * @param {string} filter - A filter as specified in OData notation\n     * @param {string} q - A query string\n     * @param {string} order - It controls the order of sorting\n     * @param {string} sort - It controls the sort based on specified field\n     * @param {integer} top - The maximum number of results to return\n     * @param {integer} skip - The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorSearch(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/search';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['filter'] !== undefined) {\n                queryParameters['filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n            }\n            if (parameters['q'] !== undefined) {\n                queryParameters['q'] = this.convertParameterCollectionFormat(parameters['q'], '');\n            }\n            if (parameters['order'] !== undefined) {\n                queryParameters['order'] = this.convertParameterCollectionFormat(parameters['order'], '');\n            }\n            if (parameters['sort'] !== undefined) {\n                queryParameters['sort'] = this.convertParameterCollectionFormat(parameters['sort'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['skip'] !== undefined) {\n                queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    errors_getRetentionSettingsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * gets the retention settings in days\n     * @method\n     * @name AppCenter#errors_getRetentionSettings\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    errors_getRetentionSettings(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorFreeDevicePercentagesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        if (parameters['appBuild'] !== undefined) {\n            queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n        }\n        if (parameters['errorType'] !== undefined) {\n            queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices\n     * @method\n     * @name AppCenter#Errors_ErrorFreeDevicePercentages\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {array} versions - Microsoft Visual Studio App Center API\n     * @param {string} appBuild - app build\n     * @param {string} errorType - Type of error (handled vs unhandled), excluding All\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorFreeDevicePercentages(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            if (parameters['appBuild'] !== undefined) {\n                queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n            }\n            if (parameters['errorType'] !== undefined) {\n                queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupErrorStackTraceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the stack trace for the error group.\n     * @method\n     * @name AppCenter#Errors_GroupErrorStackTrace\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupErrorStackTrace(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupOperatingSystemCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Top OSes of the selected error group.\n     * @method\n     * @name AppCenter#Errors_GroupOperatingSystemCounts\n     * @param {string} errorGroupId - The id of the error group\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupOperatingSystemCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupModelCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Top models of the selected error group.\n     * @method\n     * @name AppCenter#Errors_GroupModelCounts\n     * @param {string} errorGroupId - The id of the error group\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupModelCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorStackTraceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error Stacktrace details.\n     * @method\n     * @name AppCenter#Errors_ErrorStackTrace\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} errorId - The id of the error\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorStackTrace(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorLocationURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error location.\n     * @method\n     * @name AppCenter#Errors_ErrorLocation\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} errorId - The id of the error\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorLocation(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorDownloadURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        if (parameters['format'] !== undefined) {\n            queryParameters['format'] = this.convertParameterCollectionFormat(parameters['format'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Download details for a specific error.\n     * @method\n     * @name AppCenter#Errors_ErrorDownload\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} errorId - The id of the error\n     * @param {string} format - the format of the crash log\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorDownload(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            if (parameters['format'] !== undefined) {\n                queryParameters['format'] = this.convertParameterCollectionFormat(parameters['format'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GetErrorDetailsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error details.\n     * @method\n     * @name AppCenter#Errors_GetErrorDetails\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} errorId - The id of the error\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GetErrorDetails(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_DeleteErrorURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.\n     * @method\n     * @name AppCenter#Errors_DeleteError\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} errorId - The id of the error\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_DeleteError(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_LatestErrorDetailsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Latest error details.\n     * @method\n     * @name AppCenter#Errors_LatestErrorDetails\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_LatestErrorDetails(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ListForGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['model'] !== undefined) {\n            queryParameters['model'] = this.convertParameterCollectionFormat(parameters['model'], '');\n        }\n        if (parameters['os'] !== undefined) {\n            queryParameters['os'] = this.convertParameterCollectionFormat(parameters['os'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get all errors for group\n     * @method\n     * @name AppCenter#Errors_ListForGroup\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {string} model - Microsoft Visual Studio App Center API\n     * @param {string} os - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ListForGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['model'] !== undefined) {\n                queryParameters['model'] = this.convertParameterCollectionFormat(parameters['model'], '');\n            }\n            if (parameters['os'] !== undefined) {\n                queryParameters['os'] = this.convertParameterCollectionFormat(parameters['os'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupErrorFreeDevicePercentagesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices\n     * @method\n     * @name AppCenter#Errors_GroupErrorFreeDevicePercentages\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupErrorFreeDevicePercentages(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupCountsPerDayURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        if (parameters['version'] !== undefined) {\n            queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of errors by day in the time range of the selected error group with selected version\n     * @method\n     * @name AppCenter#Errors_GroupCountsPerDay\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} version - Microsoft Visual Studio App Center API\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupCountsPerDay(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['version'] !== undefined) {\n                queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupDetailsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error group details\n     * @method\n     * @name AppCenter#Errors_GroupDetails\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupDetails(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_UpdateStateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update error group state\n     * @method\n     * @name AppCenter#Errors_UpdateState\n     * @param {string} errorGroupId - The id of the error group\n     * @param {} errorGroupState - The state of the error group\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_UpdateState(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['errorGroupState'] !== undefined) {\n                body = parameters['errorGroupState'];\n            }\n            if (parameters['errorGroupState'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupState'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorGroupsSearchURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['filter'] !== undefined) {\n            queryParameters['filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n        }\n        if (parameters['q'] !== undefined) {\n            queryParameters['q'] = this.convertParameterCollectionFormat(parameters['q'], '');\n        }\n        if (parameters['order'] !== undefined) {\n            queryParameters['order'] = this.convertParameterCollectionFormat(parameters['order'], '');\n        }\n        if (parameters['sort'] !== undefined) {\n            queryParameters['sort'] = this.convertParameterCollectionFormat(parameters['sort'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['skip'] !== undefined) {\n            queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error groups list based on search parameters\n     * @method\n     * @name AppCenter#Errors_ErrorGroupsSearch\n     * @param {string} filter - A filter as specified in OData notation\n     * @param {string} q - A query string\n     * @param {string} order - It controls the order of sorting\n     * @param {string} sort - It controls the sort based on specified field\n     * @param {integer} top - The maximum number of results to return\n     * @param {integer} skip - The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorGroupsSearch(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['filter'] !== undefined) {\n                queryParameters['filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n            }\n            if (parameters['q'] !== undefined) {\n                queryParameters['q'] = this.convertParameterCollectionFormat(parameters['q'], '');\n            }\n            if (parameters['order'] !== undefined) {\n                queryParameters['order'] = this.convertParameterCollectionFormat(parameters['order'], '');\n            }\n            if (parameters['sort'] !== undefined) {\n                queryParameters['sort'] = this.convertParameterCollectionFormat(parameters['sort'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['skip'] !== undefined) {\n                queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupListURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['version'] !== undefined) {\n            queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n        }\n        if (parameters['appBuild'] !== undefined) {\n            queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n        }\n        if (parameters['groupState'] !== undefined) {\n            queryParameters['groupState'] = this.convertParameterCollectionFormat(parameters['groupState'], '');\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['orderby'] !== undefined) {\n            queryParameters['$orderby'] = this.convertParameterCollectionFormat(parameters['orderby'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['errorType'] !== undefined) {\n            queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * List of error groups\n     * @method\n     * @name AppCenter#Errors_GroupList\n     * @param {string} version - Microsoft Visual Studio App Center API\n     * @param {string} appBuild - app build\n     * @param {string} groupState - Microsoft Visual Studio App Center API\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {string} orderby - controls the sorting order and sorting based on which column\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {string} errorType - Type of error (handled vs unhandled), including All\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupList(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['version'] !== undefined) {\n                queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n            }\n            if (parameters['appBuild'] !== undefined) {\n                queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n            }\n            if (parameters['groupState'] !== undefined) {\n                queryParameters['groupState'] = this.convertParameterCollectionFormat(parameters['groupState'], '');\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['orderby'] !== undefined) {\n                queryParameters['$orderby'] = this.convertParameterCollectionFormat(parameters['orderby'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['errorType'] !== undefined) {\n                queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_CountsPerDayURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['version'] !== undefined) {\n            queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['appBuild'] !== undefined) {\n            queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n        }\n        if (parameters['errorType'] !== undefined) {\n            queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.\n     * @method\n     * @name AppCenter#Errors_CountsPerDay\n     * @param {string} version - Microsoft Visual Studio App Center API\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {string} appBuild - app build\n     * @param {string} errorType - Type of error (handled vs unhandled), excluding All\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_CountsPerDay(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['version'] !== undefined) {\n                queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['appBuild'] !== undefined) {\n                queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n            }\n            if (parameters['errorType'] !== undefined) {\n                queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_AvailableVersionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/available_versions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['skip'] !== undefined) {\n            queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n        }\n        if (parameters['filter'] !== undefined) {\n            queryParameters['$filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n        }\n        if (parameters['inlinecount'] !== undefined) {\n            queryParameters['$inlinecount'] = this.convertParameterCollectionFormat(parameters['inlinecount'], '');\n        }\n        if (parameters['errorType'] !== undefined) {\n            queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get all available versions in the time range.\n     * @method\n     * @name AppCenter#Errors_AvailableVersions\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {integer} skip - The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.\n     * @param {string} filter - A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.\n     * @param {string} inlinecount - Controls whether or not to include a count of all the items across all pages.\n     * @param {string} errorType - Type of error (handled vs unhandled), including All\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_AvailableVersions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/available_versions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['skip'] !== undefined) {\n                queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n            }\n            if (parameters['filter'] !== undefined) {\n                queryParameters['$filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n            }\n            if (parameters['inlinecount'] !== undefined) {\n                queryParameters['$inlinecount'] = this.convertParameterCollectionFormat(parameters['inlinecount'], '');\n            }\n            if (parameters['errorType'] !== undefined) {\n                queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_AppBuildsListURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['version'] !== undefined) {\n            queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['errorType'] !== undefined) {\n            queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * List of app builds\n     * @method\n     * @name AppCenter#Errors_AppBuildsList\n     * @param {string} version - Microsoft Visual Studio App Center API\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {string} errorType - Type of error (handled vs unhandled), including All\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_AppBuildsList(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['version'] !== undefined) {\n                queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n            }\n            if (parameters['version'] === undefined) {\n                reject(new Error('Missing required  parameter: version'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['errorType'] !== undefined) {\n                queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_getRealTimeStatusByReleaseIdURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return the Real time Status publishing of release from store.\n     * @method\n     * @name AppCenter#storeReleases_getRealTimeStatusByReleaseId\n     * @param {string} storeName - The name of the store\n     * @param {number} releaseId - The id of the release\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_getRealTimeStatusByReleaseId(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleasePublishLogs_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns publish logs for a particular release published to a particular store\n     * @method\n     * @name AppCenter#storeReleasePublishLogs_get\n     * @param {string} storeName - The name of the store\n     * @param {string} releaseId - The ID of the realease\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleasePublishLogs_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_getPublishErrorURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return the Error Details of release which failed in publishing.\n     * @method\n     * @name AppCenter#storeReleases_getPublishError\n     * @param {string} storeName - The name of the store\n     * @param {number} releaseId - The id of the release\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_getPublishError(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return releases published in a store for releaseId and storeId\n     * @method\n     * @name AppCenter#storeReleases_get\n     * @param {string} storeName - The name of the store\n     * @param {string} releaseId - The name of the store\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * delete the release with release Id\n     * @method\n     * @name AppCenter#storeReleases_delete\n     * @param {string} storeName - The name of the store\n     * @param {string} releaseId - The id of the release\n     * @param {} body - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return all releases published  in a store\n     * @method\n     * @name AppCenter#storeReleases_list\n     * @param {string} storeName - The name of the store\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_getLatestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the latest release published in a store.\n     * @method\n     * @name AppCenter#storeReleases_getLatest\n     * @param {string} storeName - The name of the store\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_getLatest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    stores_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return the store details for specified store name.\n     * @method\n     * @name AppCenter#stores_get\n     * @param {string} storeName - The name of the store\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    stores_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    stores_patchURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update the store.\n     * @method\n     * @name AppCenter#stores_patch\n     * @param {string} storeName - The name of the store\n     * @param {} body - Store update request\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    stores_patch(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    stores_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * delete the store based on specific store name.\n     * @method\n     * @name AppCenter#stores_delete\n     * @param {string} storeName - The name of the store\n     * @param {} body - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    stores_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    stores_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a new external store for the specified application.\n     * @method\n     * @name AppCenter#stores_create\n     * @param {} body - The store request\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    stores_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    stores_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get all the store details from Storage store table for a particular application.\n     * @method\n     * @name AppCenter#stores_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    stores_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_resendInviteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Resend distribution group app invite notification to previously invited testers\n     * @method\n     * @name AppCenter#distributionGroups_resendInvite\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} members - The list of members to add\n     */\n    distributionGroups_resendInvite(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['members'] !== undefined) {\n                body = parameters['members'];\n            }\n            if (parameters['members'] === undefined) {\n                reject(new Error('Missing required  parameter: members'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getLatestByDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return detailed information about a distributed release in a given distribution group.\n     * @method\n     * @name AppCenter#releases_getLatestByDistributionGroup\n     * @param {string} ownerName - The name of the app owner\n     * @param {string} appName - The name of the app\n     * @param {string} distributionGroupName - The name of the distribution group.\n     * @param {string} releaseId - Also supports the constant `latest`, which will return the latest release in the distribution group.\n     */\n    releases_getLatestByDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteWithDistributionGroupIdURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a release with id 'release_id' in a given distribution group.\n     * @method\n     * @name AppCenter#releases_deleteWithDistributionGroupId\n     * @param {string} ownerName - The name of the app owner\n     * @param {string} appName - The name of the app\n     * @param {string} distributionGroupName - The name of the distribution group.\n     * @param {integer} releaseId - The ID identifying the unique release.\n     */\n    releases_deleteWithDistributionGroupId(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_listByDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return basic information about distributed releases in a given distribution group.\n     * @method\n     * @name AppCenter#releases_listByDistributionGroup\n     * @param {string} distributionGroupName - The name of the distribution group.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_listByDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_removeUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Remove the users from the distribution group\n     * @method\n     * @name AppCenter#distributionGroups_removeUser\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} members - The list of members to add\n     */\n    distributionGroups_removeUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['members'] !== undefined) {\n                body = parameters['members'];\n            }\n            if (parameters['members'] === undefined) {\n                reject(new Error('Missing required  parameter: members'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_listUsersURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters['excludePendingInvitations'] !== undefined) {\n            queryParameters['exclude_pending_invitations'] = this.convertParameterCollectionFormat(parameters['excludePendingInvitations'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of member details in the distribution group specified\n     * @method\n     * @name AppCenter#distributionGroups_listUsers\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {boolean} excludePendingInvitations - Whether to exclude pending invitations in the response\n     */\n    distributionGroups_listUsers(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['excludePendingInvitations'] !== undefined) {\n                queryParameters['exclude_pending_invitations'] = this.convertParameterCollectionFormat(parameters['excludePendingInvitations'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_addUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Adds the members to the specified distribution group\n     * @method\n     * @name AppCenter#distributionGroups_addUser\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} members - The list of members to add\n     */\n    distributionGroups_addUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['members'] !== undefined) {\n                body = parameters['members'];\n            }\n            if (parameters['members'] === undefined) {\n                reject(new Error('Missing required  parameter: members'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_listCsvFormatURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters['unprovisionedOnly'] !== undefined) {\n            queryParameters['unprovisioned_only'] = this.convertParameterCollectionFormat(parameters['unprovisionedOnly'], '');\n        }\n        if (parameters['udids'] !== undefined) {\n            queryParameters['udids'] = this.convertParameterCollectionFormat(parameters['udids'], 'csv');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns all devices associated with the given distribution group.\n     * @method\n     * @name AppCenter#devices_listCsvFormat\n     * @param {string} distributionGroupName - The name of the distribution group.\n     * @param {boolean} unprovisionedOnly - when true, filters out provisioned devices\n     * @param {array} udids - multiple UDIDs which should be part of the resulting CSV.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    devices_listCsvFormat(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'text/csv';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['unprovisionedOnly'] !== undefined) {\n                queryParameters['unprovisioned_only'] = this.convertParameterCollectionFormat(parameters['unprovisionedOnly'], '');\n            }\n            if (parameters['udids'] !== undefined) {\n                queryParameters['udids'] = this.convertParameterCollectionFormat(parameters['udids'], 'csv');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters['releaseId'] !== undefined) {\n            queryParameters['release_id'] = this.convertParameterCollectionFormat(parameters['releaseId'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns all devices associated with the given distribution group\n     * @method\n     * @name AppCenter#devices_list\n     * @param {string} distributionGroupName - The name of the distribution group.\n     * @param {number} releaseId - when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    devices_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['releaseId'] !== undefined) {\n                queryParameters['release_id'] = this.convertParameterCollectionFormat(parameters['releaseId'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a single distribution group for a given distribution group name\n     * @method\n     * @name AppCenter#distributionGroups_get\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates the attributes of distribution group\n     * @method\n     * @name AppCenter#distributionGroups_update\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} distributionGroup - The attributes to update for the distribution group\n     */\n    distributionGroups_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['distributionGroup'] !== undefined) {\n                body = parameters['distributionGroup'];\n            }\n            if (parameters['distributionGroup'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroup'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a distribution group\n     * @method\n     * @name AppCenter#distributionGroups_delete\n     * @param {string} appName - The name of the application\n     * @param {string} ownerName - The name of the owner\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of distribution groups in the app specified\n     * @method\n     * @name AppCenter#distributionGroups_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    distributionGroups_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new distribution group and returns it to the caller\n     * @method\n     * @name AppCenter#distributionGroups_create\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} distributionGroup - The attributes to update for the distribution group\n     */\n    distributionGroups_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['distributionGroup'] !== undefined) {\n                body = parameters['distributionGroup'];\n            }\n            if (parameters['distributionGroup'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroup'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    missingSymbolGroups_infoURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets application level statistics for all missing symbol groups\n     * @method\n     * @name AppCenter#missingSymbolGroups_info\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    missingSymbolGroups_info(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    missingSymbolGroups_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets missing symbol crash group by its id\n     * @method\n     * @name AppCenter#missingSymbolGroups_get\n     * @param {string} symbolGroupId - missing symbol crash group id\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    missingSymbolGroups_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolGroupId'], '').toString())}`);\n            if (parameters['symbolGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolGroupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    missingSymbolGroups_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets top N (ordered by crash count) of crash groups by missing symbol\n     * @method\n     * @name AppCenter#missingSymbolGroups_list\n     * @param {integer} top - top N elements\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    missingSymbolGroups_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['top'] !== undefined) {\n                queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['top'] === undefined) {\n                reject(new Error('Missing required  parameter: top'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Devices_BlockLogsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{install_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['installId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n    * **Warning, this operation is not reversible.**\n\n A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user.\n\n    * @method\n    * @name AppCenter#Devices_BlockLogs\n         * @param {string} installId - The id of the device\n         * @param {string} ownerName - The name of the owner\n         * @param {string} appName - The name of the application\n    */\n    Devices_BlockLogs(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{install_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['installId'], '').toString())}`);\n            if (parameters['installId'] === undefined) {\n                reject(new Error('Missing required  parameter: installId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    App_BlockLogsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n    * **Warning, this operation is not reversible.**\n\nA successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id.\n\n    * @method\n    * @name AppCenter#App_BlockLogs\n         * @param {string} ownerName - The name of the owner\n         * @param {string} appName - The name of the application\n    */\n    App_BlockLogs(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createDeviceSelectionURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/device_selection';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a short ID for a list of devices\n     * @method\n     * @name AppCenter#test_createDeviceSelection\n     * @param {} deviceList - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createDeviceSelection(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/device_selection';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deviceList'] !== undefined) {\n                body = parameters['deviceList'];\n            }\n            if (parameters['deviceList'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceList'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getDeviceConfigurationsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/device_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['appUploadId'] !== undefined) {\n            queryParameters['app_upload_id'] = this.convertParameterCollectionFormat(parameters['appUploadId'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of available devices\n     * @method\n     * @name AppCenter#test_getDeviceConfigurations\n     * @param {string} appUploadId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getDeviceConfigurations(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/device_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['appUploadId'] !== undefined) {\n                queryParameters['app_upload_id'] = this.convertParameterCollectionFormat(parameters['appUploadId'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentUpload_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a new CodePush release upload for the specified deployment\n     * @method\n     * @name AppCenter#codePushDeploymentUpload_create\n     * @param {string} deploymentName - deployment name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentUpload_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentRelease_rollbackURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Rollback the latest or a specific release for an app deployment\n     * @method\n     * @name AppCenter#codePushDeploymentRelease_rollback\n     * @param {string} deploymentName - deployment name\n     * @param {} releaseLabel - The specific release label that you want to rollback to\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentRelease_rollback(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            if (parameters['releaseLabel'] !== undefined) {\n                body = parameters['releaseLabel'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    deploymentReleases_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{release_label}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseLabel'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Modifies a CodePush release metadata under the given Deployment\n     * @method\n     * @name AppCenter#deploymentReleases_update\n     * @param {string} deploymentName - deployment name\n     * @param {string} releaseLabel - release label\n     * @param {} release - Release modification. All fields are optional and only provided fields will get updated.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    deploymentReleases_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{release_label}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseLabel'], '').toString())}`);\n            if (parameters['releaseLabel'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseLabel'));\n                return;\n            }\n            if (parameters['release'] !== undefined) {\n                body = parameters['release'];\n            }\n            if (parameters['release'] === undefined) {\n                reject(new Error('Missing required  parameter: release'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentReleases_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Clears a Deployment of releases\n     * @method\n     * @name AppCenter#codePushDeploymentReleases_delete\n     * @param {string} deploymentName - deployment name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentReleases_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentReleases_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the history of releases on a Deployment\n     * @method\n     * @name AppCenter#codePushDeploymentReleases_get\n     * @param {string} deploymentName - deployment name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentReleases_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentReleases_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a new CodePush release for the specified deployment\n     * @method\n     * @name AppCenter#codePushDeploymentReleases_create\n     * @param {string} deploymentName - deployment name\n     * @param {} uploadedRelease - The necessary information required to download the bundle and being the release process.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentReleases_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            if (parameters['uploadedRelease'] !== undefined) {\n                body = parameters['uploadedRelease'];\n            }\n            if (parameters['uploadedRelease'] === undefined) {\n                reject(new Error('Missing required  parameter: uploadedRelease'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_promoteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{promote_deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['promoteDeploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Promote one release (default latest one) from one deployment to another\n     * @method\n     * @name AppCenter#codePushDeployments_promote\n     * @param {string} deploymentName - deployment name\n     * @param {string} promoteDeploymentName - deployment name\n     * @param {} release - Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_promote(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{promote_deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['promoteDeploymentName'], '').toString())}`);\n            if (parameters['promoteDeploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: promoteDeploymentName'));\n                return;\n            }\n            if (parameters['release'] !== undefined) {\n                body = parameters['release'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentMetrics_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets all releases metrics for specified Deployment\n     * @method\n     * @name AppCenter#codePushDeploymentMetrics_get\n     * @param {string} deploymentName - deployment name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentMetrics_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a CodePush Deployment for the given app\n     * @method\n     * @name AppCenter#codePushDeployments_delete\n     * @param {string} deploymentName - deployment name\n     * @param {} body - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets a CodePush Deployment for the given app\n     * @method\n     * @name AppCenter#codePushDeployments_get\n     * @param {string} deploymentName - deployment name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Modifies a CodePush Deployment for the given app\n     * @method\n     * @name AppCenter#codePushDeployments_update\n     * @param {string} deploymentName - deployment name\n     * @param {} deployment - Deployment modification. All fields are optional and only provided fields will get updated.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            if (parameters['deployment'] !== undefined) {\n                body = parameters['deployment'];\n            }\n            if (parameters['deployment'] === undefined) {\n                reject(new Error('Missing required  parameter: deployment'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets a list of CodePush deployments for the given app\n     * @method\n     * @name AppCenter#codePushDeployments_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a CodePush Deployment for the given app\n     * @method\n     * @name AppCenter#codePushDeployments_create\n     * @param {} deployment - Deployment to be created\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deployment'] !== undefined) {\n                body = parameters['deployment'];\n            }\n            if (parameters['deployment'] === undefined) {\n                reject(new Error('Missing required  parameter: deployment'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Crashes_ListSessionLogsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{crash_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['crashId'], '').toString())}`);\n        if (parameters['date'] !== undefined) {\n            queryParameters['date'] = this.convertParameterCollectionFormat(parameters['date'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get session logs by crash ID\n     * @method\n     * @name AppCenter#Crashes_ListSessionLogs\n     * @param {string} crashId - The id of the a crash\n     * @param {string} date - Date of data requested\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Crashes_ListSessionLogs(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{crash_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['crashId'], '').toString())}`);\n            if (parameters['crashId'] === undefined) {\n                reject(new Error('Missing required  parameter: crashId'));\n                return;\n            }\n            if (parameters['date'] !== undefined) {\n                queryParameters['date'] = this.convertParameterCollectionFormat(parameters['date'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    commits_listByShaListURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/commits/batch';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['hashes'] !== undefined) {\n            queryParameters['hashes'] = this.convertParameterCollectionFormat(parameters['hashes'], 'csv');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns commit information for a batch of shas\n     * @method\n     * @name AppCenter#commits_listByShaList\n     * @param {array} hashes - A collection of commit SHAs comma-delimited\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    commits_listByShaList(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/commits/batch';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['hashes'] !== undefined) {\n                queryParameters['hashes'] = this.convertParameterCollectionFormat(parameters['hashes'], 'csv');\n            }\n            if (parameters['hashes'] === undefined) {\n                reject(new Error('Missing required  parameter: hashes'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_getLogURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get the build log\n     * @method\n     * @name AppCenter#builds_getLog\n     * @param {integer} buildId - The build ID\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_getLog(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n            if (parameters['buildId'] === undefined) {\n                reject(new Error('Missing required  parameter: buildId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_getDownloadUriURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n        path = path.replace('{download_type}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['downloadType'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the download URI\n     * @method\n     * @name AppCenter#builds_getDownloadUri\n     * @param {integer} buildId - The build ID\n     * @param {string} downloadType - The download type\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_getDownloadUri(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n            if (parameters['buildId'] === undefined) {\n                reject(new Error('Missing required  parameter: buildId'));\n                return;\n            }\n            path = path.replace('{download_type}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['downloadType'], '').toString())}`);\n            if (parameters['downloadType'] === undefined) {\n                reject(new Error('Missing required  parameter: downloadType'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_distributeURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Distribute a build\n     * @method\n     * @name AppCenter#builds_distribute\n     * @param {integer} buildId - The build ID\n     * @param {} distributeInfo - The distribution details\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_distribute(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n            if (parameters['buildId'] === undefined) {\n                reject(new Error('Missing required  parameter: buildId'));\n                return;\n            }\n            if (parameters['distributeInfo'] !== undefined) {\n                body = parameters['distributeInfo'];\n            }\n            if (parameters['distributeInfo'] === undefined) {\n                reject(new Error('Missing required  parameter: distributeInfo'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the build detail for the given build ID\n     * @method\n     * @name AppCenter#builds_get\n     * @param {integer} buildId - The build ID\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n            if (parameters['buildId'] === undefined) {\n                reject(new Error('Missing required  parameter: buildId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Cancels a build\n     * @method\n     * @name AppCenter#builds_update\n     * @param {integer} buildId - The build ID\n     * @param {} properties - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n            if (parameters['buildId'] === undefined) {\n                reject(new Error('Missing required  parameter: buildId'));\n                return;\n            }\n            if (parameters['properties'] !== undefined) {\n                body = parameters['properties'];\n            }\n            if (parameters['properties'] === undefined) {\n                reject(new Error('Missing required  parameter: properties'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_getStatusByAppIdURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/build_service_status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Application specific build service status\n     * @method\n     * @name AppCenter#builds_getStatusByAppId\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_getStatusByAppId(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/build_service_status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    bugTracker_getRepoIssueFromCrashURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{crash_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['crashGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get project issue related to a crash group\n     * @method\n     * @name AppCenter#bugTracker_getRepoIssueFromCrash\n     * @param {string} crashGroupId - CrashGroup Id\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    bugTracker_getRepoIssueFromCrash(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{crash_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['crashGroupId'], '').toString())}`);\n            if (parameters['crashGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: crashGroupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    bugtracker_getSettingsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/bugtracker';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get bug tracker settings for a particular app\n     * @method\n     * @name AppCenter#bugtracker_getSettings\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    bugtracker_getSettings(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/bugtracker';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_listToolsetProjectsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        if (parameters['os'] !== undefined) {\n            queryParameters['os'] = this.convertParameterCollectionFormat(parameters['os'], '');\n        }\n        if (parameters['platform'] !== undefined) {\n            queryParameters['platform'] = this.convertParameterCollectionFormat(parameters['platform'], '');\n        }\n        if (parameters['maxSearchDepth'] !== undefined) {\n            queryParameters['maxSearchDepth'] = this.convertParameterCollectionFormat(parameters['maxSearchDepth'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the projects in the repository for the branch, for all toolsets\n     * @method\n     * @name AppCenter#builds_listToolsetProjects\n     * @param {string} branch - The branch name\n     * @param {string} os - The desired OS for the project scan; normally the same as the app OS\n     * @param {string} platform - The desired platform for the project scan\n     * @param {integer} maxSearchDepth - The depth of the repository to search for project files\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_listToolsetProjects(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['os'] !== undefined) {\n                queryParameters['os'] = this.convertParameterCollectionFormat(parameters['os'], '');\n            }\n            if (parameters['os'] === undefined) {\n                reject(new Error('Missing required  parameter: os'));\n                return;\n            }\n            if (parameters['platform'] !== undefined) {\n                queryParameters['platform'] = this.convertParameterCollectionFormat(parameters['platform'], '');\n            }\n            if (parameters['platform'] === undefined) {\n                reject(new Error('Missing required  parameter: platform'));\n                return;\n            }\n            if (parameters['maxSearchDepth'] !== undefined) {\n                queryParameters['maxSearchDepth'] = this.convertParameterCollectionFormat(parameters['maxSearchDepth'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    buildConfigurations_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/export_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        if (parameters['format'] !== undefined) {\n            queryParameters['format'] = this.convertParameterCollectionFormat(parameters['format'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the build configuration in Azure pipeline YAML format\n     * @method\n     * @name AppCenter#buildConfigurations_get\n     * @param {string} branch - The branch name\n     * @param {string} format - Configuration format\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    buildConfigurations_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/export_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['format'] !== undefined) {\n                queryParameters['format'] = this.convertParameterCollectionFormat(parameters['format'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    branchConfigurations_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the branch configuration\n     * @method\n     * @name AppCenter#branchConfigurations_get\n     * @param {string} branch - The branch name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    branchConfigurations_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    branchConfigurations_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Configures the branch for build\n     * @method\n     * @name AppCenter#branchConfigurations_create\n     * @param {string} branch - The branch name\n     * @param {} params - Parameters of the configuration\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    branchConfigurations_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['params'] !== undefined) {\n                body = parameters['params'];\n            }\n            if (parameters['params'] === undefined) {\n                reject(new Error('Missing required  parameter: params'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    branchConfigurations_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Reconfigures the branch for build\n     * @method\n     * @name AppCenter#branchConfigurations_update\n     * @param {string} branch - The branch name\n     * @param {} params - Parameters of the configuration\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    branchConfigurations_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['params'] !== undefined) {\n                body = parameters['params'];\n            }\n            if (parameters['params'] === undefined) {\n                reject(new Error('Missing required  parameter: params'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    branchConfigurations_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes the branch build configuration\n     * @method\n     * @name AppCenter#branchConfigurations_delete\n     * @param {string} branch - The branch name\n     * @param {} payload - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    branchConfigurations_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['payload'] !== undefined) {\n                body = parameters['payload'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_listByBranchURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the list of builds for the branch\n     * @method\n     * @name AppCenter#builds_listByBranch\n     * @param {string} branch - The branch name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_listByBranch(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a build\n     * @method\n     * @name AppCenter#builds_create\n     * @param {string} branch - The branch name\n     * @param {} params - Parameters of the build\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['params'] !== undefined) {\n                body = parameters['params'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_listBranchesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the list of Git branches for this application\n     * @method\n     * @name AppCenter#builds_listBranches\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_listBranches(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    billingAggregatedInformation_getByAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/billing/aggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['service'] !== undefined) {\n            queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n        }\n        if (parameters['period'] !== undefined) {\n            queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n        }\n        if (parameters['showOriginalPlans'] !== undefined) {\n            queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Aggregated Billing Information for owner of a given app.\n     * @method\n     * @name AppCenter#billingAggregatedInformation_getByApp\n     * @param {string} service - Type of service that should be included in the Billing Information\n     * @param {string} period - Type of period that should be included in the Billing Information\n     * @param {boolean} showOriginalPlans - Controls whether the API should show the original plan when Azure Subscription is not enabled\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    billingAggregatedInformation_getByApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/billing/aggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['service'] !== undefined) {\n                queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n            }\n            if (parameters['period'] !== undefined) {\n                queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n            }\n            if (parameters['showOriginalPlans'] !== undefined) {\n                queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    azureSubscription_deleteForAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{azure_subscription_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['azureSubscriptionId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the azure subscriptions for the app\n     * @method\n     * @name AppCenter#azureSubscription_deleteForApp\n     * @param {string} azureSubscriptionId - The unique ID (UUID) of the azure subscription\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    azureSubscription_deleteForApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{azure_subscription_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['azureSubscriptionId'], '').toString())}`);\n            if (parameters['azureSubscriptionId'] === undefined) {\n                reject(new Error('Missing required  parameter: azureSubscriptionId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    azureSubscription_listForAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of azure subscriptions for the app\n     * @method\n     * @name AppCenter#azureSubscription_listForApp\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    azureSubscription_listForApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    azureSubscription_linkForAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Link azure subscription to an app\n     * @method\n     * @name AppCenter#azureSubscription_linkForApp\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} azureSubscriptionToAppData - The azure subscription data needed to be link to the app.\n     */\n    azureSubscription_linkForApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['azureSubscriptionToAppData'] !== undefined) {\n                body = parameters['azureSubscriptionToAppData'];\n            }\n            if (parameters['azureSubscriptionToAppData'] === undefined) {\n                reject(new Error('Missing required  parameter: azureSubscriptionToAppData'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_updateAvatarURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Sets the app avatar\n     * @method\n     * @name AppCenter#apps_updateAvatar\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {file} avatar - The image for an app avatar to upload.\n     */\n    apps_updateAvatar(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'multipart/form-data';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['avatar'] !== undefined) {\n                form['avatar'] = parameters['avatar'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_deleteAvatarURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes the uploaded app avatar\n     * @method\n     * @name AppCenter#apps_deleteAvatar\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    apps_deleteAvatar(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appleMapping_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get mapping of apple app to an existing app in apple store.\n     * @method\n     * @name AppCenter#appleMapping_get\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    appleMapping_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appleMapping_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete mapping of apple app to an existing app in apple store.\n     * @method\n     * @name AppCenter#appleMapping_delete\n     * @param {} body - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    appleMapping_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appleMapping_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a mapping for an existing app in apple store for the specified application.\n     * @method\n     * @name AppCenter#appleMapping_create\n     * @param {} body - The apple app mapping object\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    appleMapping_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appApiTokens_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{api_token_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['apiTokenId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the App Api Token object with the specific ID\n     * @method\n     * @name AppCenter#appApiTokens_delete\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} apiTokenId - The unique ID (UUID) of the api token\n     */\n    appApiTokens_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{api_token_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['apiTokenId'], '').toString())}`);\n            if (parameters['apiTokenId'] === undefined) {\n                reject(new Error('Missing required  parameter: apiTokenId'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appApiTokens_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns App API tokens for the app\n     * @method\n     * @name AppCenter#appApiTokens_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    appApiTokens_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appApiTokens_newURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new App API token\n     * @method\n     * @name AppCenter#appApiTokens_new\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} description - Description of the token\n     */\n    appApiTokens_new(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['description'] !== undefined) {\n                body = parameters['description'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_VersionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/versions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of active versions in the time range ordered by version.\n     * @method\n     * @name AppCenter#Analytics_Versions\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_Versions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/versions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_PerDeviceCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of sessions per device in the time range.\n     * @method\n     * @name AppCenter#Analytics_PerDeviceCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_PerDeviceCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_SessionDurationsDistributionURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets session duration.\n     * @method\n     * @name AppCenter#Analytics_SessionDurationsDistribution\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_SessionDurationsDistribution(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_SessionCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of sessions in the time range.\n     * @method\n     * @name AppCenter#Analytics_SessionCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_SessionCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_PlaceCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/places';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Places in the time range.\n     * @method\n     * @name AppCenter#Analytics_PlaceCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_PlaceCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/places';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_OperatingSystemCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/oses';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * OSes in the time range.\n     * @method\n     * @name AppCenter#Analytics_OperatingSystemCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_OperatingSystemCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/oses';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_ModelCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/models';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Models in the time range.\n     * @method\n     * @name AppCenter#Analytics_ModelCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_ModelCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/models';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_LogFlowURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.\n     * @method\n     * @name AppCenter#Analytics_LogFlow\n     * @param {string} start - Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_LogFlow(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_LanguageCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/languages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Languages in the time range.\n     * @method\n     * @name AppCenter#Analytics_LanguageCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_LanguageCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/languages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_GenericLogFlowURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.\n     * @method\n     * @name AppCenter#Analytics_GenericLogFlow\n     * @param {string} start - Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_GenericLogFlow(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventPropertyCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        path = path.replace('{event_property_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventPropertyName'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Event properties value counts during the time range in descending order.\n     * @method\n     * @name AppCenter#Analytics_EventPropertyCounts\n     * @param {string} eventName - The id of the event.\n     * @param {string} eventPropertyName - The id of the event property.\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {integer} top - The number of property values to return. Set to 0 in order to fetch all results available.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventPropertyCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            path = path.replace('{event_property_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventPropertyName'], '').toString())}`);\n            if (parameters['eventPropertyName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventPropertyName'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventPropertiesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Event properties.\n     * @method\n     * @name AppCenter#Analytics_EventProperties\n     * @param {string} eventName - The id of the event.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventProperties(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventCountURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of events by interval in the time range.\n     * @method\n     * @name AppCenter#Analytics_EventCount\n     * @param {string} eventName - The id of the event.\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventCount(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventDeviceCountURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of devices for an event by interval in the time range.\n     * @method\n     * @name AppCenter#Analytics_EventDeviceCount\n     * @param {string} eventName - The id of the event.\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventDeviceCount(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventPerSessionCountURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of events per session by interval in the time range.\n     * @method\n     * @name AppCenter#Analytics_EventPerSessionCount\n     * @param {string} eventName - The id of the event.\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventPerSessionCount(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventPerDeviceCountURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of events per device by interval in the time range.\n     * @method\n     * @name AppCenter#Analytics_EventPerDeviceCount\n     * @param {string} eventName - The id of the event.\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventPerDeviceCount(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventsDeleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the set of Events with the specified event names.\n     * @method\n     * @name AppCenter#Analytics_EventsDelete\n     * @param {string} eventName - The id of the event.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventsDelete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        if (parameters['eventName'] !== undefined) {\n            queryParameters['event_name'] = this.convertParameterCollectionFormat(parameters['eventName'], 'pipes');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['skip'] !== undefined) {\n            queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n        }\n        if (parameters['inlinecount'] !== undefined) {\n            queryParameters['$inlinecount'] = this.convertParameterCollectionFormat(parameters['inlinecount'], '');\n        }\n        if (parameters['orderby'] !== undefined) {\n            queryParameters['$orderby'] = this.convertParameterCollectionFormat(parameters['orderby'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of active events in the time range ordered by event.\n     * @method\n     * @name AppCenter#Analytics_Events\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {array} eventName - To select the specific events.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {integer} skip - The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.\n     * @param {string} inlinecount - Controls whether or not to include a count of all the items across all pages.\n     * @param {string} orderby - controls the sorting order and sorting based on which column\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_Events(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            if (parameters['eventName'] !== undefined) {\n                queryParameters['event_name'] = this.convertParameterCollectionFormat(parameters['eventName'], 'pipes');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['skip'] !== undefined) {\n                queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n            }\n            if (parameters['inlinecount'] !== undefined) {\n                queryParameters['$inlinecount'] = this.convertParameterCollectionFormat(parameters['inlinecount'], '');\n            }\n            if (parameters['orderby'] !== undefined) {\n                queryParameters['$orderby'] = this.convertParameterCollectionFormat(parameters['orderby'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventsDeleteLogsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the set of Events with the specified event names.\n     * @method\n     * @name AppCenter#Analytics_EventsDeleteLogs\n     * @param {string} eventName - The id of the event.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventsDeleteLogs(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_DistributionReleaseCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of total downloads for the provided distribution releases.\n     * @method\n     * @name AppCenter#Analytics_DistributionReleaseCounts\n     * @param {} releases - The releases to retrieve.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_DistributionReleaseCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['releases'] !== undefined) {\n                body = parameters['releases'];\n            }\n            if (parameters['releases'] === undefined) {\n                reject(new Error('Missing required  parameter: releases'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_CrashGroupsTotalsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Overall crashes and affected users count of the selected crash groups with selected versions.\n     * @method\n     * @name AppCenter#Analytics_CrashGroupsTotals\n     * @param {} crashGroups - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_CrashGroupsTotals(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['crashGroups'] !== undefined) {\n                body = parameters['crashGroups'];\n            }\n            if (parameters['crashGroups'] === undefined) {\n                reject(new Error('Missing required  parameter: crashGroups'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_AudienceNameExistsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns whether audience definition exists.\n     * @method\n     * @name AppCenter#Analytics_AudienceNameExists\n     * @param {string} audienceName - The name of the audience\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_AudienceNameExists(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n            if (parameters['audienceName'] === undefined) {\n                reject(new Error('Missing required  parameter: audienceName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_DeleteAudienceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes audience definition.\n     * @method\n     * @name AppCenter#Analytics_DeleteAudience\n     * @param {string} audienceName - The name of the audience\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_DeleteAudience(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n            if (parameters['audienceName'] === undefined) {\n                reject(new Error('Missing required  parameter: audienceName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_GetAudienceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets audience definition.\n     * @method\n     * @name AppCenter#Analytics_GetAudience\n     * @param {string} audienceName - The name of the audience\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_GetAudience(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n            if (parameters['audienceName'] === undefined) {\n                reject(new Error('Missing required  parameter: audienceName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_CreateOrUpdateAudienceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates or updates audience definition.\n     * @method\n     * @name AppCenter#Analytics_CreateOrUpdateAudience\n     * @param {string} audienceName - The name of the audience\n     * @param {} audience - Audience definition\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_CreateOrUpdateAudience(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n            if (parameters['audienceName'] === undefined) {\n                reject(new Error('Missing required  parameter: audienceName'));\n                return;\n            }\n            if (parameters['audience'] !== undefined) {\n                body = parameters['audience'];\n            }\n            if (parameters['audience'] === undefined) {\n                reject(new Error('Missing required  parameter: audience'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_ListDevicePropertyValuesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{property_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['propertyName'], '').toString())}`);\n        if (parameters['contains'] !== undefined) {\n            queryParameters['contains'] = this.convertParameterCollectionFormat(parameters['contains'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get list of device property values.\n     * @method\n     * @name AppCenter#Analytics_ListDevicePropertyValues\n     * @param {string} propertyName - Device property\n     * @param {string} contains - Contains string\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_ListDevicePropertyValues(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{property_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['propertyName'], '').toString())}`);\n            if (parameters['propertyName'] === undefined) {\n                reject(new Error('Missing required  parameter: propertyName'));\n                return;\n            }\n            if (parameters['contains'] !== undefined) {\n                queryParameters['contains'] = this.convertParameterCollectionFormat(parameters['contains'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_ListDevicePropertiesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get list of device properties.\n     * @method\n     * @name AppCenter#Analytics_ListDeviceProperties\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_ListDeviceProperties(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_ListCustomPropertiesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get list of custom properties.\n     * @method\n     * @name AppCenter#Analytics_ListCustomProperties\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_ListCustomProperties(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_TestAudienceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Tests audience definition.\n     * @method\n     * @name AppCenter#Analytics_TestAudience\n     * @param {} audience - Audience definition\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_TestAudience(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['audience'] !== undefined) {\n                body = parameters['audience'];\n            }\n            if (parameters['audience'] === undefined) {\n                reject(new Error('Missing required  parameter: audience'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_ListAudiencesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['includeDisabled'] !== undefined) {\n            queryParameters['include_disabled'] = this.convertParameterCollectionFormat(parameters['includeDisabled'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get list of audiences.\n     * @method\n     * @name AppCenter#Analytics_ListAudiences\n     * @param {boolean} includeDisabled - Include disabled audience definitions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_ListAudiences(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['includeDisabled'] !== undefined) {\n                queryParameters['include_disabled'] = this.convertParameterCollectionFormat(parameters['includeDisabled'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_DeviceCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        if (parameters['appBuild'] !== undefined) {\n            queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of active devices by interval in the time range.\n     * @method\n     * @name AppCenter#Analytics_DeviceCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} appBuild - Application build number. If build number is specified than multiple versions are not allowed.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_DeviceCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            if (parameters['appBuild'] !== undefined) {\n                queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return a specific app with the given app name which belongs to the given owner.\n     * @method\n     * @name AppCenter#apps_get\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    apps_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Partially updates a single app\n     * @method\n     * @name AppCenter#apps_update\n     * @param {string} appName - The name of the application\n     * @param {string} ownerName - The name of the owner\n     * @param {} app - The partial data for the app\n     */\n    apps_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            if (parameters['app'] !== undefined) {\n                body = parameters['app'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete an app\n     * @method\n     * @name AppCenter#apps_delete\n     * @param {string} appName - The name of the application\n     * @param {string} ownerName - The name of the owner\n     */\n    apps_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new app and returns it to the caller\n     * @method\n     * @name AppCenter#apps_create\n     * @param {} app - The data for the app\n     */\n    apps_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['app'] !== undefined) {\n                body = parameters['app'];\n            }\n            if (parameters['app'] === undefined) {\n                reject(new Error('Missing required  parameter: app'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['orderBy'] !== undefined) {\n            queryParameters['$orderBy'] = this.convertParameterCollectionFormat(parameters['orderBy'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of apps\n     * @method\n     * @name AppCenter#apps_list\n     * @param {string} orderBy - The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.\n     */\n    apps_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['orderBy'] !== undefined) {\n                queryParameters['$orderBy'] = this.convertParameterCollectionFormat(parameters['orderBy'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    userApiTokens_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens/{api_token_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{api_token_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['apiTokenId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the user api_token object with the specific id\n     * @method\n     * @name AppCenter#userApiTokens_delete\n     * @param {string} apiTokenId - The unique ID (UUID) of the api token\n     */\n    userApiTokens_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens/{api_token_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{api_token_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['apiTokenId'], '').toString())}`);\n            if (parameters['apiTokenId'] === undefined) {\n                reject(new Error('Missing required  parameter: apiTokenId'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    userApiTokens_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns api tokens for the authenticated user\n     * @method\n     * @name AppCenter#userApiTokens_list\n     */\n    userApiTokens_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    userApiTokens_newURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new User API token\n     * @method\n     * @name AppCenter#userApiTokens_new\n     * @param {} description - Description of the token\n     */\n    userApiTokens_new(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['description'] !== undefined) {\n                body = parameters['description'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_listAdministeredURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/administeredOrgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list organizations in which the requesting user is an admin\n     * @method\n     * @name AppCenter#organizations_listAdministered\n     */\n    organizations_listAdministered(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/administeredOrgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportFeatureFlagURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export/featureFlags';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists feature flag data\n     * @method\n     * @name AppCenter#test_gdprExportFeatureFlag\n     */\n    test_gdprExportFeatureFlag(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export/featureFlags';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportAccountURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export/accounts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists account data\n     * @method\n     * @name AppCenter#test_gdprExportAccount\n     */\n    test_gdprExportAccount(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export/accounts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportAccountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists all the endpoints available for Test accounts data\n     * @method\n     * @name AppCenter#test_gdprExportAccounts\n     */\n    test_gdprExportAccounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n}\nexports.AppCenter = AppCenter;\nexports.default = AppCenter;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst app_center_1 = __importDefault(require(\"./generated/app-center\"));\nclass AppCenterWithAuth extends app_center_1.default {\n    constructor(apiToken, domain, logger) {\n        super(domain, logger);\n        if (apiToken) {\n            this.setRequestHeadersHandler(headers => ({ 'X-API-Token': apiToken, ...headers }));\n        }\n    }\n}\nexports.default = AppCenterWithAuth;\n","\"use strict\";\n\nvar rawAsap = require(\"./raw\");\nvar freeTasks = [];\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with\n * priority over IO events. An exception thrown in a task can be handled by\n * `process.on(\"uncaughtException\") or `domain.on(\"error\")`, but will otherwise\n * crash the process. If the error is handled, all subsequent tasks will\n * resume.\n *\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawTask.domain = process.domain;\n    rawAsap(rawTask);\n}\n\nfunction RawTask() {\n    this.task = null;\n    this.domain = null;\n}\n\nRawTask.prototype.call = function () {\n    if (this.domain) {\n        this.domain.enter();\n    }\n    var threw = true;\n    try {\n        this.task.call();\n        threw = false;\n        // If the task throws an exception (presumably) Node.js restores the\n        // domain stack for the next event.\n        if (this.domain) {\n            this.domain.exit();\n        }\n    } finally {\n        // We use try/finally and a threw flag to avoid messing up stack traces\n        // when we catch and release errors.\n        if (threw) {\n            // In Node.js, uncaught exceptions are considered fatal errors.\n            // Re-throw them to interrupt flushing!\n            // Ensure that flushing continues if an uncaught exception is\n            // suppressed listening process.on(\"uncaughtException\") or\n            // domain.on(\"error\").\n            rawAsap.requestFlush();\n        }\n        // If the task threw an error, we do not want to exit the domain here.\n        // Exiting the domain would prevent the domain from catching the error.\n        this.task = null;\n        this.domain = null;\n        freeTasks.push(this);\n    }\n};\n\n","\"use strict\";\n\nvar domain; // The domain module is executed on demand\nvar hasSetImmediate = typeof setImmediate === \"function\";\n\n// Use the fastest means possible to execute a task in its own turn, with\n// priority over other events including network IO events in Node.js.\n//\n// An exception thrown by a task will permanently interrupt the processing of\n// subsequent tasks. The higher level `asap` function ensures that if an\n// exception is thrown by a task, that the task queue will continue flushing as\n// soon as possible, but if you use `rawAsap` directly, you are responsible to\n// either ensure that no exceptions are thrown from your task, or to manually\n// call `rawAsap.requestFlush` if an exception is thrown.\nmodule.exports = rawAsap;\nfunction rawAsap(task) {\n    if (!queue.length) {\n        requestFlush();\n        flushing = true;\n    }\n    // Avoids a function call\n    queue[queue.length] = task;\n}\n\nvar queue = [];\n// Once a flush has been requested, no further calls to `requestFlush` are\n// necessary until the next `flush` completes.\nvar flushing = false;\n// The position of the next task to execute in the task queue. This is\n// preserved between calls to `flush` so that it can be resumed if\n// a task throws an exception.\nvar index = 0;\n// If a task schedules additional tasks recursively, the task queue can grow\n// unbounded. To prevent memory excaustion, the task queue will periodically\n// truncate already-completed tasks.\nvar capacity = 1024;\n\n// The flush function processes all tasks that have been scheduled with\n// `rawAsap` unless and until one of those tasks throws an exception.\n// If a task throws an exception, `flush` ensures that its state will remain\n// consistent and will resume where it left off when called again.\n// However, `flush` does not make any arrangements to be called again if an\n// exception is thrown.\nfunction flush() {\n    while (index < queue.length) {\n        var currentIndex = index;\n        // Advance the index before calling the task. This ensures that we will\n        // begin flushing on the next task the task throws an error.\n        index = index + 1;\n        queue[currentIndex].call();\n        // Prevent leaking memory for long chains of recursive calls to `asap`.\n        // If we call `asap` within tasks scheduled by `asap`, the queue will\n        // grow, but to avoid an O(n) walk for every task we execute, we don't\n        // shift tasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 tasks off the queue.\n        if (index > capacity) {\n            // Manually shift all values starting at the index back to the\n            // beginning of the queue.\n            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n                queue[scan] = queue[scan + index];\n            }\n            queue.length -= index;\n            index = 0;\n        }\n    }\n    queue.length = 0;\n    index = 0;\n    flushing = false;\n}\n\nrawAsap.requestFlush = requestFlush;\nfunction requestFlush() {\n    // Ensure flushing is not bound to any domain.\n    // It is not sufficient to exit the domain, because domains exist on a stack.\n    // To execute code outside of any domain, the following dance is necessary.\n    var parentDomain = process.domain;\n    if (parentDomain) {\n        if (!domain) {\n            // Lazy execute the domain module.\n            // Only employed if the user elects to use domains.\n            domain = require(\"domain\");\n        }\n        domain.active = process.domain = null;\n    }\n\n    // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`\n    // cannot handle recursion.\n    // `requestFlush` will only be called recursively from `asap.js`, to resume\n    // flushing after an error is thrown into a domain.\n    // Conveniently, `setImmediate` was introduced in the same version\n    // `process.nextTick` started throwing recursion errors.\n    if (flushing && hasSetImmediate) {\n        setImmediate(flush);\n    } else {\n        process.nextTick(flush);\n    }\n\n    if (parentDomain) {\n        domain.active = process.domain = parentDomain;\n    }\n}\n","module.exports =\n{\n  parallel      : require('./parallel.js'),\n  serial        : require('./serial.js'),\n  serialOrdered : require('./serialOrdered.js')\n};\n","// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state)\n{\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key)\n{\n  if (typeof this.jobs[key] == 'function')\n  {\n    this.jobs[key]();\n  }\n}\n","var defer = require('./defer.js');\n\n// API\nmodule.exports = async;\n\n/**\n * Runs provided callback asynchronously\n * even if callback itself is not\n *\n * @param   {function} callback - callback to invoke\n * @returns {function} - augmented callback\n */\nfunction async(callback)\n{\n  var isAsync = false;\n\n  // check if async happened\n  defer(function() { isAsync = true; });\n\n  return function async_callback(err, result)\n  {\n    if (isAsync)\n    {\n      callback(err, result);\n    }\n    else\n    {\n      defer(function nextTick_callback()\n      {\n        callback(err, result);\n      });\n    }\n  };\n}\n","module.exports = defer;\n\n/**\n * Runs provided function on next iteration of the event loop\n *\n * @param {function} fn - function to run\n */\nfunction defer(fn)\n{\n  var nextTick = typeof setImmediate == 'function'\n    ? setImmediate\n    : (\n      typeof process == 'object' && typeof process.nextTick == 'function'\n      ? process.nextTick\n      : null\n    );\n\n  if (nextTick)\n  {\n    nextTick(fn);\n  }\n  else\n  {\n    setTimeout(fn, 0);\n  }\n}\n","var async = require('./async.js')\n  , abort = require('./abort.js')\n  ;\n\n// API\nmodule.exports = iterate;\n\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\nfunction iterate(list, iterator, state, callback)\n{\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n\n  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)\n  {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs))\n    {\n      return;\n    }\n\n    // clean up jobs\n    delete state.jobs[key];\n\n    if (error)\n    {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    }\n    else\n    {\n      state.results[key] = output;\n    }\n\n    // return salvaged results\n    callback(error, state.results);\n  });\n}\n\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\nfunction runJob(iterator, key, item, callback)\n{\n  var aborter;\n\n  // allow shortcut if iterator expects only two arguments\n  if (iterator.length == 2)\n  {\n    aborter = iterator(item, async(callback));\n  }\n  // otherwise go with full three arguments\n  else\n  {\n    aborter = iterator(item, key, async(callback));\n  }\n\n  return aborter;\n}\n","// API\nmodule.exports = state;\n\n/**\n * Creates initial state object\n * for iteration over list\n *\n * @param   {array|object} list - list to iterate over\n * @param   {function|null} sortMethod - function to use for keys sort,\n *                                     or `null` to keep them as is\n * @returns {object} - initial state object\n */\nfunction state(list, sortMethod)\n{\n  var isNamedList = !Array.isArray(list)\n    , initState =\n    {\n      index    : 0,\n      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,\n      jobs     : {},\n      results  : isNamedList ? {} : [],\n      size     : isNamedList ? Object.keys(list).length : list.length\n    }\n    ;\n\n  if (sortMethod)\n  {\n    // sort array keys based on it's values\n    // sort object's keys just on own merit\n    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)\n    {\n      return sortMethod(list[a], list[b]);\n    });\n  }\n\n  return initState;\n}\n","var abort = require('./abort.js')\n  , async = require('./async.js')\n  ;\n\n// API\nmodule.exports = terminator;\n\n/**\n * Terminates jobs in the attached state context\n *\n * @this  AsyncKitState#\n * @param {function} callback - final callback to invoke after termination\n */\nfunction terminator(callback)\n{\n  if (!Object.keys(this.jobs).length)\n  {\n    return;\n  }\n\n  // fast forward iteration index\n  this.index = this.size;\n\n  // abort jobs\n  abort(this);\n\n  // send back results we have so far\n  async(callback)(null, this.results);\n}\n","var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n","var serialOrdered = require('./serialOrdered.js');\n\n// Public API\nmodule.exports = serial;\n\n/**\n * Runs iterator over provided array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serial(list, iterator, callback)\n{\n  return serialOrdered(list, iterator, null, callback);\n}\n","var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = serialOrdered;\n// sorting helpers\nmodule.exports.ascending  = ascending;\nmodule.exports.descending = descending;\n\n/**\n * Runs iterator over provided sorted array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} sortMethod - custom sort function\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serialOrdered(list, iterator, sortMethod, callback)\n{\n  var state = initState(list, sortMethod);\n\n  iterate(list, iterator, state, function iteratorHandler(error, result)\n  {\n    if (error)\n    {\n      callback(error, result);\n      return;\n    }\n\n    state.index++;\n\n    // are we there yet?\n    if (state.index < (state['keyedList'] || list).length)\n    {\n      iterate(list, iterator, state, iteratorHandler);\n      return;\n    }\n\n    // done here\n    callback(null, state.results);\n  });\n\n  return terminator.bind(state, callback);\n}\n\n/*\n * -- Sort methods\n */\n\n/**\n * sort helper to sort array elements in ascending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction ascending(a, b)\n{\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * sort helper to sort array elements in descending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction descending(a, b)\n{\n  return -1 * ascending(a, b);\n}\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('./');\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n","'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = $reflectApply(bind, $call, arguments);\n\tif ($gOPD && $defineProperty) {\n\t\tvar desc = $gOPD(func, 'length');\n\t\tif (desc.configurable) {\n\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t$defineProperty(\n\t\t\t\tfunc,\n\t\t\t\t'length',\n\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t);\n\t\t}\n\t}\n\treturn func;\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n","var util = require('util');\nvar Stream = require('stream').Stream;\nvar DelayedStream = require('delayed-stream');\n\nmodule.exports = CombinedStream;\nfunction CombinedStream() {\n  this.writable = false;\n  this.readable = true;\n  this.dataSize = 0;\n  this.maxDataSize = 2 * 1024 * 1024;\n  this.pauseStreams = true;\n\n  this._released = false;\n  this._streams = [];\n  this._currentStream = null;\n  this._insideLoop = false;\n  this._pendingNext = false;\n}\nutil.inherits(CombinedStream, Stream);\n\nCombinedStream.create = function(options) {\n  var combinedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    combinedStream[option] = options[option];\n  }\n\n  return combinedStream;\n};\n\nCombinedStream.isStreamLike = function(stream) {\n  return (typeof stream !== 'function')\n    && (typeof stream !== 'string')\n    && (typeof stream !== 'boolean')\n    && (typeof stream !== 'number')\n    && (!Buffer.isBuffer(stream));\n};\n\nCombinedStream.prototype.append = function(stream) {\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n  if (isStreamLike) {\n    if (!(stream instanceof DelayedStream)) {\n      var newStream = DelayedStream.create(stream, {\n        maxDataSize: Infinity,\n        pauseStream: this.pauseStreams,\n      });\n      stream.on('data', this._checkDataSize.bind(this));\n      stream = newStream;\n    }\n\n    this._handleErrors(stream);\n\n    if (this.pauseStreams) {\n      stream.pause();\n    }\n  }\n\n  this._streams.push(stream);\n  return this;\n};\n\nCombinedStream.prototype.pipe = function(dest, options) {\n  Stream.prototype.pipe.call(this, dest, options);\n  this.resume();\n  return dest;\n};\n\nCombinedStream.prototype._getNext = function() {\n  this._currentStream = null;\n\n  if (this._insideLoop) {\n    this._pendingNext = true;\n    return; // defer call\n  }\n\n  this._insideLoop = true;\n  try {\n    do {\n      this._pendingNext = false;\n      this._realGetNext();\n    } while (this._pendingNext);\n  } finally {\n    this._insideLoop = false;\n  }\n};\n\nCombinedStream.prototype._realGetNext = function() {\n  var stream = this._streams.shift();\n\n\n  if (typeof stream == 'undefined') {\n    this.end();\n    return;\n  }\n\n  if (typeof stream !== 'function') {\n    this._pipeNext(stream);\n    return;\n  }\n\n  var getStream = stream;\n  getStream(function(stream) {\n    var isStreamLike = CombinedStream.isStreamLike(stream);\n    if (isStreamLike) {\n      stream.on('data', this._checkDataSize.bind(this));\n      this._handleErrors(stream);\n    }\n\n    this._pipeNext(stream);\n  }.bind(this));\n};\n\nCombinedStream.prototype._pipeNext = function(stream) {\n  this._currentStream = stream;\n\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    stream.on('end', this._getNext.bind(this));\n    stream.pipe(this, {end: false});\n    return;\n  }\n\n  var value = stream;\n  this.write(value);\n  this._getNext();\n};\n\nCombinedStream.prototype._handleErrors = function(stream) {\n  var self = this;\n  stream.on('error', function(err) {\n    self._emitError(err);\n  });\n};\n\nCombinedStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nCombinedStream.prototype.pause = function() {\n  if (!this.pauseStreams) {\n    return;\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\n  this.emit('pause');\n};\n\nCombinedStream.prototype.resume = function() {\n  if (!this._released) {\n    this._released = true;\n    this.writable = true;\n    this._getNext();\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\n  this.emit('resume');\n};\n\nCombinedStream.prototype.end = function() {\n  this._reset();\n  this.emit('end');\n};\n\nCombinedStream.prototype.destroy = function() {\n  this._reset();\n  this.emit('close');\n};\n\nCombinedStream.prototype._reset = function() {\n  this.writable = false;\n  this._streams = [];\n  this._currentStream = null;\n};\n\nCombinedStream.prototype._checkDataSize = function() {\n  this._updateDataSize();\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n  this._emitError(new Error(message));\n};\n\nCombinedStream.prototype._updateDataSize = function() {\n  this.dataSize = 0;\n\n  var self = this;\n  this._streams.forEach(function(stream) {\n    if (!stream.dataSize) {\n      return;\n    }\n\n    self.dataSize += stream.dataSize;\n  });\n\n  if (this._currentStream && this._currentStream.dataSize) {\n    this.dataSize += this._currentStream.dataSize;\n  }\n};\n\nCombinedStream.prototype._emitError = function(err) {\n  this._reset();\n  this.emit('error', err);\n};\n","/* jshint node: true */\n(function () {\n    \"use strict\";\n\n    function CookieAccessInfo(domain, path, secure, script) {\n        if (this instanceof CookieAccessInfo) {\n            this.domain = domain || undefined;\n            this.path = path || \"/\";\n            this.secure = !!secure;\n            this.script = !!script;\n            return this;\n        }\n        return new CookieAccessInfo(domain, path, secure, script);\n    }\n    CookieAccessInfo.All = Object.freeze(Object.create(null));\n    exports.CookieAccessInfo = CookieAccessInfo;\n\n    function Cookie(cookiestr, request_domain, request_path) {\n        if (cookiestr instanceof Cookie) {\n            return cookiestr;\n        }\n        if (this instanceof Cookie) {\n            this.name = null;\n            this.value = null;\n            this.expiration_date = Infinity;\n            this.path = String(request_path || \"/\");\n            this.explicit_path = false;\n            this.domain = request_domain || null;\n            this.explicit_domain = false;\n            this.secure = false; //how to define default?\n            this.noscript = false; //httponly\n            if (cookiestr) {\n                this.parse(cookiestr, request_domain, request_path);\n            }\n            return this;\n        }\n        return new Cookie(cookiestr, request_domain, request_path);\n    }\n    exports.Cookie = Cookie;\n\n    Cookie.prototype.toString = function toString() {\n        var str = [this.name + \"=\" + this.value];\n        if (this.expiration_date !== Infinity) {\n            str.push(\"expires=\" + (new Date(this.expiration_date)).toGMTString());\n        }\n        if (this.domain) {\n            str.push(\"domain=\" + this.domain);\n        }\n        if (this.path) {\n            str.push(\"path=\" + this.path);\n        }\n        if (this.secure) {\n            str.push(\"secure\");\n        }\n        if (this.noscript) {\n            str.push(\"httponly\");\n        }\n        return str.join(\"; \");\n    };\n\n    Cookie.prototype.toValueString = function toValueString() {\n        return this.name + \"=\" + this.value;\n    };\n\n    var cookie_str_splitter = /[:](?=\\s*[a-zA-Z0-9_\\-]+\\s*[=])/g;\n    Cookie.prototype.parse = function parse(str, request_domain, request_path) {\n        if (this instanceof Cookie) {\n            if ( str.length > 32768 ) {\n                console.warn(\"Cookie too long for parsing (>32768 characters)\");\n                return;\n            }\n    \n            var parts = str.split(\";\").filter(function (value) {\n                    return !!value;\n                });\n            var i;\n\n            var pair = parts[0].match(/([^=]+)=([\\s\\S]*)/);\n            if (!pair) {\n                console.warn(\"Invalid cookie header encountered. Header: '\"+str+\"'\");\n                return;\n            }\n\n            var key = pair[1];\n            var value = pair[2];\n            if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {\n                console.warn(\"Unable to extract values from cookie header. Cookie: '\"+str+\"'\");\n                return;\n            }\n\n            this.name = key;\n            this.value = value;\n\n            for (i = 1; i < parts.length; i += 1) {\n                pair = parts[i].match(/([^=]+)(?:=([\\s\\S]*))?/);\n                key = pair[1].trim().toLowerCase();\n                value = pair[2];\n                switch (key) {\n                case \"httponly\":\n                    this.noscript = true;\n                    break;\n                case \"expires\":\n                    this.expiration_date = value ?\n                            Number(Date.parse(value)) :\n                            Infinity;\n                    break;\n                case \"path\":\n                    this.path = value ?\n                            value.trim() :\n                            \"\";\n                    this.explicit_path = true;\n                    break;\n                case \"domain\":\n                    this.domain = value ?\n                            value.trim() :\n                            \"\";\n                    this.explicit_domain = !!this.domain;\n                    break;\n                case \"secure\":\n                    this.secure = true;\n                    break;\n                }\n            }\n\n            if (!this.explicit_path) {\n               this.path = request_path || \"/\";\n            }\n            if (!this.explicit_domain) {\n               this.domain = request_domain;\n            }\n\n            return this;\n        }\n        return new Cookie().parse(str, request_domain, request_path);\n    };\n\n    Cookie.prototype.matches = function matches(access_info) {\n        if (access_info === CookieAccessInfo.All) {\n          return true;\n        }\n        if (this.noscript && access_info.script ||\n                this.secure && !access_info.secure ||\n                !this.collidesWith(access_info)) {\n            return false;\n        }\n        return true;\n    };\n\n    Cookie.prototype.collidesWith = function collidesWith(access_info) {\n        if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {\n            return false;\n        }\n        if (this.path && access_info.path.indexOf(this.path) !== 0) {\n            return false;\n        }\n        if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {\n           return false;\n        }\n        var access_domain = access_info.domain && access_info.domain.replace(/^[\\.]/,'');\n        var cookie_domain = this.domain && this.domain.replace(/^[\\.]/,'');\n        if (cookie_domain === access_domain) {\n            return true;\n        }\n        if (cookie_domain) {\n            if (!this.explicit_domain) {\n                return false; // we already checked if the domains were exactly the same\n            }\n            var wildcard = access_domain.indexOf(cookie_domain);\n            if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {\n                return false;\n            }\n            return true;\n        }\n        return true;\n    };\n\n    function CookieJar() {\n        var cookies, cookies_list, collidable_cookie;\n        if (this instanceof CookieJar) {\n            cookies = Object.create(null); //name: [Cookie]\n\n            this.setCookie = function setCookie(cookie, request_domain, request_path) {\n                var remove, i;\n                cookie = new Cookie(cookie, request_domain, request_path);\n                //Delete the cookie if the set is past the current time\n                remove = cookie.expiration_date <= Date.now();\n                if (cookies[cookie.name] !== undefined) {\n                    cookies_list = cookies[cookie.name];\n                    for (i = 0; i < cookies_list.length; i += 1) {\n                        collidable_cookie = cookies_list[i];\n                        if (collidable_cookie.collidesWith(cookie)) {\n                            if (remove) {\n                                cookies_list.splice(i, 1);\n                                if (cookies_list.length === 0) {\n                                    delete cookies[cookie.name];\n                                }\n                                return false;\n                            }\n                            cookies_list[i] = cookie;\n                            return cookie;\n                        }\n                    }\n                    if (remove) {\n                        return false;\n                    }\n                    cookies_list.push(cookie);\n                    return cookie;\n                }\n                if (remove) {\n                    return false;\n                }\n                cookies[cookie.name] = [cookie];\n                return cookies[cookie.name];\n            };\n            //returns a cookie\n            this.getCookie = function getCookie(cookie_name, access_info) {\n                var cookie, i;\n                cookies_list = cookies[cookie_name];\n                if (!cookies_list) {\n                    return;\n                }\n                for (i = 0; i < cookies_list.length; i += 1) {\n                    cookie = cookies_list[i];\n                    if (cookie.expiration_date <= Date.now()) {\n                        if (cookies_list.length === 0) {\n                            delete cookies[cookie.name];\n                        }\n                        continue;\n                    }\n\n                    if (cookie.matches(access_info)) {\n                        return cookie;\n                    }\n                }\n            };\n            //returns a list of cookies\n            this.getCookies = function getCookies(access_info) {\n                var matches = [], cookie_name, cookie;\n                for (cookie_name in cookies) {\n                    cookie = this.getCookie(cookie_name, access_info);\n                    if (cookie) {\n                        matches.push(cookie);\n                    }\n                }\n                matches.toString = function toString() {\n                    return matches.join(\":\");\n                };\n                matches.toValueString = function toValueString() {\n                    return matches.map(function (c) {\n                        return c.toValueString();\n                    }).join('; ');\n                };\n                return matches;\n            };\n\n            return this;\n        }\n        return new CookieJar();\n    }\n    exports.CookieJar = CookieJar;\n\n    //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.\n    CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {\n        cookies = Array.isArray(cookies) ?\n                cookies :\n                cookies.split(cookie_str_splitter);\n        var successful = [],\n            i,\n            cookie;\n        cookies = cookies.map(function(item){\n            return new Cookie(item, request_domain, request_path);\n        });\n        for (i = 0; i < cookies.length; i += 1) {\n            cookie = cookies[i];\n            if (this.setCookie(cookie, request_domain, request_path)) {\n                successful.push(cookie);\n            }\n        }\n        return successful;\n    };\n}());\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n","/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n","var Stream = require('stream').Stream;\nvar util = require('util');\n\nmodule.exports = DelayedStream;\nfunction DelayedStream() {\n  this.source = null;\n  this.dataSize = 0;\n  this.maxDataSize = 1024 * 1024;\n  this.pauseStream = true;\n\n  this._maxDataSizeExceeded = false;\n  this._released = false;\n  this._bufferedEvents = [];\n}\nutil.inherits(DelayedStream, Stream);\n\nDelayedStream.create = function(source, options) {\n  var delayedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    delayedStream[option] = options[option];\n  }\n\n  delayedStream.source = source;\n\n  var realEmit = source.emit;\n  source.emit = function() {\n    delayedStream._handleEmit(arguments);\n    return realEmit.apply(source, arguments);\n  };\n\n  source.on('error', function() {});\n  if (delayedStream.pauseStream) {\n    source.pause();\n  }\n\n  return delayedStream;\n};\n\nObject.defineProperty(DelayedStream.prototype, 'readable', {\n  configurable: true,\n  enumerable: true,\n  get: function() {\n    return this.source.readable;\n  }\n});\n\nDelayedStream.prototype.setEncoding = function() {\n  return this.source.setEncoding.apply(this.source, arguments);\n};\n\nDelayedStream.prototype.resume = function() {\n  if (!this._released) {\n    this.release();\n  }\n\n  this.source.resume();\n};\n\nDelayedStream.prototype.pause = function() {\n  this.source.pause();\n};\n\nDelayedStream.prototype.release = function() {\n  this._released = true;\n\n  this._bufferedEvents.forEach(function(args) {\n    this.emit.apply(this, args);\n  }.bind(this));\n  this._bufferedEvents = [];\n};\n\nDelayedStream.prototype.pipe = function() {\n  var r = Stream.prototype.pipe.apply(this, arguments);\n  this.resume();\n  return r;\n};\n\nDelayedStream.prototype._handleEmit = function(args) {\n  if (this._released) {\n    this.emit.apply(this, args);\n    return;\n  }\n\n  if (args[0] === 'data') {\n    this.dataSize += args[1].length;\n    this._checkIfMaxDataSizeExceeded();\n  }\n\n  this._bufferedEvents.push(args);\n};\n\nDelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {\n  if (this._maxDataSizeExceeded) {\n    return;\n  }\n\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  this._maxDataSizeExceeded = true;\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n  this.emit('error', new Error(message));\n};\n","var wrappy = require('wrappy')\nmodule.exports = wrappy(dezalgo)\n\nvar asap = require('asap')\n\nfunction dezalgo (cb) {\n  var sync = true\n  asap(function () {\n    sync = false\n  })\n\n  return function zalgoSafe() {\n    var args = arguments\n    var me = this\n    if (sync)\n      asap(function() {\n        cb.apply(me, args)\n      })\n    else\n      cb.apply(me, args)\n  }\n}\n","module.exports = stringify\nstringify.default = stringify\nstringify.stable = deterministicStringify\nstringify.stableStringify = deterministicStringify\n\nvar LIMIT_REPLACE_NODE = '[...]'\nvar CIRCULAR_REPLACE_NODE = '[Circular]'\n\nvar arr = []\nvar replacerStack = []\n\nfunction defaultOptions () {\n  return {\n    depthLimit: Number.MAX_SAFE_INTEGER,\n    edgesLimit: Number.MAX_SAFE_INTEGER\n  }\n}\n\n// Regular stringify\nfunction stringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  decirc(obj, '', 0, [], undefined, 0, options)\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(obj, replacer, spacer)\n    } else {\n      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction setReplace (replace, val, k, parent) {\n  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n  if (propertyDescriptor.get !== undefined) {\n    if (propertyDescriptor.configurable) {\n      Object.defineProperty(parent, k, { value: replace })\n      arr.push([parent, k, val, propertyDescriptor])\n    } else {\n      replacerStack.push([val, k, replace])\n    }\n  } else {\n    parent[k] = replace\n    arr.push([parent, k, val])\n  }\n}\n\nfunction decirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      var keys = Object.keys(val)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        decirc(val[key], key, i, stack, val, depth, options)\n      }\n    }\n    stack.pop()\n  }\n}\n\n// Stable-stringify\nfunction compareFunction (a, b) {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\nfunction deterministicStringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(tmp, replacer, spacer)\n    } else {\n      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    // Ensure that we restore the object as it was.\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction deterministicDecirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n    try {\n      if (typeof val.toJSON === 'function') {\n        return\n      }\n    } catch (_) {\n      return\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {}\n      var keys = Object.keys(val).sort(compareFunction)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        deterministicDecirc(val[key], key, i, stack, val, depth, options)\n        tmp[key] = val[key]\n      }\n      if (typeof parent !== 'undefined') {\n        arr.push([parent, k, val])\n        parent[k] = tmp\n      } else {\n        return tmp\n      }\n    }\n    stack.pop()\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues (replacer) {\n  replacer =\n    typeof replacer !== 'undefined'\n      ? replacer\n      : function (k, v) {\n        return v\n      }\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i]\n        if (part[1] === key && part[0] === val) {\n          val = part[2]\n          replacerStack.splice(i, 1)\n          break\n        }\n      }\n    }\n    return replacer.call(this, key, val)\n  }\n}\n",null,"/* eslint-disable no-plusplus */\n\nconst missingPlugin = 1000;\nconst pluginFunction = 1001;\nconst aborted = 1002;\nconst noParser = 1003;\nconst uninitializedParser = 1004;\nconst filenameNotString = 1005;\nconst maxFieldsSizeExceeded = 1006;\nconst maxFieldsExceeded = 1007;\nconst smallerThanMinFileSize = 1008;\nconst biggerThanMaxFileSize = 1009;\nconst noEmptyFiles = 1010;\nconst missingContentType = 1011;\nconst malformedMultipart = 1012;\nconst missingMultipartBoundary = 1013;\nconst unknownTransferEncoding = 1014;\n\nconst FormidableError = class extends Error {\n  constructor(message, internalCode, httpCode = 500) {\n    super(message);\n    this.code = internalCode;\n    this.httpCode = httpCode;\n  }\n};\n\nmodule.exports = {\n  missingPlugin,\n  pluginFunction,\n  aborted,\n  noParser,\n  uninitializedParser,\n  filenameNotString,\n  maxFieldsSizeExceeded,\n  maxFieldsExceeded,\n  smallerThanMinFileSize,\n  biggerThanMaxFileSize,\n  noEmptyFiles,\n  missingContentType,\n  malformedMultipart,\n  missingMultipartBoundary,\n  unknownTransferEncoding,\n\n  FormidableError,\n};\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst fs = require('fs');\nconst crypto = require('crypto');\nconst { EventEmitter } = require('events');\n\nclass PersistentFile extends EventEmitter {\n  constructor({ filepath, newFilename, originalFilename, mimetype, hashAlgorithm }) {\n    super();\n\n    this.lastModifiedDate = null;\n    Object.assign(this, { filepath, newFilename, originalFilename, mimetype, hashAlgorithm });\n\n    this.size = 0;\n    this._writeStream = null;\n\n    if (typeof this.hashAlgorithm === 'string') {\n      this.hash = crypto.createHash(this.hashAlgorithm);\n    } else {\n      this.hash = null;\n    }\n  }\n\n  open() {\n    this._writeStream = new fs.WriteStream(this.filepath);\n    this._writeStream.on('error', (err) => {\n      this.emit('error', err);\n    });\n  }\n\n  toJSON() {\n    const json = {\n      size: this.size,\n      filepath: this.filepath,\n      newFilename: this.newFilename,\n      mimetype: this.mimetype,\n      mtime: this.lastModifiedDate,\n      length: this.length,\n      originalFilename: this.originalFilename,\n    };\n    if (this.hash && this.hash !== '') {\n      json.hash = this.hash;\n    }\n    return json;\n  }\n\n  toString() {\n    return `PersistentFile: ${this.newFilename}, Original: ${this.originalFilename}, Path: ${this.filepath}`;\n  }\n\n  write(buffer, cb) {\n    if (this.hash) {\n      this.hash.update(buffer);\n    }\n\n    if (this._writeStream.closed) {\n      cb();\n      return;\n    }\n\n    this._writeStream.write(buffer, () => {\n      this.lastModifiedDate = new Date();\n      this.size += buffer.length;\n      this.emit('progress', this.size);\n      cb();\n    });\n  }\n\n  end(cb) {\n    if (this.hash) {\n      this.hash = this.hash.digest('hex');\n    }\n    this._writeStream.end(() => {\n      this.emit('end');\n      cb();\n    });\n  }\n\n  destroy() {\n    this._writeStream.destroy();\n    fs.unlink(this.filepath, () => {});\n  }\n}\n\nmodule.exports = PersistentFile;\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst crypto = require('crypto');\nconst { EventEmitter } = require('events');\n\nclass VolatileFile extends EventEmitter {\n  constructor({ filepath, newFilename, originalFilename, mimetype, hashAlgorithm, createFileWriteStream }) {\n    super();\n\n    this.lastModifiedDate = null;\n    Object.assign(this, { filepath, newFilename, originalFilename, mimetype, hashAlgorithm, createFileWriteStream });\n\n    this.size = 0;\n    this._writeStream = null;\n\n    if (typeof this.hashAlgorithm === 'string') {\n      this.hash = crypto.createHash(this.hashAlgorithm);\n    } else {\n      this.hash = null;\n    }\n  }\n\n  open() {\n    this._writeStream = this.createFileWriteStream(this);\n    this._writeStream.on('error', (err) => {\n      this.emit('error', err);\n    });\n  }\n\n  destroy() {\n    this._writeStream.destroy();\n  }\n\n  toJSON() {\n    const json = {\n      size: this.size,\n      newFilename: this.newFilename,\n      length: this.length,\n      originalFilename: this.originalFilename,\n      mimetype: this.mimetype,\n    };\n    if (this.hash && this.hash !== '') {\n      json.hash = this.hash;\n    }\n    return json;\n  }\n\n  toString() {\n    return `VolatileFile: ${this.originalFilename}`;\n  }\n\n  write(buffer, cb) {\n    if (this.hash) {\n      this.hash.update(buffer);\n    }\n\n    if (this._writeStream.closed || this._writeStream.destroyed) {\n      cb();\n      return;\n    }\n\n    this._writeStream.write(buffer, () => {\n      this.size += buffer.length;\n      this.emit('progress', this.size);\n      cb();\n    });\n  }\n\n  end(cb) {\n    if (this.hash) {\n      this.hash = this.hash.digest('hex');\n    }\n    this._writeStream.end(() => {\n      this.emit('end');\n      cb();\n    });\n  }\n}\n\nmodule.exports = VolatileFile;\n","'use strict';\n\nconst PersistentFile = require('./PersistentFile');\nconst VolatileFile = require('./VolatileFile');\nconst Formidable = require('./Formidable');\nconst FormidableError = require('./FormidableError');\n\nconst plugins = require('./plugins/index');\nconst parsers = require('./parsers/index');\n\n// make it available without requiring the `new` keyword\n// if you want it access `const formidable.IncomingForm` as v1\nconst formidable = (...args) => new Formidable(...args);\n\nmodule.exports = Object.assign(formidable, {\n  errors: FormidableError,\n  File: PersistentFile,\n  PersistentFile,\n  VolatileFile,\n  Formidable,\n  formidable,\n\n  // alias\n  IncomingForm: Formidable,\n\n  // parsers\n  ...parsers,\n  parsers,\n\n  // misc\n  defaultOptions: Formidable.DEFAULT_OPTIONS,\n  enabledPlugins: Formidable.DEFAULT_OPTIONS.enabledPlugins,\n\n  // plugins\n  plugins: {\n    ...plugins,\n  },\n});\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Transform } = require('stream');\n\nclass DummyParser extends Transform {\n  constructor(incomingForm, options = {}) {\n    super();\n    this.globalOptions = { ...options };\n    this.incomingForm = incomingForm;\n  }\n\n  _flush(callback) {\n    this.incomingForm.ended = true;\n    this.incomingForm._maybeEnd();\n    callback();\n  }\n}\n\nmodule.exports = DummyParser;\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Transform } = require('stream');\n\nclass JSONParser extends Transform {\n  constructor(options = {}) {\n    super({ readableObjectMode: true });\n    this.chunks = [];\n    this.globalOptions = { ...options };\n  }\n\n  _transform(chunk, encoding, callback) {\n    this.chunks.push(String(chunk)); // todo consider using a string decoder\n    callback();\n  }\n\n  _flush(callback) {\n    try {\n      const fields = JSON.parse(this.chunks.join(''));\n      Object.keys(fields).forEach((key) => {\n        const value = fields[key];\n        this.push({ key, value });\n      });\n    } catch (e) {\n      callback(e);\n      return;\n    }\n    this.chunks = null;\n    callback();\n  }\n}\n\nmodule.exports = JSONParser;\n","/* eslint-disable no-fallthrough */\n/* eslint-disable no-bitwise */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Transform } = require('stream');\nconst errors = require('../FormidableError.js');\n\nconst { FormidableError } = errors;\n\nlet s = 0;\nconst STATE = {\n  PARSER_UNINITIALIZED: s++,\n  START: s++,\n  START_BOUNDARY: s++,\n  HEADER_FIELD_START: s++,\n  HEADER_FIELD: s++,\n  HEADER_VALUE_START: s++,\n  HEADER_VALUE: s++,\n  HEADER_VALUE_ALMOST_DONE: s++,\n  HEADERS_ALMOST_DONE: s++,\n  PART_DATA_START: s++,\n  PART_DATA: s++,\n  PART_END: s++,\n  END: s++,\n};\n\nlet f = 1;\nconst FBOUNDARY = { PART_BOUNDARY: f, LAST_BOUNDARY: (f *= 2) };\n\nconst LF = 10;\nconst CR = 13;\nconst SPACE = 32;\nconst HYPHEN = 45;\nconst COLON = 58;\nconst A = 97;\nconst Z = 122;\n\nfunction lower(c) {\n  return c | 0x20;\n}\n\nexports.STATES = {};\n\nObject.keys(STATE).forEach((stateName) => {\n  exports.STATES[stateName] = STATE[stateName];\n});\n\nclass MultipartParser extends Transform {\n  constructor(options = {}) {\n    super({ readableObjectMode: true });\n    this.boundary = null;\n    this.boundaryChars = null;\n    this.lookbehind = null;\n    this.bufferLength = 0;\n    this.state = STATE.PARSER_UNINITIALIZED;\n\n    this.globalOptions = { ...options };\n    this.index = null;\n    this.flags = 0;\n  }\n\n  _flush(done) {\n    if (\n      (this.state === STATE.HEADER_FIELD_START && this.index === 0) ||\n      (this.state === STATE.PART_DATA && this.index === this.boundary.length)\n    ) {\n      this._handleCallback('partEnd');\n      this._handleCallback('end');\n      done();\n    } else if (this.state !== STATE.END) {\n      done(\n        new FormidableError(\n          `MultipartParser.end(): stream ended unexpectedly: ${this.explain()}`,\n          errors.malformedMultipart,\n          400,\n        ),\n      );\n    }\n  }\n\n  initWithBoundary(str) {\n    this.boundary = Buffer.from(`\\r\\n--${str}`);\n    this.lookbehind = Buffer.alloc(this.boundary.length + 8);\n    this.state = STATE.START;\n    this.boundaryChars = {};\n\n    for (let i = 0; i < this.boundary.length; i++) {\n      this.boundaryChars[this.boundary[i]] = true;\n    }\n  }\n\n  // eslint-disable-next-line max-params\n  _handleCallback(name, buf, start, end) {\n    if (start !== undefined && start === end) {\n      return;\n    }\n    this.push({ name, buffer: buf, start, end });\n  }\n\n  // eslint-disable-next-line max-statements\n  _transform(buffer, _, done) {\n    let i = 0;\n    let prevIndex = this.index;\n    let { index, state, flags } = this;\n    const { lookbehind, boundary, boundaryChars } = this;\n    const boundaryLength = boundary.length;\n    const boundaryEnd = boundaryLength - 1;\n    this.bufferLength = buffer.length;\n    let c = null;\n    let cl = null;\n\n    const setMark = (name, idx) => {\n      this[`${name}Mark`] = typeof idx === 'number' ? idx : i;\n    };\n\n    const clearMarkSymbol = (name) => {\n      delete this[`${name}Mark`];\n    };\n\n    const dataCallback = (name, shouldClear) => {\n      const markSymbol = `${name}Mark`;\n      if (!(markSymbol in this)) {\n        return;\n      }\n\n      if (!shouldClear) {\n        this._handleCallback(name, buffer, this[markSymbol], buffer.length);\n        setMark(name, 0);\n      } else {\n        this._handleCallback(name, buffer, this[markSymbol], i);\n        clearMarkSymbol(name);\n      }\n    };\n\n    for (i = 0; i < this.bufferLength; i++) {\n      c = buffer[i];\n      switch (state) {\n        case STATE.PARSER_UNINITIALIZED:\n          return i;\n        case STATE.START:\n          index = 0;\n          state = STATE.START_BOUNDARY;\n        case STATE.START_BOUNDARY:\n          if (index === boundary.length - 2) {\n            if (c === HYPHEN) {\n              flags |= FBOUNDARY.LAST_BOUNDARY;\n            } else if (c !== CR) {\n              return i;\n            }\n            index++;\n            break;\n          } else if (index - 1 === boundary.length - 2) {\n            if (flags & FBOUNDARY.LAST_BOUNDARY && c === HYPHEN) {\n              this._handleCallback('end');\n              state = STATE.END;\n              flags = 0;\n            } else if (!(flags & FBOUNDARY.LAST_BOUNDARY) && c === LF) {\n              index = 0;\n              this._handleCallback('partBegin');\n              state = STATE.HEADER_FIELD_START;\n            } else {\n              return i;\n            }\n            break;\n          }\n\n          if (c !== boundary[index + 2]) {\n            index = -2;\n          }\n          if (c === boundary[index + 2]) {\n            index++;\n          }\n          break;\n        case STATE.HEADER_FIELD_START:\n          state = STATE.HEADER_FIELD;\n          setMark('headerField');\n          index = 0;\n        case STATE.HEADER_FIELD:\n          if (c === CR) {\n            clearMarkSymbol('headerField');\n            state = STATE.HEADERS_ALMOST_DONE;\n            break;\n          }\n\n          index++;\n          if (c === HYPHEN) {\n            break;\n          }\n\n          if (c === COLON) {\n            if (index === 1) {\n              // empty header field\n              return i;\n            }\n            dataCallback('headerField', true);\n            state = STATE.HEADER_VALUE_START;\n            break;\n          }\n\n          cl = lower(c);\n          if (cl < A || cl > Z) {\n            return i;\n          }\n          break;\n        case STATE.HEADER_VALUE_START:\n          if (c === SPACE) {\n            break;\n          }\n\n          setMark('headerValue');\n          state = STATE.HEADER_VALUE;\n        case STATE.HEADER_VALUE:\n          if (c === CR) {\n            dataCallback('headerValue', true);\n            this._handleCallback('headerEnd');\n            state = STATE.HEADER_VALUE_ALMOST_DONE;\n          }\n          break;\n        case STATE.HEADER_VALUE_ALMOST_DONE:\n          if (c !== LF) {\n            return i;\n          }\n          state = STATE.HEADER_FIELD_START;\n          break;\n        case STATE.HEADERS_ALMOST_DONE:\n          if (c !== LF) {\n            return i;\n          }\n\n          this._handleCallback('headersEnd');\n          state = STATE.PART_DATA_START;\n          break;\n        case STATE.PART_DATA_START:\n          state = STATE.PART_DATA;\n          setMark('partData');\n        case STATE.PART_DATA:\n          prevIndex = index;\n\n          if (index === 0) {\n            // boyer-moore derrived algorithm to safely skip non-boundary data\n            i += boundaryEnd;\n            while (i < this.bufferLength && !(buffer[i] in boundaryChars)) {\n              i += boundaryLength;\n            }\n            i -= boundaryEnd;\n            c = buffer[i];\n          }\n\n          if (index < boundary.length) {\n            if (boundary[index] === c) {\n              if (index === 0) {\n                dataCallback('partData', true);\n              }\n              index++;\n            } else {\n              index = 0;\n            }\n          } else if (index === boundary.length) {\n            index++;\n            if (c === CR) {\n              // CR = part boundary\n              flags |= FBOUNDARY.PART_BOUNDARY;\n            } else if (c === HYPHEN) {\n              // HYPHEN = end boundary\n              flags |= FBOUNDARY.LAST_BOUNDARY;\n            } else {\n              index = 0;\n            }\n          } else if (index - 1 === boundary.length) {\n            if (flags & FBOUNDARY.PART_BOUNDARY) {\n              index = 0;\n              if (c === LF) {\n                // unset the PART_BOUNDARY flag\n                flags &= ~FBOUNDARY.PART_BOUNDARY;\n                this._handleCallback('partEnd');\n                this._handleCallback('partBegin');\n                state = STATE.HEADER_FIELD_START;\n                break;\n              }\n            } else if (flags & FBOUNDARY.LAST_BOUNDARY) {\n              if (c === HYPHEN) {\n                this._handleCallback('partEnd');\n                this._handleCallback('end');\n                state = STATE.END;\n                flags = 0;\n              } else {\n                index = 0;\n              }\n            } else {\n              index = 0;\n            }\n          }\n\n          if (index > 0) {\n            // when matching a possible boundary, keep a lookbehind reference\n            // in case it turns out to be a false lead\n            lookbehind[index - 1] = c;\n          } else if (prevIndex > 0) {\n            // if our boundary turned out to be rubbish, the captured lookbehind\n            // belongs to partData\n            this._handleCallback('partData', lookbehind, 0, prevIndex);\n            prevIndex = 0;\n            setMark('partData');\n\n            // reconsider the current character even so it interrupted the sequence\n            // it could be the beginning of a new sequence\n            i--;\n          }\n\n          break;\n        case STATE.END:\n          break;\n        default:\n          return i;\n      }\n    }\n\n    dataCallback('headerField');\n    dataCallback('headerValue');\n    dataCallback('partData');\n\n    this.index = index;\n    this.state = state;\n    this.flags = flags;\n\n    done();\n    return this.bufferLength;\n  }\n\n  explain() {\n    return `state = ${MultipartParser.stateToString(this.state)}`;\n  }\n}\n\n// eslint-disable-next-line consistent-return\nMultipartParser.stateToString = (stateNumber) => {\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const stateName in STATE) {\n    const number = STATE[stateName];\n    if (number === stateNumber) return stateName;\n  }\n};\n\nmodule.exports = Object.assign(MultipartParser, { STATES: exports.STATES });\n","'use strict';\n\nconst { PassThrough } = require('stream');\n\nclass OctetStreamParser extends PassThrough {\n  constructor(options = {}) {\n    super();\n    this.globalOptions = { ...options };\n  }\n}\n\nmodule.exports = OctetStreamParser;\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Transform } = require('stream');\nconst querystring = require('querystring');\n\n// This is a buffering parser, not quite as nice as the multipart one.\n// If I find time I'll rewrite this to be fully streaming as well\nclass QuerystringParser extends Transform {\n  constructor(options = {}) {\n    super({ readableObjectMode: true });\n    this.globalOptions = { ...options };\n    this.buffer = '';\n    this.bufferLength = 0;\n  }\n\n  _transform(buffer, encoding, callback) {\n    this.buffer += buffer.toString('ascii');\n    this.bufferLength = this.buffer.length;\n    callback();\n  }\n\n  _flush(callback) {\n    const fields = querystring.parse(this.buffer, '&', '=');\n    // eslint-disable-next-line no-restricted-syntax, guard-for-in\n    for (const key in fields) {\n      this.push({\n        key,\n        value: fields[key],\n      });\n    }\n    this.buffer = '';\n    callback();\n  }\n}\n\nmodule.exports = QuerystringParser;\n","'use strict';\n\nconst JSONParser = require('./JSON');\nconst DummyParser = require('./Dummy');\nconst MultipartParser = require('./Multipart');\nconst OctetStreamParser = require('./OctetStream');\nconst QueryStringParser = require('./Querystring');\n\nObject.assign(exports, {\n  JSONParser,\n  DummyParser,\n  MultipartParser,\n  OctetStreamParser,\n  OctetstreamParser: OctetStreamParser,\n  QueryStringParser,\n  QuerystringParser: QueryStringParser,\n});\n","'use strict';\n\nconst octetstream = require('./octetstream');\nconst querystring = require('./querystring');\nconst multipart = require('./multipart');\nconst json = require('./json');\n\nObject.assign(exports, {\n  octetstream,\n  querystring,\n  multipart,\n  json,\n});\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst JSONParser = require('../parsers/JSON');\n\n// the `options` is also available through the `this.options` / `formidable.options`\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/json/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction init(_self, _opts) {\n  this.type = 'json';\n\n  const parser = new JSONParser(this.options);\n\n  parser.on('data', ({ key, value }) => {\n    this.emit('field', key, value);\n  });\n\n  parser.once('end', () => {\n    this.ended = true;\n    this._maybeEnd();\n  });\n\n  this._parser = parser;\n}\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Stream } = require('stream');\nconst MultipartParser = require('../parsers/Multipart');\nconst errors = require('../FormidableError.js');\n\nconst { FormidableError } = errors;\n\n// the `options` is also available through the `options` / `formidable.options`\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  // NOTE: we (currently) support both multipart/form-data and multipart/related\n  const multipart = /multipart/i.test(self.headers['content-type']);\n\n  if (multipart) {\n    const m = self.headers['content-type'].match(\n      /boundary=(?:\"([^\"]+)\"|([^;]+))/i,\n    );\n    if (m) {\n      const initMultipart = createInitMultipart(m[1] || m[2]);\n      initMultipart.call(self, self, options); // lgtm [js/superfluous-trailing-arguments]\n    } else {\n      const err = new FormidableError(\n        'bad content-type header, no multipart boundary',\n        errors.missingMultipartBoundary,\n        400,\n      );\n      self._error(err);\n    }\n  }\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction createInitMultipart(boundary) {\n  return function initMultipart() {\n    this.type = 'multipart';\n\n    const parser = new MultipartParser(this.options);\n    let headerField;\n    let headerValue;\n    let part;\n\n    parser.initWithBoundary(boundary);\n\n    // eslint-disable-next-line max-statements, consistent-return\n    parser.on('data', ({ name, buffer, start, end }) => {\n      if (name === 'partBegin') {\n        part = new Stream();\n        part.readable = true;\n        part.headers = {};\n        part.name = null;\n        part.originalFilename = null;\n        part.mimetype = null;\n\n        part.transferEncoding = this.options.encoding;\n        part.transferBuffer = '';\n\n        headerField = '';\n        headerValue = '';\n      } else if (name === 'headerField') {\n        headerField += buffer.toString(this.options.encoding, start, end);\n      } else if (name === 'headerValue') {\n        headerValue += buffer.toString(this.options.encoding, start, end);\n      } else if (name === 'headerEnd') {\n        headerField = headerField.toLowerCase();\n        part.headers[headerField] = headerValue;\n\n        // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n        const m = headerValue.match(\n          // eslint-disable-next-line no-useless-escape\n          /\\bname=(\"([^\"]*)\"|([^\\(\\)<>@,;:\\\\\"\\/\\[\\]\\?=\\{\\}\\s\\t/]+))/i,\n        );\n        if (headerField === 'content-disposition') {\n          if (m) {\n            part.name = m[2] || m[3] || '';\n          }\n\n          part.originalFilename = this._getFileName(headerValue);\n        } else if (headerField === 'content-type') {\n          part.mimetype = headerValue;\n        } else if (headerField === 'content-transfer-encoding') {\n          part.transferEncoding = headerValue.toLowerCase();\n        }\n\n        headerField = '';\n        headerValue = '';\n      } else if (name === 'headersEnd') {\n        switch (part.transferEncoding) {\n          case 'binary':\n          case '7bit':\n          case '8bit':\n          case 'utf-8': {\n            const dataPropagation = (ctx) => {\n              if (ctx.name === 'partData') {\n                part.emit('data', ctx.buffer.slice(ctx.start, ctx.end));\n              }\n            };\n            const dataStopPropagation = (ctx) => {\n              if (ctx.name === 'partEnd') {\n                part.emit('end');\n                parser.off('data', dataPropagation);\n                parser.off('data', dataStopPropagation);\n              }\n            };\n            parser.on('data', dataPropagation);\n            parser.on('data', dataStopPropagation);\n            break;\n          }\n          case 'base64': {\n            const dataPropagation = (ctx) => {\n              if (ctx.name === 'partData') {\n                part.transferBuffer += ctx.buffer\n                  .slice(ctx.start, ctx.end)\n                  .toString('ascii');\n\n                /*\n                  four bytes (chars) in base64 converts to three bytes in binary\n                  encoding. So we should always work with a number of bytes that\n                  can be divided by 4, it will result in a number of buytes that\n                  can be divided vy 3.\n                  */\n                const offset = parseInt(part.transferBuffer.length / 4, 10) * 4;\n                part.emit(\n                  'data',\n                  Buffer.from(\n                    part.transferBuffer.substring(0, offset),\n                    'base64',\n                  ),\n                );\n                part.transferBuffer = part.transferBuffer.substring(offset);\n              }\n            };\n            const dataStopPropagation = (ctx) => {\n              if (ctx.name === 'partEnd') {\n                part.emit('data', Buffer.from(part.transferBuffer, 'base64'));\n                part.emit('end');\n                parser.off('data', dataPropagation);\n                parser.off('data', dataStopPropagation);\n              }\n            };\n            parser.on('data', dataPropagation);\n            parser.on('data', dataStopPropagation);\n            break;\n          }\n          default:\n            return this._error(\n              new FormidableError(\n                'unknown transfer-encoding',\n                errors.unknownTransferEncoding,\n                501,\n              ),\n            );\n        }\n\n        this.onPart(part);\n      } else if (name === 'end') {\n        this.ended = true;\n        this._maybeEnd();\n      }\n    });\n\n    this._parser = parser;\n  };\n}\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst OctetStreamParser = require('../parsers/OctetStream');\n\n// the `options` is also available through the `options` / `formidable.options`\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/octet-stream/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n\n  return self;\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction init(_self, _opts) {\n  this.type = 'octet-stream';\n  const originalFilename = this.headers['x-file-name'];\n  const mimetype = this.headers['content-type'];\n\n  const thisPart = {\n    originalFilename,\n    mimetype,\n  };\n  const newFilename = this._getNewName(thisPart);\n  const filepath = this._joinDirectoryName(newFilename);\n  const file = this._newFile({\n    newFilename,\n    filepath,\n    originalFilename,\n    mimetype,\n  });\n\n  this.emit('fileBegin', originalFilename, file);\n  file.open();\n  this.openedFiles.push(file);\n  this._flushing += 1;\n\n  this._parser = new OctetStreamParser(this.options);\n\n  // Keep track of writes that haven't finished so we don't emit the file before it's done being written\n  let outstandingWrites = 0;\n\n  this._parser.on('data', (buffer) => {\n    this.pause();\n    outstandingWrites += 1;\n\n    file.write(buffer, () => {\n      outstandingWrites -= 1;\n      this.resume();\n\n      if (this.ended) {\n        this._parser.emit('doneWritingFile');\n      }\n    });\n  });\n\n  this._parser.on('end', () => {\n    this._flushing -= 1;\n    this.ended = true;\n\n    const done = () => {\n      file.end(() => {\n        this.emit('file', 'file', file);\n        this._maybeEnd();\n      });\n    };\n\n    if (outstandingWrites === 0) {\n      done();\n    } else {\n      this._parser.once('doneWritingFile', done);\n    }\n  });\n\n  return this;\n}\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst QuerystringParser = require('../parsers/Querystring');\n\n// the `options` is also available through the `this.options` / `formidable.options`\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/urlencoded/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n\n  return self;\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction init(_self, _opts) {\n  this.type = 'urlencoded';\n\n  const parser = new QuerystringParser(this.options);\n\n  parser.on('data', ({ key, value }) => {\n    this.emit('field', key, value);\n  });\n\n  parser.once('end', () => {\n    this.ended = true;\n    this._maybeEnd();\n  });\n\n  this._parser = parser;\n\n  return this;\n}\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\n\nvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('has');\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\nvar $exec = bind.call(Function.call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","'use strict';\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nvar bind = require('function-bind');\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n","var IDX=256, HEX=[];\nwhile (IDX--) HEX[IDX] = (IDX + 256).toString(16).substring(1);\n\nmodule.exports = function (len) {\n\tlen = len || 16;\n\tvar str='', num=0;\n\treturn function () {\n\t\tif (!str || num === 256) {\n\t\t\tstr=''; num=(1+len)/2 | 0;\n\t\t\twhile (num--) str += HEX[256 * Math.random() | 0];\n\t\t\tstr = str.substring(num=0, len-2);\n\t\t}\n\t\treturn str + HEX[num++];\n\t};\n}\n","'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n","/*!\n * methods\n * Copyright(c) 2013-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar http = require('http');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = getCurrentNodeMethods() || getBasicNodeMethods();\n\n/**\n * Get the current Node.js methods.\n * @private\n */\n\nfunction getCurrentNodeMethods() {\n  return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {\n    return method.toLowerCase();\n  });\n}\n\n/**\n * Get the \"basic\" Node.js methods, a snapshot from Node.js 0.10.\n * @private\n */\n\nfunction getBasicNodeMethods() {\n  return [\n    'get',\n    'post',\n    'put',\n    'head',\n    'delete',\n    'options',\n    'trace',\n    'copy',\n    'lock',\n    'mkcol',\n    'move',\n    'purge',\n    'propfind',\n    'proppatch',\n    'unlock',\n    'report',\n    'mkactivity',\n    'checkout',\n    'merge',\n    'm-search',\n    'notify',\n    'subscribe',\n    'unsubscribe',\n    'patch',\n    'search',\n    'connect'\n  ];\n}\n","/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n","'use strict';\n\n/**\n * @param typeMap [Object] Map of MIME type -> Array[extensions]\n * @param ...\n */\nfunction Mime() {\n  this._types = Object.create(null);\n  this._extensions = Object.create(null);\n\n  for (let i = 0; i < arguments.length; i++) {\n    this.define(arguments[i]);\n  }\n\n  this.define = this.define.bind(this);\n  this.getType = this.getType.bind(this);\n  this.getExtension = this.getExtension.bind(this);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * If a type declares an extension that has already been defined, an error will\n * be thrown.  To suppress this error and force the extension to be associated\n * with the new type, pass `force`=true.  Alternatively, you may prefix the\n * extension with \"*\" to map the type to extension, without mapping the\n * extension to the type.\n *\n * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});\n *\n *\n * @param map (Object) type definitions\n * @param force (Boolean) if true, force overriding of existing definitions\n */\nMime.prototype.define = function(typeMap, force) {\n  for (let type in typeMap) {\n    let extensions = typeMap[type].map(function(t) {\n      return t.toLowerCase();\n    });\n    type = type.toLowerCase();\n\n    for (let i = 0; i < extensions.length; i++) {\n      const ext = extensions[i];\n\n      // '*' prefix = not the preferred type for this extension.  So fixup the\n      // extension, and skip it.\n      if (ext[0] === '*') {\n        continue;\n      }\n\n      if (!force && (ext in this._types)) {\n        throw new Error(\n          'Attempt to change mapping for \"' + ext +\n          '\" extension from \"' + this._types[ext] + '\" to \"' + type +\n          '\". Pass `force=true` to allow this, otherwise remove \"' + ext +\n          '\" from the list of extensions for \"' + type + '\".'\n        );\n      }\n\n      this._types[ext] = type;\n    }\n\n    // Use first extension as default\n    if (force || !this._extensions[type]) {\n      const ext = extensions[0];\n      this._extensions[type] = (ext[0] !== '*') ? ext : ext.substr(1);\n    }\n  }\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.getType = function(path) {\n  path = String(path);\n  let last = path.replace(/^.*[/\\\\]/, '').toLowerCase();\n  let ext = last.replace(/^.*\\./, '').toLowerCase();\n\n  let hasPath = last.length < path.length;\n  let hasDot = ext.length < last.length - 1;\n\n  return (hasDot || !hasPath) && this._types[ext] || null;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.getExtension = function(type) {\n  type = /^\\s*([^;\\s]*)/.test(type) && RegExp.$1;\n  return type && this._extensions[type.toLowerCase()] || null;\n};\n\nmodule.exports = Mime;\n","'use strict';\n\nlet Mime = require('./Mime');\nmodule.exports = new Mime(require('./types/standard'), require('./types/other'));\n","module.exports = {\"application/prs.cww\":[\"cww\"],\"application/vnd.1000minds.decision-model+xml\":[\"1km\"],\"application/vnd.3gpp.pic-bw-large\":[\"plb\"],\"application/vnd.3gpp.pic-bw-small\":[\"psb\"],\"application/vnd.3gpp.pic-bw-var\":[\"pvb\"],\"application/vnd.3gpp2.tcap\":[\"tcap\"],\"application/vnd.3m.post-it-notes\":[\"pwn\"],\"application/vnd.accpac.simply.aso\":[\"aso\"],\"application/vnd.accpac.simply.imp\":[\"imp\"],\"application/vnd.acucobol\":[\"acu\"],\"application/vnd.acucorp\":[\"atc\",\"acutc\"],\"application/vnd.adobe.air-application-installer-package+zip\":[\"air\"],\"application/vnd.adobe.formscentral.fcdt\":[\"fcdt\"],\"application/vnd.adobe.fxp\":[\"fxp\",\"fxpl\"],\"application/vnd.adobe.xdp+xml\":[\"xdp\"],\"application/vnd.adobe.xfdf\":[\"xfdf\"],\"application/vnd.ahead.space\":[\"ahead\"],\"application/vnd.airzip.filesecure.azf\":[\"azf\"],\"application/vnd.airzip.filesecure.azs\":[\"azs\"],\"application/vnd.amazon.ebook\":[\"azw\"],\"application/vnd.americandynamics.acc\":[\"acc\"],\"application/vnd.amiga.ami\":[\"ami\"],\"application/vnd.android.package-archive\":[\"apk\"],\"application/vnd.anser-web-certificate-issue-initiation\":[\"cii\"],\"application/vnd.anser-web-funds-transfer-initiation\":[\"fti\"],\"application/vnd.antix.game-component\":[\"atx\"],\"application/vnd.apple.installer+xml\":[\"mpkg\"],\"application/vnd.apple.keynote\":[\"key\"],\"application/vnd.apple.mpegurl\":[\"m3u8\"],\"application/vnd.apple.numbers\":[\"numbers\"],\"application/vnd.apple.pages\":[\"pages\"],\"application/vnd.apple.pkpass\":[\"pkpass\"],\"application/vnd.aristanetworks.swi\":[\"swi\"],\"application/vnd.astraea-software.iota\":[\"iota\"],\"application/vnd.audiograph\":[\"aep\"],\"application/vnd.balsamiq.bmml+xml\":[\"bmml\"],\"application/vnd.blueice.multipass\":[\"mpm\"],\"application/vnd.bmi\":[\"bmi\"],\"application/vnd.businessobjects\":[\"rep\"],\"application/vnd.chemdraw+xml\":[\"cdxml\"],\"application/vnd.chipnuts.karaoke-mmd\":[\"mmd\"],\"application/vnd.cinderella\":[\"cdy\"],\"application/vnd.citationstyles.style+xml\":[\"csl\"],\"application/vnd.claymore\":[\"cla\"],\"application/vnd.cloanto.rp9\":[\"rp9\"],\"application/vnd.clonk.c4group\":[\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"],\"application/vnd.cluetrust.cartomobile-config\":[\"c11amc\"],\"application/vnd.cluetrust.cartomobile-config-pkg\":[\"c11amz\"],\"application/vnd.commonspace\":[\"csp\"],\"application/vnd.contact.cmsg\":[\"cdbcmsg\"],\"application/vnd.cosmocaller\":[\"cmc\"],\"application/vnd.crick.clicker\":[\"clkx\"],\"application/vnd.crick.clicker.keyboard\":[\"clkk\"],\"application/vnd.crick.clicker.palette\":[\"clkp\"],\"application/vnd.crick.clicker.template\":[\"clkt\"],\"application/vnd.crick.clicker.wordbank\":[\"clkw\"],\"application/vnd.criticaltools.wbs+xml\":[\"wbs\"],\"application/vnd.ctc-posml\":[\"pml\"],\"application/vnd.cups-ppd\":[\"ppd\"],\"application/vnd.curl.car\":[\"car\"],\"application/vnd.curl.pcurl\":[\"pcurl\"],\"application/vnd.dart\":[\"dart\"],\"application/vnd.data-vision.rdz\":[\"rdz\"],\"application/vnd.dbf\":[\"dbf\"],\"application/vnd.dece.data\":[\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"],\"application/vnd.dece.ttml+xml\":[\"uvt\",\"uvvt\"],\"application/vnd.dece.unspecified\":[\"uvx\",\"uvvx\"],\"application/vnd.dece.zip\":[\"uvz\",\"uvvz\"],\"application/vnd.denovo.fcselayout-link\":[\"fe_launch\"],\"application/vnd.dna\":[\"dna\"],\"application/vnd.dolby.mlp\":[\"mlp\"],\"application/vnd.dpgraph\":[\"dpg\"],\"application/vnd.dreamfactory\":[\"dfac\"],\"application/vnd.ds-keypoint\":[\"kpxx\"],\"application/vnd.dvb.ait\":[\"ait\"],\"application/vnd.dvb.service\":[\"svc\"],\"application/vnd.dynageo\":[\"geo\"],\"application/vnd.ecowin.chart\":[\"mag\"],\"application/vnd.enliven\":[\"nml\"],\"application/vnd.epson.esf\":[\"esf\"],\"application/vnd.epson.msf\":[\"msf\"],\"application/vnd.epson.quickanime\":[\"qam\"],\"application/vnd.epson.salt\":[\"slt\"],\"application/vnd.epson.ssf\":[\"ssf\"],\"application/vnd.eszigno3+xml\":[\"es3\",\"et3\"],\"application/vnd.ezpix-album\":[\"ez2\"],\"application/vnd.ezpix-package\":[\"ez3\"],\"application/vnd.fdf\":[\"fdf\"],\"application/vnd.fdsn.mseed\":[\"mseed\"],\"application/vnd.fdsn.seed\":[\"seed\",\"dataless\"],\"application/vnd.flographit\":[\"gph\"],\"application/vnd.fluxtime.clip\":[\"ftc\"],\"application/vnd.framemaker\":[\"fm\",\"frame\",\"maker\",\"book\"],\"application/vnd.frogans.fnc\":[\"fnc\"],\"application/vnd.frogans.ltf\":[\"ltf\"],\"application/vnd.fsc.weblaunch\":[\"fsc\"],\"application/vnd.fujitsu.oasys\":[\"oas\"],\"application/vnd.fujitsu.oasys2\":[\"oa2\"],\"application/vnd.fujitsu.oasys3\":[\"oa3\"],\"application/vnd.fujitsu.oasysgp\":[\"fg5\"],\"application/vnd.fujitsu.oasysprs\":[\"bh2\"],\"application/vnd.fujixerox.ddd\":[\"ddd\"],\"application/vnd.fujixerox.docuworks\":[\"xdw\"],\"application/vnd.fujixerox.docuworks.binder\":[\"xbd\"],\"application/vnd.fuzzysheet\":[\"fzs\"],\"application/vnd.genomatix.tuxedo\":[\"txd\"],\"application/vnd.geogebra.file\":[\"ggb\"],\"application/vnd.geogebra.tool\":[\"ggt\"],\"application/vnd.geometry-explorer\":[\"gex\",\"gre\"],\"application/vnd.geonext\":[\"gxt\"],\"application/vnd.geoplan\":[\"g2w\"],\"application/vnd.geospace\":[\"g3w\"],\"application/vnd.gmx\":[\"gmx\"],\"application/vnd.google-apps.document\":[\"gdoc\"],\"application/vnd.google-apps.presentation\":[\"gslides\"],\"application/vnd.google-apps.spreadsheet\":[\"gsheet\"],\"application/vnd.google-earth.kml+xml\":[\"kml\"],\"application/vnd.google-earth.kmz\":[\"kmz\"],\"application/vnd.grafeq\":[\"gqf\",\"gqs\"],\"application/vnd.groove-account\":[\"gac\"],\"application/vnd.groove-help\":[\"ghf\"],\"application/vnd.groove-identity-message\":[\"gim\"],\"application/vnd.groove-injector\":[\"grv\"],\"application/vnd.groove-tool-message\":[\"gtm\"],\"application/vnd.groove-tool-template\":[\"tpl\"],\"application/vnd.groove-vcard\":[\"vcg\"],\"application/vnd.hal+xml\":[\"hal\"],\"application/vnd.handheld-entertainment+xml\":[\"zmm\"],\"application/vnd.hbci\":[\"hbci\"],\"application/vnd.hhe.lesson-player\":[\"les\"],\"application/vnd.hp-hpgl\":[\"hpgl\"],\"application/vnd.hp-hpid\":[\"hpid\"],\"application/vnd.hp-hps\":[\"hps\"],\"application/vnd.hp-jlyt\":[\"jlt\"],\"application/vnd.hp-pcl\":[\"pcl\"],\"application/vnd.hp-pclxl\":[\"pclxl\"],\"application/vnd.hydrostatix.sof-data\":[\"sfd-hdstx\"],\"application/vnd.ibm.minipay\":[\"mpy\"],\"application/vnd.ibm.modcap\":[\"afp\",\"listafp\",\"list3820\"],\"application/vnd.ibm.rights-management\":[\"irm\"],\"application/vnd.ibm.secure-container\":[\"sc\"],\"application/vnd.iccprofile\":[\"icc\",\"icm\"],\"application/vnd.igloader\":[\"igl\"],\"application/vnd.immervision-ivp\":[\"ivp\"],\"application/vnd.immervision-ivu\":[\"ivu\"],\"application/vnd.insors.igm\":[\"igm\"],\"application/vnd.intercon.formnet\":[\"xpw\",\"xpx\"],\"application/vnd.intergeo\":[\"i2g\"],\"application/vnd.intu.qbo\":[\"qbo\"],\"application/vnd.intu.qfx\":[\"qfx\"],\"application/vnd.ipunplugged.rcprofile\":[\"rcprofile\"],\"application/vnd.irepository.package+xml\":[\"irp\"],\"application/vnd.is-xpr\":[\"xpr\"],\"application/vnd.isac.fcs\":[\"fcs\"],\"application/vnd.jam\":[\"jam\"],\"application/vnd.jcp.javame.midlet-rms\":[\"rms\"],\"application/vnd.jisp\":[\"jisp\"],\"application/vnd.joost.joda-archive\":[\"joda\"],\"application/vnd.kahootz\":[\"ktz\",\"ktr\"],\"application/vnd.kde.karbon\":[\"karbon\"],\"application/vnd.kde.kchart\":[\"chrt\"],\"application/vnd.kde.kformula\":[\"kfo\"],\"application/vnd.kde.kivio\":[\"flw\"],\"application/vnd.kde.kontour\":[\"kon\"],\"application/vnd.kde.kpresenter\":[\"kpr\",\"kpt\"],\"application/vnd.kde.kspread\":[\"ksp\"],\"application/vnd.kde.kword\":[\"kwd\",\"kwt\"],\"application/vnd.kenameaapp\":[\"htke\"],\"application/vnd.kidspiration\":[\"kia\"],\"application/vnd.kinar\":[\"kne\",\"knp\"],\"application/vnd.koan\":[\"skp\",\"skd\",\"skt\",\"skm\"],\"application/vnd.kodak-descriptor\":[\"sse\"],\"application/vnd.las.las+xml\":[\"lasxml\"],\"application/vnd.llamagraphics.life-balance.desktop\":[\"lbd\"],\"application/vnd.llamagraphics.life-balance.exchange+xml\":[\"lbe\"],\"application/vnd.lotus-1-2-3\":[\"123\"],\"application/vnd.lotus-approach\":[\"apr\"],\"application/vnd.lotus-freelance\":[\"pre\"],\"application/vnd.lotus-notes\":[\"nsf\"],\"application/vnd.lotus-organizer\":[\"org\"],\"application/vnd.lotus-screencam\":[\"scm\"],\"application/vnd.lotus-wordpro\":[\"lwp\"],\"application/vnd.macports.portpkg\":[\"portpkg\"],\"application/vnd.mapbox-vector-tile\":[\"mvt\"],\"application/vnd.mcd\":[\"mcd\"],\"application/vnd.medcalcdata\":[\"mc1\"],\"application/vnd.mediastation.cdkey\":[\"cdkey\"],\"application/vnd.mfer\":[\"mwf\"],\"application/vnd.mfmp\":[\"mfm\"],\"application/vnd.micrografx.flo\":[\"flo\"],\"application/vnd.micrografx.igx\":[\"igx\"],\"application/vnd.mif\":[\"mif\"],\"application/vnd.mobius.daf\":[\"daf\"],\"application/vnd.mobius.dis\":[\"dis\"],\"application/vnd.mobius.mbk\":[\"mbk\"],\"application/vnd.mobius.mqy\":[\"mqy\"],\"application/vnd.mobius.msl\":[\"msl\"],\"application/vnd.mobius.plc\":[\"plc\"],\"application/vnd.mobius.txf\":[\"txf\"],\"application/vnd.mophun.application\":[\"mpn\"],\"application/vnd.mophun.certificate\":[\"mpc\"],\"application/vnd.mozilla.xul+xml\":[\"xul\"],\"application/vnd.ms-artgalry\":[\"cil\"],\"application/vnd.ms-cab-compressed\":[\"cab\"],\"application/vnd.ms-excel\":[\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"],\"application/vnd.ms-excel.addin.macroenabled.12\":[\"xlam\"],\"application/vnd.ms-excel.sheet.binary.macroenabled.12\":[\"xlsb\"],\"application/vnd.ms-excel.sheet.macroenabled.12\":[\"xlsm\"],\"application/vnd.ms-excel.template.macroenabled.12\":[\"xltm\"],\"application/vnd.ms-fontobject\":[\"eot\"],\"application/vnd.ms-htmlhelp\":[\"chm\"],\"application/vnd.ms-ims\":[\"ims\"],\"application/vnd.ms-lrm\":[\"lrm\"],\"application/vnd.ms-officetheme\":[\"thmx\"],\"application/vnd.ms-outlook\":[\"msg\"],\"application/vnd.ms-pki.seccat\":[\"cat\"],\"application/vnd.ms-pki.stl\":[\"*stl\"],\"application/vnd.ms-powerpoint\":[\"ppt\",\"pps\",\"pot\"],\"application/vnd.ms-powerpoint.addin.macroenabled.12\":[\"ppam\"],\"application/vnd.ms-powerpoint.presentation.macroenabled.12\":[\"pptm\"],\"application/vnd.ms-powerpoint.slide.macroenabled.12\":[\"sldm\"],\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\":[\"ppsm\"],\"application/vnd.ms-powerpoint.template.macroenabled.12\":[\"potm\"],\"application/vnd.ms-project\":[\"mpp\",\"mpt\"],\"application/vnd.ms-word.document.macroenabled.12\":[\"docm\"],\"application/vnd.ms-word.template.macroenabled.12\":[\"dotm\"],\"application/vnd.ms-works\":[\"wps\",\"wks\",\"wcm\",\"wdb\"],\"application/vnd.ms-wpl\":[\"wpl\"],\"application/vnd.ms-xpsdocument\":[\"xps\"],\"application/vnd.mseq\":[\"mseq\"],\"application/vnd.musician\":[\"mus\"],\"application/vnd.muvee.style\":[\"msty\"],\"application/vnd.mynfc\":[\"taglet\"],\"application/vnd.neurolanguage.nlu\":[\"nlu\"],\"application/vnd.nitf\":[\"ntf\",\"nitf\"],\"application/vnd.noblenet-directory\":[\"nnd\"],\"application/vnd.noblenet-sealer\":[\"nns\"],\"application/vnd.noblenet-web\":[\"nnw\"],\"application/vnd.nokia.n-gage.ac+xml\":[\"*ac\"],\"application/vnd.nokia.n-gage.data\":[\"ngdat\"],\"application/vnd.nokia.n-gage.symbian.install\":[\"n-gage\"],\"application/vnd.nokia.radio-preset\":[\"rpst\"],\"application/vnd.nokia.radio-presets\":[\"rpss\"],\"application/vnd.novadigm.edm\":[\"edm\"],\"application/vnd.novadigm.edx\":[\"edx\"],\"application/vnd.novadigm.ext\":[\"ext\"],\"application/vnd.oasis.opendocument.chart\":[\"odc\"],\"application/vnd.oasis.opendocument.chart-template\":[\"otc\"],\"application/vnd.oasis.opendocument.database\":[\"odb\"],\"application/vnd.oasis.opendocument.formula\":[\"odf\"],\"application/vnd.oasis.opendocument.formula-template\":[\"odft\"],\"application/vnd.oasis.opendocument.graphics\":[\"odg\"],\"application/vnd.oasis.opendocument.graphics-template\":[\"otg\"],\"application/vnd.oasis.opendocument.image\":[\"odi\"],\"application/vnd.oasis.opendocument.image-template\":[\"oti\"],\"application/vnd.oasis.opendocument.presentation\":[\"odp\"],\"application/vnd.oasis.opendocument.presentation-template\":[\"otp\"],\"application/vnd.oasis.opendocument.spreadsheet\":[\"ods\"],\"application/vnd.oasis.opendocument.spreadsheet-template\":[\"ots\"],\"application/vnd.oasis.opendocument.text\":[\"odt\"],\"application/vnd.oasis.opendocument.text-master\":[\"odm\"],\"application/vnd.oasis.opendocument.text-template\":[\"ott\"],\"application/vnd.oasis.opendocument.text-web\":[\"oth\"],\"application/vnd.olpc-sugar\":[\"xo\"],\"application/vnd.oma.dd2+xml\":[\"dd2\"],\"application/vnd.openblox.game+xml\":[\"obgx\"],\"application/vnd.openofficeorg.extension\":[\"oxt\"],\"application/vnd.openstreetmap.data+xml\":[\"osm\"],\"application/vnd.openxmlformats-officedocument.presentationml.presentation\":[\"pptx\"],\"application/vnd.openxmlformats-officedocument.presentationml.slide\":[\"sldx\"],\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\":[\"ppsx\"],\"application/vnd.openxmlformats-officedocument.presentationml.template\":[\"potx\"],\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":[\"xlsx\"],\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\":[\"xltx\"],\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":[\"docx\"],\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\":[\"dotx\"],\"application/vnd.osgeo.mapguide.package\":[\"mgp\"],\"application/vnd.osgi.dp\":[\"dp\"],\"application/vnd.osgi.subsystem\":[\"esa\"],\"application/vnd.palm\":[\"pdb\",\"pqa\",\"oprc\"],\"application/vnd.pawaafile\":[\"paw\"],\"application/vnd.pg.format\":[\"str\"],\"application/vnd.pg.osasli\":[\"ei6\"],\"application/vnd.picsel\":[\"efif\"],\"application/vnd.pmi.widget\":[\"wg\"],\"application/vnd.pocketlearn\":[\"plf\"],\"application/vnd.powerbuilder6\":[\"pbd\"],\"application/vnd.previewsystems.box\":[\"box\"],\"application/vnd.proteus.magazine\":[\"mgz\"],\"application/vnd.publishare-delta-tree\":[\"qps\"],\"application/vnd.pvi.ptid1\":[\"ptid\"],\"application/vnd.quark.quarkxpress\":[\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"],\"application/vnd.rar\":[\"rar\"],\"application/vnd.realvnc.bed\":[\"bed\"],\"application/vnd.recordare.musicxml\":[\"mxl\"],\"application/vnd.recordare.musicxml+xml\":[\"musicxml\"],\"application/vnd.rig.cryptonote\":[\"cryptonote\"],\"application/vnd.rim.cod\":[\"cod\"],\"application/vnd.rn-realmedia\":[\"rm\"],\"application/vnd.rn-realmedia-vbr\":[\"rmvb\"],\"application/vnd.route66.link66+xml\":[\"link66\"],\"application/vnd.sailingtracker.track\":[\"st\"],\"application/vnd.seemail\":[\"see\"],\"application/vnd.sema\":[\"sema\"],\"application/vnd.semd\":[\"semd\"],\"application/vnd.semf\":[\"semf\"],\"application/vnd.shana.informed.formdata\":[\"ifm\"],\"application/vnd.shana.informed.formtemplate\":[\"itp\"],\"application/vnd.shana.informed.interchange\":[\"iif\"],\"application/vnd.shana.informed.package\":[\"ipk\"],\"application/vnd.simtech-mindmapper\":[\"twd\",\"twds\"],\"application/vnd.smaf\":[\"mmf\"],\"application/vnd.smart.teacher\":[\"teacher\"],\"application/vnd.software602.filler.form+xml\":[\"fo\"],\"application/vnd.solent.sdkm+xml\":[\"sdkm\",\"sdkd\"],\"application/vnd.spotfire.dxp\":[\"dxp\"],\"application/vnd.spotfire.sfs\":[\"sfs\"],\"application/vnd.stardivision.calc\":[\"sdc\"],\"application/vnd.stardivision.draw\":[\"sda\"],\"application/vnd.stardivision.impress\":[\"sdd\"],\"application/vnd.stardivision.math\":[\"smf\"],\"application/vnd.stardivision.writer\":[\"sdw\",\"vor\"],\"application/vnd.stardivision.writer-global\":[\"sgl\"],\"application/vnd.stepmania.package\":[\"smzip\"],\"application/vnd.stepmania.stepchart\":[\"sm\"],\"application/vnd.sun.wadl+xml\":[\"wadl\"],\"application/vnd.sun.xml.calc\":[\"sxc\"],\"application/vnd.sun.xml.calc.template\":[\"stc\"],\"application/vnd.sun.xml.draw\":[\"sxd\"],\"application/vnd.sun.xml.draw.template\":[\"std\"],\"application/vnd.sun.xml.impress\":[\"sxi\"],\"application/vnd.sun.xml.impress.template\":[\"sti\"],\"application/vnd.sun.xml.math\":[\"sxm\"],\"application/vnd.sun.xml.writer\":[\"sxw\"],\"application/vnd.sun.xml.writer.global\":[\"sxg\"],\"application/vnd.sun.xml.writer.template\":[\"stw\"],\"application/vnd.sus-calendar\":[\"sus\",\"susp\"],\"application/vnd.svd\":[\"svd\"],\"application/vnd.symbian.install\":[\"sis\",\"sisx\"],\"application/vnd.syncml+xml\":[\"xsm\"],\"application/vnd.syncml.dm+wbxml\":[\"bdm\"],\"application/vnd.syncml.dm+xml\":[\"xdm\"],\"application/vnd.syncml.dmddf+xml\":[\"ddf\"],\"application/vnd.tao.intent-module-archive\":[\"tao\"],\"application/vnd.tcpdump.pcap\":[\"pcap\",\"cap\",\"dmp\"],\"application/vnd.tmobile-livetv\":[\"tmo\"],\"application/vnd.trid.tpt\":[\"tpt\"],\"application/vnd.triscape.mxs\":[\"mxs\"],\"application/vnd.trueapp\":[\"tra\"],\"application/vnd.ufdl\":[\"ufd\",\"ufdl\"],\"application/vnd.uiq.theme\":[\"utz\"],\"application/vnd.umajin\":[\"umj\"],\"application/vnd.unity\":[\"unityweb\"],\"application/vnd.uoml+xml\":[\"uoml\"],\"application/vnd.vcx\":[\"vcx\"],\"application/vnd.visio\":[\"vsd\",\"vst\",\"vss\",\"vsw\"],\"application/vnd.visionary\":[\"vis\"],\"application/vnd.vsf\":[\"vsf\"],\"application/vnd.wap.wbxml\":[\"wbxml\"],\"application/vnd.wap.wmlc\":[\"wmlc\"],\"application/vnd.wap.wmlscriptc\":[\"wmlsc\"],\"application/vnd.webturbo\":[\"wtb\"],\"application/vnd.wolfram.player\":[\"nbp\"],\"application/vnd.wordperfect\":[\"wpd\"],\"application/vnd.wqd\":[\"wqd\"],\"application/vnd.wt.stf\":[\"stf\"],\"application/vnd.xara\":[\"xar\"],\"application/vnd.xfdl\":[\"xfdl\"],\"application/vnd.yamaha.hv-dic\":[\"hvd\"],\"application/vnd.yamaha.hv-script\":[\"hvs\"],\"application/vnd.yamaha.hv-voice\":[\"hvp\"],\"application/vnd.yamaha.openscoreformat\":[\"osf\"],\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":[\"osfpvg\"],\"application/vnd.yamaha.smaf-audio\":[\"saf\"],\"application/vnd.yamaha.smaf-phrase\":[\"spf\"],\"application/vnd.yellowriver-custom-menu\":[\"cmp\"],\"application/vnd.zul\":[\"zir\",\"zirz\"],\"application/vnd.zzazz.deck+xml\":[\"zaz\"],\"application/x-7z-compressed\":[\"7z\"],\"application/x-abiword\":[\"abw\"],\"application/x-ace-compressed\":[\"ace\"],\"application/x-apple-diskimage\":[\"*dmg\"],\"application/x-arj\":[\"arj\"],\"application/x-authorware-bin\":[\"aab\",\"x32\",\"u32\",\"vox\"],\"application/x-authorware-map\":[\"aam\"],\"application/x-authorware-seg\":[\"aas\"],\"application/x-bcpio\":[\"bcpio\"],\"application/x-bdoc\":[\"*bdoc\"],\"application/x-bittorrent\":[\"torrent\"],\"application/x-blorb\":[\"blb\",\"blorb\"],\"application/x-bzip\":[\"bz\"],\"application/x-bzip2\":[\"bz2\",\"boz\"],\"application/x-cbr\":[\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"],\"application/x-cdlink\":[\"vcd\"],\"application/x-cfs-compressed\":[\"cfs\"],\"application/x-chat\":[\"chat\"],\"application/x-chess-pgn\":[\"pgn\"],\"application/x-chrome-extension\":[\"crx\"],\"application/x-cocoa\":[\"cco\"],\"application/x-conference\":[\"nsc\"],\"application/x-cpio\":[\"cpio\"],\"application/x-csh\":[\"csh\"],\"application/x-debian-package\":[\"*deb\",\"udeb\"],\"application/x-dgc-compressed\":[\"dgc\"],\"application/x-director\":[\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"],\"application/x-doom\":[\"wad\"],\"application/x-dtbncx+xml\":[\"ncx\"],\"application/x-dtbook+xml\":[\"dtb\"],\"application/x-dtbresource+xml\":[\"res\"],\"application/x-dvi\":[\"dvi\"],\"application/x-envoy\":[\"evy\"],\"application/x-eva\":[\"eva\"],\"application/x-font-bdf\":[\"bdf\"],\"application/x-font-ghostscript\":[\"gsf\"],\"application/x-font-linux-psf\":[\"psf\"],\"application/x-font-pcf\":[\"pcf\"],\"application/x-font-snf\":[\"snf\"],\"application/x-font-type1\":[\"pfa\",\"pfb\",\"pfm\",\"afm\"],\"application/x-freearc\":[\"arc\"],\"application/x-futuresplash\":[\"spl\"],\"application/x-gca-compressed\":[\"gca\"],\"application/x-glulx\":[\"ulx\"],\"application/x-gnumeric\":[\"gnumeric\"],\"application/x-gramps-xml\":[\"gramps\"],\"application/x-gtar\":[\"gtar\"],\"application/x-hdf\":[\"hdf\"],\"application/x-httpd-php\":[\"php\"],\"application/x-install-instructions\":[\"install\"],\"application/x-iso9660-image\":[\"*iso\"],\"application/x-iwork-keynote-sffkey\":[\"*key\"],\"application/x-iwork-numbers-sffnumbers\":[\"*numbers\"],\"application/x-iwork-pages-sffpages\":[\"*pages\"],\"application/x-java-archive-diff\":[\"jardiff\"],\"application/x-java-jnlp-file\":[\"jnlp\"],\"application/x-keepass2\":[\"kdbx\"],\"application/x-latex\":[\"latex\"],\"application/x-lua-bytecode\":[\"luac\"],\"application/x-lzh-compressed\":[\"lzh\",\"lha\"],\"application/x-makeself\":[\"run\"],\"application/x-mie\":[\"mie\"],\"application/x-mobipocket-ebook\":[\"prc\",\"mobi\"],\"application/x-ms-application\":[\"application\"],\"application/x-ms-shortcut\":[\"lnk\"],\"application/x-ms-wmd\":[\"wmd\"],\"application/x-ms-wmz\":[\"wmz\"],\"application/x-ms-xbap\":[\"xbap\"],\"application/x-msaccess\":[\"mdb\"],\"application/x-msbinder\":[\"obd\"],\"application/x-mscardfile\":[\"crd\"],\"application/x-msclip\":[\"clp\"],\"application/x-msdos-program\":[\"*exe\"],\"application/x-msdownload\":[\"*exe\",\"*dll\",\"com\",\"bat\",\"*msi\"],\"application/x-msmediaview\":[\"mvb\",\"m13\",\"m14\"],\"application/x-msmetafile\":[\"*wmf\",\"*wmz\",\"*emf\",\"emz\"],\"application/x-msmoney\":[\"mny\"],\"application/x-mspublisher\":[\"pub\"],\"application/x-msschedule\":[\"scd\"],\"application/x-msterminal\":[\"trm\"],\"application/x-mswrite\":[\"wri\"],\"application/x-netcdf\":[\"nc\",\"cdf\"],\"application/x-ns-proxy-autoconfig\":[\"pac\"],\"application/x-nzb\":[\"nzb\"],\"application/x-perl\":[\"pl\",\"pm\"],\"application/x-pilot\":[\"*prc\",\"*pdb\"],\"application/x-pkcs12\":[\"p12\",\"pfx\"],\"application/x-pkcs7-certificates\":[\"p7b\",\"spc\"],\"application/x-pkcs7-certreqresp\":[\"p7r\"],\"application/x-rar-compressed\":[\"*rar\"],\"application/x-redhat-package-manager\":[\"rpm\"],\"application/x-research-info-systems\":[\"ris\"],\"application/x-sea\":[\"sea\"],\"application/x-sh\":[\"sh\"],\"application/x-shar\":[\"shar\"],\"application/x-shockwave-flash\":[\"swf\"],\"application/x-silverlight-app\":[\"xap\"],\"application/x-sql\":[\"sql\"],\"application/x-stuffit\":[\"sit\"],\"application/x-stuffitx\":[\"sitx\"],\"application/x-subrip\":[\"srt\"],\"application/x-sv4cpio\":[\"sv4cpio\"],\"application/x-sv4crc\":[\"sv4crc\"],\"application/x-t3vm-image\":[\"t3\"],\"application/x-tads\":[\"gam\"],\"application/x-tar\":[\"tar\"],\"application/x-tcl\":[\"tcl\",\"tk\"],\"application/x-tex\":[\"tex\"],\"application/x-tex-tfm\":[\"tfm\"],\"application/x-texinfo\":[\"texinfo\",\"texi\"],\"application/x-tgif\":[\"*obj\"],\"application/x-ustar\":[\"ustar\"],\"application/x-virtualbox-hdd\":[\"hdd\"],\"application/x-virtualbox-ova\":[\"ova\"],\"application/x-virtualbox-ovf\":[\"ovf\"],\"application/x-virtualbox-vbox\":[\"vbox\"],\"application/x-virtualbox-vbox-extpack\":[\"vbox-extpack\"],\"application/x-virtualbox-vdi\":[\"vdi\"],\"application/x-virtualbox-vhd\":[\"vhd\"],\"application/x-virtualbox-vmdk\":[\"vmdk\"],\"application/x-wais-source\":[\"src\"],\"application/x-web-app-manifest+json\":[\"webapp\"],\"application/x-x509-ca-cert\":[\"der\",\"crt\",\"pem\"],\"application/x-xfig\":[\"fig\"],\"application/x-xliff+xml\":[\"*xlf\"],\"application/x-xpinstall\":[\"xpi\"],\"application/x-xz\":[\"xz\"],\"application/x-zmachine\":[\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"],\"audio/vnd.dece.audio\":[\"uva\",\"uvva\"],\"audio/vnd.digital-winds\":[\"eol\"],\"audio/vnd.dra\":[\"dra\"],\"audio/vnd.dts\":[\"dts\"],\"audio/vnd.dts.hd\":[\"dtshd\"],\"audio/vnd.lucent.voice\":[\"lvp\"],\"audio/vnd.ms-playready.media.pya\":[\"pya\"],\"audio/vnd.nuera.ecelp4800\":[\"ecelp4800\"],\"audio/vnd.nuera.ecelp7470\":[\"ecelp7470\"],\"audio/vnd.nuera.ecelp9600\":[\"ecelp9600\"],\"audio/vnd.rip\":[\"rip\"],\"audio/x-aac\":[\"aac\"],\"audio/x-aiff\":[\"aif\",\"aiff\",\"aifc\"],\"audio/x-caf\":[\"caf\"],\"audio/x-flac\":[\"flac\"],\"audio/x-m4a\":[\"*m4a\"],\"audio/x-matroska\":[\"mka\"],\"audio/x-mpegurl\":[\"m3u\"],\"audio/x-ms-wax\":[\"wax\"],\"audio/x-ms-wma\":[\"wma\"],\"audio/x-pn-realaudio\":[\"ram\",\"ra\"],\"audio/x-pn-realaudio-plugin\":[\"rmp\"],\"audio/x-realaudio\":[\"*ra\"],\"audio/x-wav\":[\"*wav\"],\"chemical/x-cdx\":[\"cdx\"],\"chemical/x-cif\":[\"cif\"],\"chemical/x-cmdf\":[\"cmdf\"],\"chemical/x-cml\":[\"cml\"],\"chemical/x-csml\":[\"csml\"],\"chemical/x-xyz\":[\"xyz\"],\"image/prs.btif\":[\"btif\"],\"image/prs.pti\":[\"pti\"],\"image/vnd.adobe.photoshop\":[\"psd\"],\"image/vnd.airzip.accelerator.azv\":[\"azv\"],\"image/vnd.dece.graphic\":[\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"],\"image/vnd.djvu\":[\"djvu\",\"djv\"],\"image/vnd.dvb.subtitle\":[\"*sub\"],\"image/vnd.dwg\":[\"dwg\"],\"image/vnd.dxf\":[\"dxf\"],\"image/vnd.fastbidsheet\":[\"fbs\"],\"image/vnd.fpx\":[\"fpx\"],\"image/vnd.fst\":[\"fst\"],\"image/vnd.fujixerox.edmics-mmr\":[\"mmr\"],\"image/vnd.fujixerox.edmics-rlc\":[\"rlc\"],\"image/vnd.microsoft.icon\":[\"ico\"],\"image/vnd.ms-dds\":[\"dds\"],\"image/vnd.ms-modi\":[\"mdi\"],\"image/vnd.ms-photo\":[\"wdp\"],\"image/vnd.net-fpx\":[\"npx\"],\"image/vnd.pco.b16\":[\"b16\"],\"image/vnd.tencent.tap\":[\"tap\"],\"image/vnd.valve.source.texture\":[\"vtf\"],\"image/vnd.wap.wbmp\":[\"wbmp\"],\"image/vnd.xiff\":[\"xif\"],\"image/vnd.zbrush.pcx\":[\"pcx\"],\"image/x-3ds\":[\"3ds\"],\"image/x-cmu-raster\":[\"ras\"],\"image/x-cmx\":[\"cmx\"],\"image/x-freehand\":[\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"],\"image/x-icon\":[\"*ico\"],\"image/x-jng\":[\"jng\"],\"image/x-mrsid-image\":[\"sid\"],\"image/x-ms-bmp\":[\"*bmp\"],\"image/x-pcx\":[\"*pcx\"],\"image/x-pict\":[\"pic\",\"pct\"],\"image/x-portable-anymap\":[\"pnm\"],\"image/x-portable-bitmap\":[\"pbm\"],\"image/x-portable-graymap\":[\"pgm\"],\"image/x-portable-pixmap\":[\"ppm\"],\"image/x-rgb\":[\"rgb\"],\"image/x-tga\":[\"tga\"],\"image/x-xbitmap\":[\"xbm\"],\"image/x-xpixmap\":[\"xpm\"],\"image/x-xwindowdump\":[\"xwd\"],\"message/vnd.wfa.wsc\":[\"wsc\"],\"model/vnd.collada+xml\":[\"dae\"],\"model/vnd.dwf\":[\"dwf\"],\"model/vnd.gdl\":[\"gdl\"],\"model/vnd.gtw\":[\"gtw\"],\"model/vnd.mts\":[\"mts\"],\"model/vnd.opengex\":[\"ogex\"],\"model/vnd.parasolid.transmit.binary\":[\"x_b\"],\"model/vnd.parasolid.transmit.text\":[\"x_t\"],\"model/vnd.sap.vds\":[\"vds\"],\"model/vnd.usdz+zip\":[\"usdz\"],\"model/vnd.valve.source.compiled-map\":[\"bsp\"],\"model/vnd.vtu\":[\"vtu\"],\"text/prs.lines.tag\":[\"dsc\"],\"text/vnd.curl\":[\"curl\"],\"text/vnd.curl.dcurl\":[\"dcurl\"],\"text/vnd.curl.mcurl\":[\"mcurl\"],\"text/vnd.curl.scurl\":[\"scurl\"],\"text/vnd.dvb.subtitle\":[\"sub\"],\"text/vnd.fly\":[\"fly\"],\"text/vnd.fmi.flexstor\":[\"flx\"],\"text/vnd.graphviz\":[\"gv\"],\"text/vnd.in3d.3dml\":[\"3dml\"],\"text/vnd.in3d.spot\":[\"spot\"],\"text/vnd.sun.j2me.app-descriptor\":[\"jad\"],\"text/vnd.wap.wml\":[\"wml\"],\"text/vnd.wap.wmlscript\":[\"wmls\"],\"text/x-asm\":[\"s\",\"asm\"],\"text/x-c\":[\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"],\"text/x-component\":[\"htc\"],\"text/x-fortran\":[\"f\",\"for\",\"f77\",\"f90\"],\"text/x-handlebars-template\":[\"hbs\"],\"text/x-java-source\":[\"java\"],\"text/x-lua\":[\"lua\"],\"text/x-markdown\":[\"mkd\"],\"text/x-nfo\":[\"nfo\"],\"text/x-opml\":[\"opml\"],\"text/x-org\":[\"*org\"],\"text/x-pascal\":[\"p\",\"pas\"],\"text/x-processing\":[\"pde\"],\"text/x-sass\":[\"sass\"],\"text/x-scss\":[\"scss\"],\"text/x-setext\":[\"etx\"],\"text/x-sfv\":[\"sfv\"],\"text/x-suse-ymp\":[\"ymp\"],\"text/x-uuencode\":[\"uu\"],\"text/x-vcalendar\":[\"vcs\"],\"text/x-vcard\":[\"vcf\"],\"video/vnd.dece.hd\":[\"uvh\",\"uvvh\"],\"video/vnd.dece.mobile\":[\"uvm\",\"uvvm\"],\"video/vnd.dece.pd\":[\"uvp\",\"uvvp\"],\"video/vnd.dece.sd\":[\"uvs\",\"uvvs\"],\"video/vnd.dece.video\":[\"uvv\",\"uvvv\"],\"video/vnd.dvb.file\":[\"dvb\"],\"video/vnd.fvt\":[\"fvt\"],\"video/vnd.mpegurl\":[\"mxu\",\"m4u\"],\"video/vnd.ms-playready.media.pyv\":[\"pyv\"],\"video/vnd.uvvu.mp4\":[\"uvu\",\"uvvu\"],\"video/vnd.vivo\":[\"viv\"],\"video/x-f4v\":[\"f4v\"],\"video/x-fli\":[\"fli\"],\"video/x-flv\":[\"flv\"],\"video/x-m4v\":[\"m4v\"],\"video/x-matroska\":[\"mkv\",\"mk3d\",\"mks\"],\"video/x-mng\":[\"mng\"],\"video/x-ms-asf\":[\"asf\",\"asx\"],\"video/x-ms-vob\":[\"vob\"],\"video/x-ms-wm\":[\"wm\"],\"video/x-ms-wmv\":[\"wmv\"],\"video/x-ms-wmx\":[\"wmx\"],\"video/x-ms-wvx\":[\"wvx\"],\"video/x-msvideo\":[\"avi\"],\"video/x-sgi-movie\":[\"movie\"],\"video/x-smv\":[\"smv\"],\"x-conference/x-cooltalk\":[\"ice\"]};","module.exports = {\"application/andrew-inset\":[\"ez\"],\"application/applixware\":[\"aw\"],\"application/atom+xml\":[\"atom\"],\"application/atomcat+xml\":[\"atomcat\"],\"application/atomdeleted+xml\":[\"atomdeleted\"],\"application/atomsvc+xml\":[\"atomsvc\"],\"application/atsc-dwd+xml\":[\"dwd\"],\"application/atsc-held+xml\":[\"held\"],\"application/atsc-rsat+xml\":[\"rsat\"],\"application/bdoc\":[\"bdoc\"],\"application/calendar+xml\":[\"xcs\"],\"application/ccxml+xml\":[\"ccxml\"],\"application/cdfx+xml\":[\"cdfx\"],\"application/cdmi-capability\":[\"cdmia\"],\"application/cdmi-container\":[\"cdmic\"],\"application/cdmi-domain\":[\"cdmid\"],\"application/cdmi-object\":[\"cdmio\"],\"application/cdmi-queue\":[\"cdmiq\"],\"application/cu-seeme\":[\"cu\"],\"application/dash+xml\":[\"mpd\"],\"application/davmount+xml\":[\"davmount\"],\"application/docbook+xml\":[\"dbk\"],\"application/dssc+der\":[\"dssc\"],\"application/dssc+xml\":[\"xdssc\"],\"application/ecmascript\":[\"es\",\"ecma\"],\"application/emma+xml\":[\"emma\"],\"application/emotionml+xml\":[\"emotionml\"],\"application/epub+zip\":[\"epub\"],\"application/exi\":[\"exi\"],\"application/express\":[\"exp\"],\"application/fdt+xml\":[\"fdt\"],\"application/font-tdpfr\":[\"pfr\"],\"application/geo+json\":[\"geojson\"],\"application/gml+xml\":[\"gml\"],\"application/gpx+xml\":[\"gpx\"],\"application/gxf\":[\"gxf\"],\"application/gzip\":[\"gz\"],\"application/hjson\":[\"hjson\"],\"application/hyperstudio\":[\"stk\"],\"application/inkml+xml\":[\"ink\",\"inkml\"],\"application/ipfix\":[\"ipfix\"],\"application/its+xml\":[\"its\"],\"application/java-archive\":[\"jar\",\"war\",\"ear\"],\"application/java-serialized-object\":[\"ser\"],\"application/java-vm\":[\"class\"],\"application/javascript\":[\"js\",\"mjs\"],\"application/json\":[\"json\",\"map\"],\"application/json5\":[\"json5\"],\"application/jsonml+json\":[\"jsonml\"],\"application/ld+json\":[\"jsonld\"],\"application/lgr+xml\":[\"lgr\"],\"application/lost+xml\":[\"lostxml\"],\"application/mac-binhex40\":[\"hqx\"],\"application/mac-compactpro\":[\"cpt\"],\"application/mads+xml\":[\"mads\"],\"application/manifest+json\":[\"webmanifest\"],\"application/marc\":[\"mrc\"],\"application/marcxml+xml\":[\"mrcx\"],\"application/mathematica\":[\"ma\",\"nb\",\"mb\"],\"application/mathml+xml\":[\"mathml\"],\"application/mbox\":[\"mbox\"],\"application/mediaservercontrol+xml\":[\"mscml\"],\"application/metalink+xml\":[\"metalink\"],\"application/metalink4+xml\":[\"meta4\"],\"application/mets+xml\":[\"mets\"],\"application/mmt-aei+xml\":[\"maei\"],\"application/mmt-usd+xml\":[\"musd\"],\"application/mods+xml\":[\"mods\"],\"application/mp21\":[\"m21\",\"mp21\"],\"application/mp4\":[\"mp4s\",\"m4p\"],\"application/msword\":[\"doc\",\"dot\"],\"application/mxf\":[\"mxf\"],\"application/n-quads\":[\"nq\"],\"application/n-triples\":[\"nt\"],\"application/node\":[\"cjs\"],\"application/octet-stream\":[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"],\"application/oda\":[\"oda\"],\"application/oebps-package+xml\":[\"opf\"],\"application/ogg\":[\"ogx\"],\"application/omdoc+xml\":[\"omdoc\"],\"application/onenote\":[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"],\"application/oxps\":[\"oxps\"],\"application/p2p-overlay+xml\":[\"relo\"],\"application/patch-ops-error+xml\":[\"xer\"],\"application/pdf\":[\"pdf\"],\"application/pgp-encrypted\":[\"pgp\"],\"application/pgp-signature\":[\"asc\",\"sig\"],\"application/pics-rules\":[\"prf\"],\"application/pkcs10\":[\"p10\"],\"application/pkcs7-mime\":[\"p7m\",\"p7c\"],\"application/pkcs7-signature\":[\"p7s\"],\"application/pkcs8\":[\"p8\"],\"application/pkix-attr-cert\":[\"ac\"],\"application/pkix-cert\":[\"cer\"],\"application/pkix-crl\":[\"crl\"],\"application/pkix-pkipath\":[\"pkipath\"],\"application/pkixcmp\":[\"pki\"],\"application/pls+xml\":[\"pls\"],\"application/postscript\":[\"ai\",\"eps\",\"ps\"],\"application/provenance+xml\":[\"provx\"],\"application/pskc+xml\":[\"pskcxml\"],\"application/raml+yaml\":[\"raml\"],\"application/rdf+xml\":[\"rdf\",\"owl\"],\"application/reginfo+xml\":[\"rif\"],\"application/relax-ng-compact-syntax\":[\"rnc\"],\"application/resource-lists+xml\":[\"rl\"],\"application/resource-lists-diff+xml\":[\"rld\"],\"application/rls-services+xml\":[\"rs\"],\"application/route-apd+xml\":[\"rapd\"],\"application/route-s-tsid+xml\":[\"sls\"],\"application/route-usd+xml\":[\"rusd\"],\"application/rpki-ghostbusters\":[\"gbr\"],\"application/rpki-manifest\":[\"mft\"],\"application/rpki-roa\":[\"roa\"],\"application/rsd+xml\":[\"rsd\"],\"application/rss+xml\":[\"rss\"],\"application/rtf\":[\"rtf\"],\"application/sbml+xml\":[\"sbml\"],\"application/scvp-cv-request\":[\"scq\"],\"application/scvp-cv-response\":[\"scs\"],\"application/scvp-vp-request\":[\"spq\"],\"application/scvp-vp-response\":[\"spp\"],\"application/sdp\":[\"sdp\"],\"application/senml+xml\":[\"senmlx\"],\"application/sensml+xml\":[\"sensmlx\"],\"application/set-payment-initiation\":[\"setpay\"],\"application/set-registration-initiation\":[\"setreg\"],\"application/shf+xml\":[\"shf\"],\"application/sieve\":[\"siv\",\"sieve\"],\"application/smil+xml\":[\"smi\",\"smil\"],\"application/sparql-query\":[\"rq\"],\"application/sparql-results+xml\":[\"srx\"],\"application/srgs\":[\"gram\"],\"application/srgs+xml\":[\"grxml\"],\"application/sru+xml\":[\"sru\"],\"application/ssdl+xml\":[\"ssdl\"],\"application/ssml+xml\":[\"ssml\"],\"application/swid+xml\":[\"swidtag\"],\"application/tei+xml\":[\"tei\",\"teicorpus\"],\"application/thraud+xml\":[\"tfi\"],\"application/timestamped-data\":[\"tsd\"],\"application/toml\":[\"toml\"],\"application/trig\":[\"trig\"],\"application/ttml+xml\":[\"ttml\"],\"application/ubjson\":[\"ubj\"],\"application/urc-ressheet+xml\":[\"rsheet\"],\"application/urc-targetdesc+xml\":[\"td\"],\"application/voicexml+xml\":[\"vxml\"],\"application/wasm\":[\"wasm\"],\"application/widget\":[\"wgt\"],\"application/winhlp\":[\"hlp\"],\"application/wsdl+xml\":[\"wsdl\"],\"application/wspolicy+xml\":[\"wspolicy\"],\"application/xaml+xml\":[\"xaml\"],\"application/xcap-att+xml\":[\"xav\"],\"application/xcap-caps+xml\":[\"xca\"],\"application/xcap-diff+xml\":[\"xdf\"],\"application/xcap-el+xml\":[\"xel\"],\"application/xcap-ns+xml\":[\"xns\"],\"application/xenc+xml\":[\"xenc\"],\"application/xhtml+xml\":[\"xhtml\",\"xht\"],\"application/xliff+xml\":[\"xlf\"],\"application/xml\":[\"xml\",\"xsl\",\"xsd\",\"rng\"],\"application/xml-dtd\":[\"dtd\"],\"application/xop+xml\":[\"xop\"],\"application/xproc+xml\":[\"xpl\"],\"application/xslt+xml\":[\"*xsl\",\"xslt\"],\"application/xspf+xml\":[\"xspf\"],\"application/xv+xml\":[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"],\"application/yang\":[\"yang\"],\"application/yin+xml\":[\"yin\"],\"application/zip\":[\"zip\"],\"audio/3gpp\":[\"*3gpp\"],\"audio/adpcm\":[\"adp\"],\"audio/amr\":[\"amr\"],\"audio/basic\":[\"au\",\"snd\"],\"audio/midi\":[\"mid\",\"midi\",\"kar\",\"rmi\"],\"audio/mobile-xmf\":[\"mxmf\"],\"audio/mp3\":[\"*mp3\"],\"audio/mp4\":[\"m4a\",\"mp4a\"],\"audio/mpeg\":[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"],\"audio/ogg\":[\"oga\",\"ogg\",\"spx\",\"opus\"],\"audio/s3m\":[\"s3m\"],\"audio/silk\":[\"sil\"],\"audio/wav\":[\"wav\"],\"audio/wave\":[\"*wav\"],\"audio/webm\":[\"weba\"],\"audio/xm\":[\"xm\"],\"font/collection\":[\"ttc\"],\"font/otf\":[\"otf\"],\"font/ttf\":[\"ttf\"],\"font/woff\":[\"woff\"],\"font/woff2\":[\"woff2\"],\"image/aces\":[\"exr\"],\"image/apng\":[\"apng\"],\"image/avif\":[\"avif\"],\"image/bmp\":[\"bmp\"],\"image/cgm\":[\"cgm\"],\"image/dicom-rle\":[\"drle\"],\"image/emf\":[\"emf\"],\"image/fits\":[\"fits\"],\"image/g3fax\":[\"g3\"],\"image/gif\":[\"gif\"],\"image/heic\":[\"heic\"],\"image/heic-sequence\":[\"heics\"],\"image/heif\":[\"heif\"],\"image/heif-sequence\":[\"heifs\"],\"image/hej2k\":[\"hej2\"],\"image/hsj2\":[\"hsj2\"],\"image/ief\":[\"ief\"],\"image/jls\":[\"jls\"],\"image/jp2\":[\"jp2\",\"jpg2\"],\"image/jpeg\":[\"jpeg\",\"jpg\",\"jpe\"],\"image/jph\":[\"jph\"],\"image/jphc\":[\"jhc\"],\"image/jpm\":[\"jpm\"],\"image/jpx\":[\"jpx\",\"jpf\"],\"image/jxr\":[\"jxr\"],\"image/jxra\":[\"jxra\"],\"image/jxrs\":[\"jxrs\"],\"image/jxs\":[\"jxs\"],\"image/jxsc\":[\"jxsc\"],\"image/jxsi\":[\"jxsi\"],\"image/jxss\":[\"jxss\"],\"image/ktx\":[\"ktx\"],\"image/ktx2\":[\"ktx2\"],\"image/png\":[\"png\"],\"image/sgi\":[\"sgi\"],\"image/svg+xml\":[\"svg\",\"svgz\"],\"image/t38\":[\"t38\"],\"image/tiff\":[\"tif\",\"tiff\"],\"image/tiff-fx\":[\"tfx\"],\"image/webp\":[\"webp\"],\"image/wmf\":[\"wmf\"],\"message/disposition-notification\":[\"disposition-notification\"],\"message/global\":[\"u8msg\"],\"message/global-delivery-status\":[\"u8dsn\"],\"message/global-disposition-notification\":[\"u8mdn\"],\"message/global-headers\":[\"u8hdr\"],\"message/rfc822\":[\"eml\",\"mime\"],\"model/3mf\":[\"3mf\"],\"model/gltf+json\":[\"gltf\"],\"model/gltf-binary\":[\"glb\"],\"model/iges\":[\"igs\",\"iges\"],\"model/mesh\":[\"msh\",\"mesh\",\"silo\"],\"model/mtl\":[\"mtl\"],\"model/obj\":[\"obj\"],\"model/step+xml\":[\"stpx\"],\"model/step+zip\":[\"stpz\"],\"model/step-xml+zip\":[\"stpxz\"],\"model/stl\":[\"stl\"],\"model/vrml\":[\"wrl\",\"vrml\"],\"model/x3d+binary\":[\"*x3db\",\"x3dbz\"],\"model/x3d+fastinfoset\":[\"x3db\"],\"model/x3d+vrml\":[\"*x3dv\",\"x3dvz\"],\"model/x3d+xml\":[\"x3d\",\"x3dz\"],\"model/x3d-vrml\":[\"x3dv\"],\"text/cache-manifest\":[\"appcache\",\"manifest\"],\"text/calendar\":[\"ics\",\"ifb\"],\"text/coffeescript\":[\"coffee\",\"litcoffee\"],\"text/css\":[\"css\"],\"text/csv\":[\"csv\"],\"text/html\":[\"html\",\"htm\",\"shtml\"],\"text/jade\":[\"jade\"],\"text/jsx\":[\"jsx\"],\"text/less\":[\"less\"],\"text/markdown\":[\"markdown\",\"md\"],\"text/mathml\":[\"mml\"],\"text/mdx\":[\"mdx\"],\"text/n3\":[\"n3\"],\"text/plain\":[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"],\"text/richtext\":[\"rtx\"],\"text/rtf\":[\"*rtf\"],\"text/sgml\":[\"sgml\",\"sgm\"],\"text/shex\":[\"shex\"],\"text/slim\":[\"slim\",\"slm\"],\"text/spdx\":[\"spdx\"],\"text/stylus\":[\"stylus\",\"styl\"],\"text/tab-separated-values\":[\"tsv\"],\"text/troff\":[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"],\"text/turtle\":[\"ttl\"],\"text/uri-list\":[\"uri\",\"uris\",\"urls\"],\"text/vcard\":[\"vcard\"],\"text/vtt\":[\"vtt\"],\"text/xml\":[\"*xml\"],\"text/yaml\":[\"yaml\",\"yml\"],\"video/3gpp\":[\"3gp\",\"3gpp\"],\"video/3gpp2\":[\"3g2\"],\"video/h261\":[\"h261\"],\"video/h263\":[\"h263\"],\"video/h264\":[\"h264\"],\"video/iso.segment\":[\"m4s\"],\"video/jpeg\":[\"jpgv\"],\"video/jpm\":[\"*jpm\",\"jpgm\"],\"video/mj2\":[\"mj2\",\"mjp2\"],\"video/mp2t\":[\"ts\"],\"video/mp4\":[\"mp4\",\"mp4v\",\"mpg4\"],\"video/mpeg\":[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"],\"video/ogg\":[\"ogv\"],\"video/quicktime\":[\"qt\",\"mov\"],\"video/webm\":[\"webm\"]};","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","var hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar $match = String.prototype.match;\nvar $slice = String.prototype.slice;\nvar $replace = String.prototype.replace;\nvar $toUpperCase = String.prototype.toUpperCase;\nvar $toLowerCase = String.prototype.toLowerCase;\nvar $test = RegExp.prototype.test;\nvar $concat = Array.prototype.concat;\nvar $join = Array.prototype.join;\nvar $arrSlice = Array.prototype.slice;\nvar $floor = Math.floor;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\n// ie, `has-tostringtag/shams\nvar toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')\n    ? Symbol.toStringTag\n    : null;\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n        ? function (O) {\n            return O.__proto__; // eslint-disable-line no-proto\n        }\n        : null\n);\n\nfunction addNumericSeparator(num, str) {\n    if (\n        num === Infinity\n        || num === -Infinity\n        || num !== num\n        || (num && num > -1000 && num < 1000)\n        || $test.call(/e/, str)\n    ) {\n        return str;\n    }\n    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;\n    if (typeof num === 'number') {\n        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)\n        if (int !== num) {\n            var intStr = String(int);\n            var dec = $slice.call(str, intStr.length + 1);\n            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');\n        }\n    }\n    return $replace.call(str, sepRegex, '$&_');\n}\n\nvar utilInspect = require('./util.inspect');\nvar inspectCustom = utilInspect.custom;\nvar inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n    var opts = options || {};\n\n    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {\n        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n    }\n    if (\n        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n            : opts.maxStringLength !== null\n        )\n    ) {\n        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n    }\n    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n        throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n    }\n\n    if (\n        has(opts, 'indent')\n        && opts.indent !== null\n        && opts.indent !== '\\t'\n        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n    ) {\n        throw new TypeError('option \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n    }\n    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {\n        throw new TypeError('option \"numericSeparator\", if provided, must be `true` or `false`');\n    }\n    var numericSeparator = opts.numericSeparator;\n\n    if (typeof obj === 'undefined') {\n        return 'undefined';\n    }\n    if (obj === null) {\n        return 'null';\n    }\n    if (typeof obj === 'boolean') {\n        return obj ? 'true' : 'false';\n    }\n\n    if (typeof obj === 'string') {\n        return inspectString(obj, opts);\n    }\n    if (typeof obj === 'number') {\n        if (obj === 0) {\n            return Infinity / obj > 0 ? '0' : '-0';\n        }\n        var str = String(obj);\n        return numericSeparator ? addNumericSeparator(obj, str) : str;\n    }\n    if (typeof obj === 'bigint') {\n        var bigIntStr = String(obj) + 'n';\n        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;\n    }\n\n    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n    if (typeof depth === 'undefined') { depth = 0; }\n    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n        return isArray(obj) ? '[Array]' : '[Object]';\n    }\n\n    var indent = getIndent(opts, depth);\n\n    if (typeof seen === 'undefined') {\n        seen = [];\n    } else if (indexOf(seen, obj) >= 0) {\n        return '[Circular]';\n    }\n\n    function inspect(value, from, noIndent) {\n        if (from) {\n            seen = $arrSlice.call(seen);\n            seen.push(from);\n        }\n        if (noIndent) {\n            var newOpts = {\n                depth: opts.depth\n            };\n            if (has(opts, 'quoteStyle')) {\n                newOpts.quoteStyle = opts.quoteStyle;\n            }\n            return inspect_(value, newOpts, depth + 1, seen);\n        }\n        return inspect_(value, opts, depth + 1, seen);\n    }\n\n    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable\n        var name = nameOf(obj);\n        var keys = arrObjKeys(obj, inspect);\n        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');\n    }\n    if (isSymbol(obj)) {\n        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n    }\n    if (isElement(obj)) {\n        var s = '<' + $toLowerCase.call(String(obj.nodeName));\n        var attrs = obj.attributes || [];\n        for (var i = 0; i < attrs.length; i++) {\n            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n        }\n        s += '>';\n        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';\n        return s;\n    }\n    if (isArray(obj)) {\n        if (obj.length === 0) { return '[]'; }\n        var xs = arrObjKeys(obj, inspect);\n        if (indent && !singleLineValues(xs)) {\n            return '[' + indentedJoin(xs, indent) + ']';\n        }\n        return '[ ' + $join.call(xs, ', ') + ' ]';\n    }\n    if (isError(obj)) {\n        var parts = arrObjKeys(obj, inspect);\n        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {\n            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';\n        }\n        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';\n    }\n    if (typeof obj === 'object' && customInspect) {\n        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {\n            return utilInspect(obj, { depth: maxDepth - depth });\n        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n            return obj.inspect();\n        }\n    }\n    if (isMap(obj)) {\n        var mapParts = [];\n        if (mapForEach) {\n            mapForEach.call(obj, function (value, key) {\n                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n            });\n        }\n        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n    }\n    if (isSet(obj)) {\n        var setParts = [];\n        if (setForEach) {\n            setForEach.call(obj, function (value) {\n                setParts.push(inspect(value, obj));\n            });\n        }\n        return collectionOf('Set', setSize.call(obj), setParts, indent);\n    }\n    if (isWeakMap(obj)) {\n        return weakCollectionOf('WeakMap');\n    }\n    if (isWeakSet(obj)) {\n        return weakCollectionOf('WeakSet');\n    }\n    if (isWeakRef(obj)) {\n        return weakCollectionOf('WeakRef');\n    }\n    if (isNumber(obj)) {\n        return markBoxed(inspect(Number(obj)));\n    }\n    if (isBigInt(obj)) {\n        return markBoxed(inspect(bigIntValueOf.call(obj)));\n    }\n    if (isBoolean(obj)) {\n        return markBoxed(booleanValueOf.call(obj));\n    }\n    if (isString(obj)) {\n        return markBoxed(inspect(String(obj)));\n    }\n    if (!isDate(obj) && !isRegExp(obj)) {\n        var ys = arrObjKeys(obj, inspect);\n        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n        var protoTag = obj instanceof Object ? '' : 'null prototype';\n        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';\n        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');\n        if (ys.length === 0) { return tag + '{}'; }\n        if (indent) {\n            return tag + '{' + indentedJoin(ys, indent) + '}';\n        }\n        return tag + '{ ' + $join.call(ys, ', ') + ' }';\n    }\n    return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n    return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n    return $replace.call(String(s), /\"/g, '&quot;');\n}\n\nfunction isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\n// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\nfunction isSymbol(obj) {\n    if (hasShammedSymbols) {\n        return obj && typeof obj === 'object' && obj instanceof Symbol;\n    }\n    if (typeof obj === 'symbol') {\n        return true;\n    }\n    if (!obj || typeof obj !== 'object' || !symToString) {\n        return false;\n    }\n    try {\n        symToString.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isBigInt(obj) {\n    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n        return false;\n    }\n    try {\n        bigIntValueOf.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\nfunction has(obj, key) {\n    return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n    return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n    if (f.name) { return f.name; }\n    var m = $match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n    if (m) { return m[1]; }\n    return null;\n}\n\nfunction indexOf(xs, x) {\n    if (xs.indexOf) { return xs.indexOf(x); }\n    for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x) { return i; }\n    }\n    return -1;\n}\n\nfunction isMap(x) {\n    if (!mapSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        mapSize.call(x);\n        try {\n            setSize.call(x);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof Map; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakMap(x) {\n    if (!weakMapHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakMapHas.call(x, weakMapHas);\n        try {\n            weakSetHas.call(x, weakSetHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakRef(x) {\n    if (!weakRefDeref || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakRefDeref.call(x);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isSet(x) {\n    if (!setSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        setSize.call(x);\n        try {\n            mapSize.call(x);\n        } catch (m) {\n            return true;\n        }\n        return x instanceof Set; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakSet(x) {\n    if (!weakSetHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakSetHas.call(x, weakSetHas);\n        try {\n            weakMapHas.call(x, weakMapHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isElement(x) {\n    if (!x || typeof x !== 'object') { return false; }\n    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n        return true;\n    }\n    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n    if (str.length > opts.maxStringLength) {\n        var remaining = str.length - opts.maxStringLength;\n        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;\n    }\n    // eslint-disable-next-line no-control-regex\n    var s = $replace.call($replace.call(str, /(['\\\\])/g, '\\\\$1'), /[\\x00-\\x1f]/g, lowbyte);\n    return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n    var n = c.charCodeAt(0);\n    var x = {\n        8: 'b',\n        9: 't',\n        10: 'n',\n        12: 'f',\n        13: 'r'\n    }[n];\n    if (x) { return '\\\\' + x; }\n    return '\\\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));\n}\n\nfunction markBoxed(str) {\n    return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n    return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');\n    return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n    for (var i = 0; i < xs.length; i++) {\n        if (indexOf(xs[i], '\\n') >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getIndent(opts, depth) {\n    var baseIndent;\n    if (opts.indent === '\\t') {\n        baseIndent = '\\t';\n    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n        baseIndent = $join.call(Array(opts.indent + 1), ' ');\n    } else {\n        return null;\n    }\n    return {\n        base: baseIndent,\n        prev: $join.call(Array(depth + 1), baseIndent)\n    };\n}\n\nfunction indentedJoin(xs, indent) {\n    if (xs.length === 0) { return ''; }\n    var lineJoiner = '\\n' + indent.prev + indent.base;\n    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n    var isArr = isArray(obj);\n    var xs = [];\n    if (isArr) {\n        xs.length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n        }\n    }\n    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n    var symMap;\n    if (hasShammedSymbols) {\n        symMap = {};\n        for (var k = 0; k < syms.length; k++) {\n            symMap['$' + syms[k]] = syms[k];\n        }\n    }\n\n    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        } else if ($test.call(/[^\\w$]/, key)) {\n            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n        } else {\n            xs.push(key + ': ' + inspect(obj[key], obj));\n        }\n    }\n    if (typeof gOPS === 'function') {\n        for (var j = 0; j < syms.length; j++) {\n            if (isEnumerable.call(obj, syms[j])) {\n                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n            }\n        }\n    }\n    return xs;\n}\n","module.exports = require('util').inspect;\n","var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n","'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n","'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n","'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = {};\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n            val = utils.maybeMap(\n                parseArrayValue(part.slice(pos + 1), options),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(val);\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        if (has.call(obj, key)) {\n            obj[key] = utils.combine(obj[key], val);\n        } else {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var index = parseInt(cleanRoot, 10);\n            if (!options.parseArrays && cleanRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== cleanRoot\n                && String(index) === cleanRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (cleanRoot !== '__proto__') {\n                obj[cleanRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    return {\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n","'use strict';\n\nvar getSideChannel = require('side-channel');\nvar utils = require('./utils');\nvar formats = require('./formats');\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar split = String.prototype.split;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    commaRoundTrip,\n    strictNullHandling,\n    skipNulls,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            if (generateArrayPrefix === 'comma' && encodeValuesOnly) {\n                var valuesArray = split.call(String(obj), ',');\n                var valuesJoined = '';\n                for (var i = 0; i < valuesArray.length; ++i) {\n                    valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults.encoder, charset, 'value', format));\n                }\n                return [formatter(keyValue) + (commaRoundTrip && isArray(obj) && valuesArray.length === 1 ? '[]' : '') + '=' + valuesJoined];\n            }\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix\n            : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            commaRoundTrip,\n            strictNullHandling,\n            skipNulls,\n            encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var arrayFormat;\n    if (opts && opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if (opts && 'indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = 'indices';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n    if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n    var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            commaRoundTrip,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n","'use strict';\n\nvar formats = require('./formats');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var i = 0; i < string.length; ++i) {\n        var c = string.charCodeAt(i);\n\n        if (\n            c === 0x2D // -\n            || c === 0x2E // .\n            || c === 0x5F // _\n            || c === 0x7E // ~\n            || (c >= 0x30 && c <= 0x39) // 0-9\n            || (c >= 0x41 && c <= 0x5A) // a-z\n            || (c >= 0x61 && c <= 0x7A) // A-Z\n            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n        ) {\n            out += string.charAt(i);\n            continue;\n        }\n\n        if (c < 0x80) {\n            out = out + hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        i += 1;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));\n        /* eslint operator-linebreak: [2, \"before\"] */\n        out += hexTable[0xF0 | (c >> 18)]\n            + hexTable[0x80 | ((c >> 12) & 0x3F)]\n            + hexTable[0x80 | ((c >> 6) & 0x3F)]\n            + hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n","const ANY = Symbol('SemVer ANY')\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY () {\n    return ANY\n  }\n\n  constructor (comp, options) {\n    options = parseOptions(options)\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp\n      } else {\n        comp = comp.value\n      }\n    }\n\n    debug('comparator', comp, options)\n    this.options = options\n    this.loose = !!options.loose\n    this.parse(comp)\n\n    if (this.semver === ANY) {\n      this.value = ''\n    } else {\n      this.value = this.operator + this.semver.version\n    }\n\n    debug('comp', this)\n  }\n\n  parse (comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const m = comp.match(r)\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`)\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : ''\n    if (this.operator === '=') {\n      this.operator = ''\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose)\n    }\n  }\n\n  toString () {\n    return this.value\n  }\n\n  test (version) {\n    debug('Comparator.test', version, this.options.loose)\n\n    if (this.semver === ANY || version === ANY) {\n      return true\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options)\n  }\n\n  intersects (comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required')\n    }\n\n    if (!options || typeof options !== 'object') {\n      options = {\n        loose: !!options,\n        includePrerelease: false,\n      }\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true\n      }\n      return new Range(comp.value, options).test(this.value)\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true\n      }\n      return new Range(this.value, options).test(comp.semver)\n    }\n\n    const sameDirectionIncreasing =\n      (this.operator === '>=' || this.operator === '>') &&\n      (comp.operator === '>=' || comp.operator === '>')\n    const sameDirectionDecreasing =\n      (this.operator === '<=' || this.operator === '<') &&\n      (comp.operator === '<=' || comp.operator === '<')\n    const sameSemVer = this.semver.version === comp.semver.version\n    const differentDirectionsInclusive =\n      (this.operator === '>=' || this.operator === '<=') &&\n      (comp.operator === '>=' || comp.operator === '<=')\n    const oppositeDirectionsLessThan =\n      cmp(this.semver, '<', comp.semver, options) &&\n      (this.operator === '>=' || this.operator === '>') &&\n        (comp.operator === '<=' || comp.operator === '<')\n    const oppositeDirectionsGreaterThan =\n      cmp(this.semver, '>', comp.semver, options) &&\n      (this.operator === '<=' || this.operator === '<') &&\n        (comp.operator === '>=' || comp.operator === '>')\n\n    return (\n      sameDirectionIncreasing ||\n      sameDirectionDecreasing ||\n      (sameSemVer && differentDirectionsInclusive) ||\n      oppositeDirectionsLessThan ||\n      oppositeDirectionsGreaterThan\n    )\n  }\n}\n\nmodule.exports = Comparator\n\nconst parseOptions = require('../internal/parse-options')\nconst { re, t } = require('../internal/re')\nconst cmp = require('../functions/cmp')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst Range = require('./range')\n","// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.format()\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First, split based on boolean or ||\n    this.raw = range\n    this.set = range\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.format()\n  }\n\n  format () {\n    this.range = this.set\n      .map((comps) => {\n        return comps.join(' ').trim()\n      })\n      .join('||')\n      .trim()\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    range = range.trim()\n\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts = Object.keys(this.options).join(',')\n    const memoKey = `parseRange:${memoOpts}:${range}`\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n\n    // normalize spaces\n    range = range.split(/\\s+/).join(' ')\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\nmodule.exports = Range\n\nconst LRU = require('lru-cache')\nconst cache = new LRU({ max: 1000 })\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = require('../internal/re')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceTilde(c, options)\n  }).join(' ')\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceCaret(c, options)\n  }).join(' ')\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map((c) => {\n    return replaceXRange(c, options)\n  }).join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp.trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return (`${from} ${to}`).trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n","const debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier)\n        this.inc('pre', identifier)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier)\n        }\n        this.inc('pre', identifier)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre':\n        if (this.prerelease.length === 0) {\n          this.prerelease = [0]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            this.prerelease.push(0)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = [identifier, 0]\n            }\n          } else {\n            this.prerelease = [identifier, 0]\n          }\n        }\n        break\n\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.format()\n    this.raw = this.version\n    return this\n  }\n}\n\nmodule.exports = SemVer\n","const parse = require('./parse')\nconst clean = (version, options) => {\n  const s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\nmodule.exports = clean\n","const eq = require('./eq')\nconst neq = require('./neq')\nconst gt = require('./gt')\nconst gte = require('./gte')\nconst lt = require('./lt')\nconst lte = require('./lte')\n\nconst cmp = (a, op, b, loose) => {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError(`Invalid operator: ${op}`)\n  }\n}\nmodule.exports = cmp\n","const SemVer = require('../classes/semver')\nconst parse = require('./parse')\nconst { re, t } = require('../internal/re')\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  let match = null\n  if (!options.rtl) {\n    match = version.match(re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    let next\n    while ((next = re[t.COERCERTL].exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    re[t.COERCERTL].lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  return parse(`${match[2]}.${match[3] || '0'}.${match[4] || '0'}`, options)\n}\nmodule.exports = coerce\n","const SemVer = require('../classes/semver')\nconst compareBuild = (a, b, loose) => {\n  const versionA = new SemVer(a, loose)\n  const versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\nmodule.exports = compareBuild\n","const compare = require('./compare')\nconst compareLoose = (a, b) => compare(a, b, true)\nmodule.exports = compareLoose\n","const SemVer = require('../classes/semver')\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n","const parse = require('./parse')\nconst eq = require('./eq')\n\nconst diff = (version1, version2) => {\n  if (eq(version1, version2)) {\n    return null\n  } else {\n    const v1 = parse(version1)\n    const v2 = parse(version2)\n    const hasPre = v1.prerelease.length || v2.prerelease.length\n    const prefix = hasPre ? 'pre' : ''\n    const defaultResult = hasPre ? 'prerelease' : ''\n    for (const key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n}\nmodule.exports = diff\n","const compare = require('./compare')\nconst eq = (a, b, loose) => compare(a, b, loose) === 0\nmodule.exports = eq\n","const compare = require('./compare')\nconst gt = (a, b, loose) => compare(a, b, loose) > 0\nmodule.exports = gt\n","const compare = require('./compare')\nconst gte = (a, b, loose) => compare(a, b, loose) >= 0\nmodule.exports = gte\n","const SemVer = require('../classes/semver')\n\nconst inc = (version, release, options, identifier) => {\n  if (typeof (options) === 'string') {\n    identifier = options\n    options = undefined\n  }\n\n  try {\n    return new SemVer(\n      version instanceof SemVer ? version.version : version,\n      options\n    ).inc(release, identifier).version\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = inc\n","const compare = require('./compare')\nconst lt = (a, b, loose) => compare(a, b, loose) < 0\nmodule.exports = lt\n","const compare = require('./compare')\nconst lte = (a, b, loose) => compare(a, b, loose) <= 0\nmodule.exports = lte\n","const SemVer = require('../classes/semver')\nconst major = (a, loose) => new SemVer(a, loose).major\nmodule.exports = major\n","const SemVer = require('../classes/semver')\nconst minor = (a, loose) => new SemVer(a, loose).minor\nmodule.exports = minor\n","const compare = require('./compare')\nconst neq = (a, b, loose) => compare(a, b, loose) !== 0\nmodule.exports = neq\n","const { MAX_LENGTH } = require('../internal/constants')\nconst { re, t } = require('../internal/re')\nconst SemVer = require('../classes/semver')\n\nconst parseOptions = require('../internal/parse-options')\nconst parse = (version, options) => {\n  options = parseOptions(options)\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  const r = options.loose ? re[t.LOOSE] : re[t.FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nmodule.exports = parse\n","const SemVer = require('../classes/semver')\nconst patch = (a, loose) => new SemVer(a, loose).patch\nmodule.exports = patch\n","const parse = require('./parse')\nconst prerelease = (version, options) => {\n  const parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\nmodule.exports = prerelease\n","const compare = require('./compare')\nconst rcompare = (a, b, loose) => compare(b, a, loose)\nmodule.exports = rcompare\n","const compareBuild = require('./compare-build')\nconst rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))\nmodule.exports = rsort\n","const Range = require('../classes/range')\nconst satisfies = (version, range, options) => {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\nmodule.exports = satisfies\n","const compareBuild = require('./compare-build')\nconst sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))\nmodule.exports = sort\n","const parse = require('./parse')\nconst valid = (version, options) => {\n  const v = parse(version, options)\n  return v ? v.version : null\n}\nmodule.exports = valid\n","// just pre-load all the stuff that index.js lazily exports\nconst internalRe = require('./internal/re')\nconst constants = require('./internal/constants')\nconst SemVer = require('./classes/semver')\nconst identifiers = require('./internal/identifiers')\nconst parse = require('./functions/parse')\nconst valid = require('./functions/valid')\nconst clean = require('./functions/clean')\nconst inc = require('./functions/inc')\nconst diff = require('./functions/diff')\nconst major = require('./functions/major')\nconst minor = require('./functions/minor')\nconst patch = require('./functions/patch')\nconst prerelease = require('./functions/prerelease')\nconst compare = require('./functions/compare')\nconst rcompare = require('./functions/rcompare')\nconst compareLoose = require('./functions/compare-loose')\nconst compareBuild = require('./functions/compare-build')\nconst sort = require('./functions/sort')\nconst rsort = require('./functions/rsort')\nconst gt = require('./functions/gt')\nconst lt = require('./functions/lt')\nconst eq = require('./functions/eq')\nconst neq = require('./functions/neq')\nconst gte = require('./functions/gte')\nconst lte = require('./functions/lte')\nconst cmp = require('./functions/cmp')\nconst coerce = require('./functions/coerce')\nconst Comparator = require('./classes/comparator')\nconst Range = require('./classes/range')\nconst satisfies = require('./functions/satisfies')\nconst toComparators = require('./ranges/to-comparators')\nconst maxSatisfying = require('./ranges/max-satisfying')\nconst minSatisfying = require('./ranges/min-satisfying')\nconst minVersion = require('./ranges/min-version')\nconst validRange = require('./ranges/valid')\nconst outside = require('./ranges/outside')\nconst gtr = require('./ranges/gtr')\nconst ltr = require('./ranges/ltr')\nconst intersects = require('./ranges/intersects')\nconst simplifyRange = require('./ranges/simplify')\nconst subset = require('./ranges/subset')\nmodule.exports = {\n  parse,\n  valid,\n  clean,\n  inc,\n  diff,\n  major,\n  minor,\n  patch,\n  prerelease,\n  compare,\n  rcompare,\n  compareLoose,\n  compareBuild,\n  sort,\n  rsort,\n  gt,\n  lt,\n  eq,\n  neq,\n  gte,\n  lte,\n  cmp,\n  coerce,\n  Comparator,\n  Range,\n  satisfies,\n  toComparators,\n  maxSatisfying,\n  minSatisfying,\n  minVersion,\n  validRange,\n  outside,\n  gtr,\n  ltr,\n  intersects,\n  simplifyRange,\n  subset,\n  SemVer,\n  re: internalRe.re,\n  src: internalRe.src,\n  tokens: internalRe.t,\n  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\n  compareIdentifiers: identifiers.compareIdentifiers,\n  rcompareIdentifiers: identifiers.rcompareIdentifiers,\n}\n","// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\nmodule.exports = {\n  SEMVER_SPEC_VERSION,\n  MAX_LENGTH,\n  MAX_SAFE_INTEGER,\n  MAX_SAFE_COMPONENT_LENGTH,\n}\n","const debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n","const numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers,\n}\n","// parse out just the options we care about so we always get a consistent\n// obj with keys in a consistent order.\nconst opts = ['includePrerelease', 'loose', 'rtl']\nconst parseOptions = options =>\n  !options ? {}\n  : typeof options !== 'object' ? { loose: true }\n  : opts.filter(k => options[k]).reduce((o, k) => {\n    o[k] = true\n    return o\n  }, {})\nmodule.exports = parseOptions\n","const { MAX_SAFE_COMPONENT_LENGTH } = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst createToken = (name, value, isGlobal) => {\n  const index = R++\n  debug(name, index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*')\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\n","// Determine if version is greater than all the versions possible in the range.\nconst outside = require('./outside')\nconst gtr = (version, range, options) => outside(version, range, '>', options)\nmodule.exports = gtr\n","const Range = require('../classes/range')\nconst intersects = (r1, r2, options) => {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\nmodule.exports = intersects\n","const outside = require('./outside')\n// Determine if version is less than all the versions possible in the range\nconst ltr = (version, range, options) => outside(version, range, '<', options)\nmodule.exports = ltr\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\n\nconst maxSatisfying = (versions, range, options) => {\n  let max = null\n  let maxSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\nmodule.exports = maxSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst minSatisfying = (versions, range, options) => {\n  let min = null\n  let minSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\nmodule.exports = minSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst gt = require('../functions/gt')\n\nconst minVersion = (range, loose) => {\n  range = new Range(range, loose)\n\n  let minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let setMin = null\n    comparators.forEach((comparator) => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!setMin || gt(compver, setMin)) {\n            setMin = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\n      }\n    })\n    if (setMin && (!minver || gt(minver, setMin))) {\n      minver = setMin\n    }\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\nmodule.exports = minVersion\n","const SemVer = require('../classes/semver')\nconst Comparator = require('../classes/comparator')\nconst { ANY } = Comparator\nconst Range = require('../classes/range')\nconst satisfies = require('../functions/satisfies')\nconst gt = require('../functions/gt')\nconst lt = require('../functions/lt')\nconst lte = require('../functions/lte')\nconst gte = require('../functions/gte')\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  let gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let high = null\n    let low = null\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = outside\n","// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let first = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!first) {\n        first = version\n      }\n    } else {\n      if (prev) {\n        set.push([first, prev])\n      }\n      prev = null\n      first = null\n    }\n  }\n  if (first) {\n    set.push([first, null])\n  }\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max) {\n      ranges.push(min)\n    } else if (!max && min === v[0]) {\n      ranges.push('*')\n    } else if (!max) {\n      ranges.push(`>=${min}`)\n    } else if (min === v[0]) {\n      ranges.push(`<=${max}`)\n    } else {\n      ranges.push(`${min} - ${max}`)\n    }\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n","const Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = [new Comparator('>=0.0.0-0')]\n    } else {\n      sub = [new Comparator('>=0.0.0')]\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = [new Comparator('>=0.0.0')]\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n","const Range = require('../classes/range')\n\n// Mostly just for testing and legacy API reasons\nconst toComparators = (range, options) =>\n  new Range(range, options).set\n    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))\n\nmodule.exports = toComparators\n","const Range = require('../classes/range')\nconst validRange = (range, options) => {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = validRange\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\nvar $Map = GetIntrinsic('%Map%', true);\n\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\nvar $mapGet = callBound('Map.prototype.get', true);\nvar $mapSet = callBound('Map.prototype.set', true);\nvar $mapHas = callBound('Map.prototype.has', true);\n\n/*\n * This function traverses the list returning the node corresponding to the\n * given key.\n *\n * That node is also moved to the head of the list, so that if it's accessed\n * again we don't need to traverse the whole list. By doing so, all the recently\n * used nodes can be accessed relatively quickly.\n */\nvar listGetNode = function (list, key) { // eslint-disable-line consistent-return\n\tfor (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {\n\t\tif (curr.key === key) {\n\t\t\tprev.next = curr.next;\n\t\t\tcurr.next = list.next;\n\t\t\tlist.next = curr; // eslint-disable-line no-param-reassign\n\t\t\treturn curr;\n\t\t}\n\t}\n};\n\nvar listGet = function (objects, key) {\n\tvar node = listGetNode(objects, key);\n\treturn node && node.value;\n};\nvar listSet = function (objects, key, value) {\n\tvar node = listGetNode(objects, key);\n\tif (node) {\n\t\tnode.value = value;\n\t} else {\n\t\t// Prepend the new node to the beginning of the list\n\t\tobjects.next = { // eslint-disable-line no-param-reassign\n\t\t\tkey: key,\n\t\t\tnext: objects.next,\n\t\t\tvalue: value\n\t\t};\n\t}\n};\nvar listHas = function (objects, key) {\n\treturn !!listGetNode(objects, key);\n};\n\nmodule.exports = function getSideChannel() {\n\tvar $wm;\n\tvar $m;\n\tvar $o;\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapGet($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapGet($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listGet($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapHas($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapHas($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listHas($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif (!$wm) {\n\t\t\t\t\t$wm = new $WeakMap();\n\t\t\t\t}\n\t\t\t\t$weakMapSet($wm, key, value);\n\t\t\t} else if ($Map) {\n\t\t\t\tif (!$m) {\n\t\t\t\t\t$m = new $Map();\n\t\t\t\t}\n\t\t\t\t$mapSet($m, key, value);\n\t\t\t} else {\n\t\t\t\tif (!$o) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Initialize the linked list as an empty node, so that we don't have\n\t\t\t\t\t * to special-case handling of the first node: we can always refer to\n\t\t\t\t\t * it as (previous node).next, instead of something like (list).head\n\t\t\t\t\t */\n\t\t\t\t\t$o = { key: {}, next: null };\n\t\t\t\t}\n\t\t\t\tlistSet($o, key, value);\n\t\t\t}\n\t\t}\n\t};\n\treturn channel;\n};\n","\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction Agent() {\n  this._defaults = [];\n}\nfor (var _i = 0, _arr = ['use', 'on', 'once', 'set', 'query', 'type', 'accept', 'auth', 'withCredentials', 'sortQuery', 'retry', 'ok', 'redirects', 'timeout', 'buffer', 'serialize', 'parse', 'ca', 'key', 'pfx', 'cert', 'disableTLSCerts']; _i < _arr.length; _i++) {\n  const fn = _arr[_i];\n  // Default setting for all requests from this agent\n  Agent.prototype[fn] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._defaults.push({\n      fn,\n      args\n    });\n    return this;\n  };\n}\nAgent.prototype._setDefaults = function (request) {\n  var _iterator = _createForOfIteratorHelper(this._defaults),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      const def = _step.value;\n      request[def.fn](...def.args);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\nmodule.exports = Agent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBZ2VudCIsIl9kZWZhdWx0cyIsImZuIiwicHJvdG90eXBlIiwiYXJncyIsInB1c2giLCJfc2V0RGVmYXVsdHMiLCJyZXF1ZXN0IiwiZGVmIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9hZ2VudC1iYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIEFnZW50KCkge1xuICB0aGlzLl9kZWZhdWx0cyA9IFtdO1xufVxuXG5mb3IgKGNvbnN0IGZuIG9mIFtcbiAgJ3VzZScsXG4gICdvbicsXG4gICdvbmNlJyxcbiAgJ3NldCcsXG4gICdxdWVyeScsXG4gICd0eXBlJyxcbiAgJ2FjY2VwdCcsXG4gICdhdXRoJyxcbiAgJ3dpdGhDcmVkZW50aWFscycsXG4gICdzb3J0UXVlcnknLFxuICAncmV0cnknLFxuICAnb2snLFxuICAncmVkaXJlY3RzJyxcbiAgJ3RpbWVvdXQnLFxuICAnYnVmZmVyJyxcbiAgJ3NlcmlhbGl6ZScsXG4gICdwYXJzZScsXG4gICdjYScsXG4gICdrZXknLFxuICAncGZ4JyxcbiAgJ2NlcnQnLFxuICAnZGlzYWJsZVRMU0NlcnRzJ1xuXSkge1xuICAvLyBEZWZhdWx0IHNldHRpbmcgZm9yIGFsbCByZXF1ZXN0cyBmcm9tIHRoaXMgYWdlbnRcbiAgQWdlbnQucHJvdG90eXBlW2ZuXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgdGhpcy5fZGVmYXVsdHMucHVzaCh7IGZuLCBhcmdzIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xufVxuXG5BZ2VudC5wcm90b3R5cGUuX3NldERlZmF1bHRzID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgZm9yIChjb25zdCBkZWYgb2YgdGhpcy5fZGVmYXVsdHMpIHtcbiAgICByZXF1ZXN0W2RlZi5mbl0oLi4uZGVmLmFyZ3MpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFnZW50O1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLEtBQUssR0FBRztFQUNmLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEVBQUU7QUFDckI7QUFFQSx3QkFBaUIsQ0FDZixLQUFLLEVBQ0wsSUFBSSxFQUNKLE1BQU0sRUFDTixLQUFLLEVBQ0wsT0FBTyxFQUNQLE1BQU0sRUFDTixRQUFRLEVBQ1IsTUFBTSxFQUNOLGlCQUFpQixFQUNqQixXQUFXLEVBQ1gsT0FBTyxFQUNQLElBQUksRUFDSixXQUFXLEVBQ1gsU0FBUyxFQUNULFFBQVEsRUFDUixXQUFXLEVBQ1gsT0FBTyxFQUNQLElBQUksRUFDSixLQUFLLEVBQ0wsS0FBSyxFQUNMLE1BQU0sRUFDTixpQkFBaUIsQ0FDbEIsMEJBQUU7RUF2QkUsTUFBTUMsRUFBRTtFQXdCWDtFQUNBRixLQUFLLENBQUNHLFNBQVMsQ0FBQ0QsRUFBRSxDQUFDLEdBQUcsWUFBbUI7SUFBQSxrQ0FBTkUsSUFBSTtNQUFKQSxJQUFJO0lBQUE7SUFDckMsSUFBSSxDQUFDSCxTQUFTLENBQUNJLElBQUksQ0FBQztNQUFFSCxFQUFFO01BQUVFO0lBQUssQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sSUFBSTtFQUNiLENBQUM7QUFDSDtBQUVBSixLQUFLLENBQUNHLFNBQVMsQ0FBQ0csWUFBWSxHQUFHLFVBQVVDLE9BQU8sRUFBRTtFQUFBLDJDQUM5QixJQUFJLENBQUNOLFNBQVM7SUFBQTtFQUFBO0lBQWhDLG9EQUFrQztNQUFBLE1BQXZCTyxHQUFHO01BQ1pELE9BQU8sQ0FBQ0MsR0FBRyxDQUFDTixFQUFFLENBQUMsQ0FBQyxHQUFHTSxHQUFHLENBQUNKLElBQUksQ0FBQztJQUM5QjtFQUFDO0lBQUE7RUFBQTtJQUFBO0VBQUE7QUFDSCxDQUFDO0FBRURLLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVixLQUFLIn0=","\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * Module dependencies.\n */\n\n// eslint-disable-next-line node/no-deprecated-api\nconst _require = require('url'),\n  parse = _require.parse;\nconst _require2 = require('cookiejar'),\n  CookieJar = _require2.CookieJar;\nconst _require3 = require('cookiejar'),\n  CookieAccessInfo = _require3.CookieAccessInfo;\nconst methods = require('methods');\nconst request = require('../..');\nconst AgentBase = require('../agent-base');\n\n/**\n * Expose `Agent`.\n */\n\nmodule.exports = Agent;\n\n/**\n * Initialize a new `Agent`.\n *\n * @api public\n */\n\nfunction Agent(options) {\n  if (!(this instanceof Agent)) {\n    return new Agent(options);\n  }\n  AgentBase.call(this);\n  this.jar = new CookieJar();\n  if (options) {\n    if (options.ca) {\n      this.ca(options.ca);\n    }\n    if (options.key) {\n      this.key(options.key);\n    }\n    if (options.pfx) {\n      this.pfx(options.pfx);\n    }\n    if (options.cert) {\n      this.cert(options.cert);\n    }\n    if (options.rejectUnauthorized === false) {\n      this.disableTLSCerts();\n    }\n  }\n}\nAgent.prototype = Object.create(AgentBase.prototype);\n\n/**\n * Save the cookies in the given `res` to\n * the agent's cookie jar for persistence.\n *\n * @param {Response} res\n * @api private\n */\n\nAgent.prototype._saveCookies = function (res) {\n  const cookies = res.headers['set-cookie'];\n  if (cookies) {\n    var _res$request;\n    const url = parse(((_res$request = res.request) === null || _res$request === void 0 ? void 0 : _res$request.url) || '');\n    this.jar.setCookies(cookies, url.hostname, url.pathname);\n  }\n};\n\n/**\n * Attach cookies when available to the given `req`.\n *\n * @param {Request} req\n * @api private\n */\n\nAgent.prototype._attachCookies = function (request_) {\n  const url = parse(request_.url);\n  const access = new CookieAccessInfo(url.hostname, url.pathname, url.protocol === 'https:');\n  const cookies = this.jar.getCookies(access).toValueString();\n  request_.cookies = cookies;\n};\nvar _iterator = _createForOfIteratorHelper(methods),\n  _step;\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    const name = _step.value;\n    const method = name.toUpperCase();\n    Agent.prototype[name] = function (url, fn) {\n      const request_ = new request.Request(method, url);\n      request_.on('response', this._saveCookies.bind(this));\n      request_.on('redirect', this._saveCookies.bind(this));\n      request_.on('redirect', this._attachCookies.bind(this, request_));\n      this._setDefaults(request_);\n      this._attachCookies(request_);\n      if (fn) {\n        request_.end(fn);\n      }\n      return request_;\n    };\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\nAgent.prototype.del = Agent.prototype.delete;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwicGFyc2UiLCJDb29raWVKYXIiLCJDb29raWVBY2Nlc3NJbmZvIiwibWV0aG9kcyIsInJlcXVlc3QiLCJBZ2VudEJhc2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiQWdlbnQiLCJvcHRpb25zIiwiY2FsbCIsImphciIsImNhIiwia2V5IiwicGZ4IiwiY2VydCIsInJlamVjdFVuYXV0aG9yaXplZCIsImRpc2FibGVUTFNDZXJ0cyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9zYXZlQ29va2llcyIsInJlcyIsImNvb2tpZXMiLCJoZWFkZXJzIiwidXJsIiwic2V0Q29va2llcyIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJfYXR0YWNoQ29va2llcyIsInJlcXVlc3RfIiwiYWNjZXNzIiwicHJvdG9jb2wiLCJnZXRDb29raWVzIiwidG9WYWx1ZVN0cmluZyIsIm5hbWUiLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsImZuIiwiUmVxdWVzdCIsIm9uIiwiYmluZCIsIl9zZXREZWZhdWx0cyIsImVuZCIsImRlbCIsImRlbGV0ZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlL2FnZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby1kZXByZWNhdGVkLWFwaVxuY29uc3QgeyBwYXJzZSB9ID0gcmVxdWlyZSgndXJsJyk7XG5jb25zdCB7IENvb2tpZUphciB9ID0gcmVxdWlyZSgnY29va2llamFyJyk7XG5jb25zdCB7IENvb2tpZUFjY2Vzc0luZm8gfSA9IHJlcXVpcmUoJ2Nvb2tpZWphcicpO1xuY29uc3QgbWV0aG9kcyA9IHJlcXVpcmUoJ21ldGhvZHMnKTtcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCcuLi8uLicpO1xuY29uc3QgQWdlbnRCYXNlID0gcmVxdWlyZSgnLi4vYWdlbnQtYmFzZScpO1xuXG4vKipcbiAqIEV4cG9zZSBgQWdlbnRgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQWdlbnQ7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgQWdlbnRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQWdlbnQob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQWdlbnQpKSB7XG4gICAgcmV0dXJuIG5ldyBBZ2VudChvcHRpb25zKTtcbiAgfVxuXG4gIEFnZW50QmFzZS5jYWxsKHRoaXMpO1xuICB0aGlzLmphciA9IG5ldyBDb29raWVKYXIoKTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmNhKSB7XG4gICAgICB0aGlzLmNhKG9wdGlvbnMuY2EpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmtleSkge1xuICAgICAgdGhpcy5rZXkob3B0aW9ucy5rZXkpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnBmeCkge1xuICAgICAgdGhpcy5wZngob3B0aW9ucy5wZngpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNlcnQpIHtcbiAgICAgIHRoaXMuY2VydChvcHRpb25zLmNlcnQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuZGlzYWJsZVRMU0NlcnRzKCk7XG4gICAgfVxuICB9XG59XG5cbkFnZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQWdlbnRCYXNlLnByb3RvdHlwZSk7XG5cbi8qKlxuICogU2F2ZSB0aGUgY29va2llcyBpbiB0aGUgZ2l2ZW4gYHJlc2AgdG9cbiAqIHRoZSBhZ2VudCdzIGNvb2tpZSBqYXIgZm9yIHBlcnNpc3RlbmNlLlxuICpcbiAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQWdlbnQucHJvdG90eXBlLl9zYXZlQ29va2llcyA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgY29uc3QgY29va2llcyA9IHJlcy5oZWFkZXJzWydzZXQtY29va2llJ107XG4gIGlmIChjb29raWVzKSB7XG4gICAgY29uc3QgdXJsID0gcGFyc2UocmVzLnJlcXVlc3Q/LnVybCB8fCAnJylcbiAgICB0aGlzLmphci5zZXRDb29raWVzKGNvb2tpZXMsIHVybC5ob3N0bmFtZSwgdXJsLnBhdGhuYW1lKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBdHRhY2ggY29va2llcyB3aGVuIGF2YWlsYWJsZSB0byB0aGUgZ2l2ZW4gYHJlcWAuXG4gKlxuICogQHBhcmFtIHtSZXF1ZXN0fSByZXFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkFnZW50LnByb3RvdHlwZS5fYXR0YWNoQ29va2llcyA9IGZ1bmN0aW9uIChyZXF1ZXN0Xykge1xuICBjb25zdCB1cmwgPSBwYXJzZShyZXF1ZXN0Xy51cmwpO1xuICBjb25zdCBhY2Nlc3MgPSBuZXcgQ29va2llQWNjZXNzSW5mbyhcbiAgICB1cmwuaG9zdG5hbWUsXG4gICAgdXJsLnBhdGhuYW1lLFxuICAgIHVybC5wcm90b2NvbCA9PT0gJ2h0dHBzOidcbiAgKTtcbiAgY29uc3QgY29va2llcyA9IHRoaXMuamFyLmdldENvb2tpZXMoYWNjZXNzKS50b1ZhbHVlU3RyaW5nKCk7XG4gIHJlcXVlc3RfLmNvb2tpZXMgPSBjb29raWVzO1xufTtcblxuZm9yIChjb25zdCBuYW1lIG9mIG1ldGhvZHMpIHtcbiAgY29uc3QgbWV0aG9kID0gbmFtZS50b1VwcGVyQ2FzZSgpO1xuICBBZ2VudC5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAodXJsLCBmbikge1xuICAgIGNvbnN0IHJlcXVlc3RfID0gbmV3IHJlcXVlc3QuUmVxdWVzdChtZXRob2QsIHVybCk7XG5cbiAgICByZXF1ZXN0Xy5vbigncmVzcG9uc2UnLCB0aGlzLl9zYXZlQ29va2llcy5iaW5kKHRoaXMpKTtcbiAgICByZXF1ZXN0Xy5vbigncmVkaXJlY3QnLCB0aGlzLl9zYXZlQ29va2llcy5iaW5kKHRoaXMpKTtcbiAgICByZXF1ZXN0Xy5vbigncmVkaXJlY3QnLCB0aGlzLl9hdHRhY2hDb29raWVzLmJpbmQodGhpcywgcmVxdWVzdF8pKTtcbiAgICB0aGlzLl9zZXREZWZhdWx0cyhyZXF1ZXN0Xyk7XG4gICAgdGhpcy5fYXR0YWNoQ29va2llcyhyZXF1ZXN0Xyk7XG5cbiAgICBpZiAoZm4pIHtcbiAgICAgIHJlcXVlc3RfLmVuZChmbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcXVlc3RfO1xuICB9O1xufVxuXG5BZ2VudC5wcm90b3R5cGUuZGVsID0gQWdlbnQucHJvdG90eXBlLmRlbGV0ZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBa0JBLE9BQU8sQ0FBQyxLQUFLLENBQUM7RUFBeEJDLEtBQUssWUFBTEEsS0FBSztBQUNiLGtCQUFzQkQsT0FBTyxDQUFDLFdBQVcsQ0FBQztFQUFsQ0UsU0FBUyxhQUFUQSxTQUFTO0FBQ2pCLGtCQUE2QkYsT0FBTyxDQUFDLFdBQVcsQ0FBQztFQUF6Q0csZ0JBQWdCLGFBQWhCQSxnQkFBZ0I7QUFDeEIsTUFBTUMsT0FBTyxHQUFHSixPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2xDLE1BQU1LLE9BQU8sR0FBR0wsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUNoQyxNQUFNTSxTQUFTLEdBQUdOLE9BQU8sQ0FBQyxlQUFlLENBQUM7O0FBRTFDO0FBQ0E7QUFDQTs7QUFFQU8sTUFBTSxDQUFDQyxPQUFPLEdBQUdDLEtBQUs7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxDQUFDQyxPQUFPLEVBQUU7RUFDdEIsSUFBSSxFQUFFLElBQUksWUFBWUQsS0FBSyxDQUFDLEVBQUU7SUFDNUIsT0FBTyxJQUFJQSxLQUFLLENBQUNDLE9BQU8sQ0FBQztFQUMzQjtFQUVBSixTQUFTLENBQUNLLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDcEIsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSVYsU0FBUyxFQUFFO0VBRTFCLElBQUlRLE9BQU8sRUFBRTtJQUNYLElBQUlBLE9BQU8sQ0FBQ0csRUFBRSxFQUFFO01BQ2QsSUFBSSxDQUFDQSxFQUFFLENBQUNILE9BQU8sQ0FBQ0csRUFBRSxDQUFDO0lBQ3JCO0lBRUEsSUFBSUgsT0FBTyxDQUFDSSxHQUFHLEVBQUU7TUFDZixJQUFJLENBQUNBLEdBQUcsQ0FBQ0osT0FBTyxDQUFDSSxHQUFHLENBQUM7SUFDdkI7SUFFQSxJQUFJSixPQUFPLENBQUNLLEdBQUcsRUFBRTtNQUNmLElBQUksQ0FBQ0EsR0FBRyxDQUFDTCxPQUFPLENBQUNLLEdBQUcsQ0FBQztJQUN2QjtJQUVBLElBQUlMLE9BQU8sQ0FBQ00sSUFBSSxFQUFFO01BQ2hCLElBQUksQ0FBQ0EsSUFBSSxDQUFDTixPQUFPLENBQUNNLElBQUksQ0FBQztJQUN6QjtJQUVBLElBQUlOLE9BQU8sQ0FBQ08sa0JBQWtCLEtBQUssS0FBSyxFQUFFO01BQ3hDLElBQUksQ0FBQ0MsZUFBZSxFQUFFO0lBQ3hCO0VBQ0Y7QUFDRjtBQUVBVCxLQUFLLENBQUNVLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUNmLFNBQVMsQ0FBQ2EsU0FBUyxDQUFDOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVYsS0FBSyxDQUFDVSxTQUFTLENBQUNHLFlBQVksR0FBRyxVQUFVQyxHQUFHLEVBQUU7RUFDNUMsTUFBTUMsT0FBTyxHQUFHRCxHQUFHLENBQUNFLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDekMsSUFBSUQsT0FBTyxFQUFFO0lBQUE7SUFDWCxNQUFNRSxHQUFHLEdBQUd6QixLQUFLLENBQUMsaUJBQUFzQixHQUFHLENBQUNsQixPQUFPLGlEQUFYLGFBQWFxQixHQUFHLEtBQUksRUFBRSxDQUFDO0lBQ3pDLElBQUksQ0FBQ2QsR0FBRyxDQUFDZSxVQUFVLENBQUNILE9BQU8sRUFBRUUsR0FBRyxDQUFDRSxRQUFRLEVBQUVGLEdBQUcsQ0FBQ0csUUFBUSxDQUFDO0VBQzFEO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFwQixLQUFLLENBQUNVLFNBQVMsQ0FBQ1csY0FBYyxHQUFHLFVBQVVDLFFBQVEsRUFBRTtFQUNuRCxNQUFNTCxHQUFHLEdBQUd6QixLQUFLLENBQUM4QixRQUFRLENBQUNMLEdBQUcsQ0FBQztFQUMvQixNQUFNTSxNQUFNLEdBQUcsSUFBSTdCLGdCQUFnQixDQUNqQ3VCLEdBQUcsQ0FBQ0UsUUFBUSxFQUNaRixHQUFHLENBQUNHLFFBQVEsRUFDWkgsR0FBRyxDQUFDTyxRQUFRLEtBQUssUUFBUSxDQUMxQjtFQUNELE1BQU1ULE9BQU8sR0FBRyxJQUFJLENBQUNaLEdBQUcsQ0FBQ3NCLFVBQVUsQ0FBQ0YsTUFBTSxDQUFDLENBQUNHLGFBQWEsRUFBRTtFQUMzREosUUFBUSxDQUFDUCxPQUFPLEdBQUdBLE9BQU87QUFDNUIsQ0FBQztBQUFDLDJDQUVpQnBCLE9BQU87RUFBQTtBQUFBO0VBQTFCLG9EQUE0QjtJQUFBLE1BQWpCZ0MsSUFBSTtJQUNiLE1BQU1DLE1BQU0sR0FBR0QsSUFBSSxDQUFDRSxXQUFXLEVBQUU7SUFDakM3QixLQUFLLENBQUNVLFNBQVMsQ0FBQ2lCLElBQUksQ0FBQyxHQUFHLFVBQVVWLEdBQUcsRUFBRWEsRUFBRSxFQUFFO01BQ3pDLE1BQU1SLFFBQVEsR0FBRyxJQUFJMUIsT0FBTyxDQUFDbUMsT0FBTyxDQUFDSCxNQUFNLEVBQUVYLEdBQUcsQ0FBQztNQUVqREssUUFBUSxDQUFDVSxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQ25CLFlBQVksQ0FBQ29CLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUNyRFgsUUFBUSxDQUFDVSxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQ25CLFlBQVksQ0FBQ29CLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUNyRFgsUUFBUSxDQUFDVSxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQ1gsY0FBYyxDQUFDWSxJQUFJLENBQUMsSUFBSSxFQUFFWCxRQUFRLENBQUMsQ0FBQztNQUNqRSxJQUFJLENBQUNZLFlBQVksQ0FBQ1osUUFBUSxDQUFDO01BQzNCLElBQUksQ0FBQ0QsY0FBYyxDQUFDQyxRQUFRLENBQUM7TUFFN0IsSUFBSVEsRUFBRSxFQUFFO1FBQ05SLFFBQVEsQ0FBQ2EsR0FBRyxDQUFDTCxFQUFFLENBQUM7TUFDbEI7TUFFQSxPQUFPUixRQUFRO0lBQ2pCLENBQUM7RUFDSDtBQUFDO0VBQUE7QUFBQTtFQUFBO0FBQUE7QUFFRHRCLEtBQUssQ0FBQ1UsU0FBUyxDQUFDMEIsR0FBRyxHQUFHcEMsS0FBSyxDQUFDVSxTQUFTLENBQUMyQixNQUFNIn0=","\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst Stream = require('stream');\nconst util = require('util');\nconst net = require('net');\nconst tls = require('tls');\n// eslint-disable-next-line node/no-deprecated-api\nconst _require = require('url'),\n  parse = _require.parse;\nconst process = require('process');\nconst semverGte = require('semver/functions/gte');\nlet http2;\nif (semverGte(process.version, 'v10.10.0')) http2 = require('http2');else throw new Error('superagent: this version of Node.js does not support http2');\nconst _http2$constants = http2.constants,\n  HTTP2_HEADER_PATH = _http2$constants.HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS = _http2$constants.HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_METHOD = _http2$constants.HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_AUTHORITY = _http2$constants.HTTP2_HEADER_AUTHORITY,\n  HTTP2_HEADER_HOST = _http2$constants.HTTP2_HEADER_HOST,\n  HTTP2_HEADER_SET_COOKIE = _http2$constants.HTTP2_HEADER_SET_COOKIE,\n  NGHTTP2_CANCEL = _http2$constants.NGHTTP2_CANCEL;\nfunction setProtocol(protocol) {\n  return {\n    request(options) {\n      return new Request(protocol, options);\n    }\n  };\n}\nfunction Request(protocol, options) {\n  Stream.call(this);\n  const defaultPort = protocol === 'https:' ? 443 : 80;\n  const defaultHost = 'localhost';\n  const port = options.port || defaultPort;\n  const host = options.host || defaultHost;\n  delete options.port;\n  delete options.host;\n  this.method = options.method;\n  this.path = options.path;\n  this.protocol = protocol;\n  this.host = host;\n  delete options.method;\n  delete options.path;\n  const sessionOptions = _objectSpread({}, options);\n  if (options.socketPath) {\n    sessionOptions.socketPath = options.socketPath;\n    sessionOptions.createConnection = this.createUnixConnection.bind(this);\n  }\n  this._headers = {};\n  const session = http2.connect(`${protocol}//${host}:${port}`, sessionOptions);\n  this.setHeader('host', `${host}:${port}`);\n  session.on('error', error => this.emit('error', error));\n  this.session = session;\n}\n\n/**\n * Inherit from `Stream` (which inherits from `EventEmitter`).\n */\nutil.inherits(Request, Stream);\nRequest.prototype.createUnixConnection = function (authority, options) {\n  switch (this.protocol) {\n    case 'http:':\n      return net.connect(options.socketPath);\n    case 'https:':\n      options.ALPNProtocols = ['h2'];\n      options.servername = this.host;\n      options.allowHalfOpen = true;\n      return tls.connect(options.socketPath, options);\n    default:\n      throw new Error('Unsupported protocol', this.protocol);\n  }\n};\nRequest.prototype.setNoDelay = function (bool) {\n  // We can not use setNoDelay with HTTP/2.\n  // Node 10 limits http2session.socket methods to ones safe to use with HTTP/2.\n  // See also https://nodejs.org/api/http2.html#http2_http2session_socket\n};\nRequest.prototype.getFrame = function () {\n  if (this.frame) {\n    return this.frame;\n  }\n  const method = {\n    [HTTP2_HEADER_PATH]: this.path,\n    [HTTP2_HEADER_METHOD]: this.method\n  };\n  let headers = this.mapToHttp2Header(this._headers);\n  headers = Object.assign(headers, method);\n  const frame = this.session.request(headers);\n  frame.once('response', (headers, flags) => {\n    headers = this.mapToHttpHeader(headers);\n    frame.headers = headers;\n    frame.statusCode = headers[HTTP2_HEADER_STATUS];\n    frame.status = frame.statusCode;\n    this.emit('response', frame);\n  });\n  this._headerSent = true;\n  frame.once('drain', () => this.emit('drain'));\n  frame.on('error', error => this.emit('error', error));\n  frame.on('close', () => this.session.close());\n  this.frame = frame;\n  return frame;\n};\nRequest.prototype.mapToHttpHeader = function (headers) {\n  const keys = Object.keys(headers);\n  const http2Headers = {};\n  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n    let key = _keys[_i];\n    let value = headers[key];\n    key = key.toLowerCase();\n    switch (key) {\n      case HTTP2_HEADER_SET_COOKIE:\n        value = Array.isArray(value) ? value : [value];\n        break;\n      default:\n        break;\n    }\n    http2Headers[key] = value;\n  }\n  return http2Headers;\n};\nRequest.prototype.mapToHttp2Header = function (headers) {\n  const keys = Object.keys(headers);\n  const http2Headers = {};\n  for (var _i2 = 0, _keys2 = keys; _i2 < _keys2.length; _i2++) {\n    let key = _keys2[_i2];\n    let value = headers[key];\n    key = key.toLowerCase();\n    switch (key) {\n      case HTTP2_HEADER_HOST:\n        key = HTTP2_HEADER_AUTHORITY;\n        value = /^http:\\/\\/|^https:\\/\\//.test(value) ? parse(value).host : value;\n        break;\n      default:\n        break;\n    }\n    http2Headers[key] = value;\n  }\n  return http2Headers;\n};\nRequest.prototype.setHeader = function (name, value) {\n  this._headers[name.toLowerCase()] = value;\n};\nRequest.prototype.getHeader = function (name) {\n  return this._headers[name.toLowerCase()];\n};\nRequest.prototype.write = function (data, encoding) {\n  const frame = this.getFrame();\n  return frame.write(data, encoding);\n};\nRequest.prototype.pipe = function (stream, options) {\n  const frame = this.getFrame();\n  return frame.pipe(stream, options);\n};\nRequest.prototype.end = function (data) {\n  const frame = this.getFrame();\n  frame.end(data);\n};\nRequest.prototype.abort = function (data) {\n  const frame = this.getFrame();\n  frame.close(NGHTTP2_CANCEL);\n  this.session.destroy();\n};\nexports.setProtocol = setProtocol;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * Module dependencies.\n */\n\n// eslint-disable-next-line node/no-deprecated-api\nconst _require = require('url'),\n  parse = _require.parse,\n  format = _require.format,\n  resolve = _require.resolve;\nconst Stream = require('stream');\nconst https = require('https');\nconst http = require('http');\nconst fs = require('fs');\nconst zlib = require('zlib');\nconst util = require('util');\nconst qs = require('qs');\nconst mime = require('mime');\nlet methods = require('methods');\nconst FormData = require('form-data');\nconst formidable = require('formidable');\nconst debug = require('debug')('superagent');\nconst CookieJar = require('cookiejar');\nconst semverGte = require('semver/functions/gte');\nconst safeStringify = require('fast-safe-stringify');\nconst utils = require('../utils');\nconst RequestBase = require('../request-base');\nconst _require2 = require('./unzip'),\n  unzip = _require2.unzip;\nconst Response = require('./response');\nconst mixin = utils.mixin,\n  hasOwn = utils.hasOwn;\nlet http2;\nif (semverGte(process.version, 'v10.10.0')) http2 = require('./http2wrapper');\nfunction request(method, url) {\n  // callback\n  if (typeof url === 'function') {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (arguments.length === 1) {\n    return new exports.Request('GET', method);\n  }\n  return new exports.Request(method, url);\n}\nmodule.exports = request;\nexports = module.exports;\n\n/**\n * Expose `Request`.\n */\n\nexports.Request = Request;\n\n/**\n * Expose the agent function\n */\n\nexports.agent = require('./agent');\n\n/**\n * Noop.\n */\n\nfunction noop() {}\n\n/**\n * Expose `Response`.\n */\n\nexports.Response = Response;\n\n/**\n * Define \"form\" mime type.\n */\n\nmime.define({\n  'application/x-www-form-urlencoded': ['form', 'urlencoded', 'form-data']\n}, true);\n\n/**\n * Protocol map.\n */\n\nexports.protocols = {\n  'http:': http,\n  'https:': https,\n  'http2:': http2\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nexports.serialize = {\n  'application/x-www-form-urlencoded': qs.stringify,\n  'application/json': safeStringify\n};\n\n/**\n * Default parsers.\n *\n *     superagent.parse['application/xml'] = function(res, fn){\n *       fn(null, res);\n *     };\n *\n */\n\nexports.parse = require('./parsers');\n\n/**\n * Default buffering map. Can be used to set certain\n * response types to buffer/not buffer.\n *\n *     superagent.buffer['application/xml'] = true;\n */\nexports.buffer = {};\n\n/**\n * Initialize internal header tracking properties on a request instance.\n *\n * @param {Object} req the instance\n * @api private\n */\nfunction _initHeaders(request_) {\n  request_._header = {\n    // coerces header names to lowercase\n  };\n  request_.header = {\n    // preserves header name case\n  };\n}\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String|Object} url\n * @api public\n */\n\nfunction Request(method, url) {\n  Stream.call(this);\n  if (typeof url !== 'string') url = format(url);\n  this._enableHttp2 = Boolean(process.env.HTTP2_TEST); // internal only\n  this._agent = false;\n  this._formData = null;\n  this.method = method;\n  this.url = url;\n  _initHeaders(this);\n  this.writable = true;\n  this._redirects = 0;\n  this.redirects(method === 'HEAD' ? 0 : 5);\n  this.cookies = '';\n  this.qs = {};\n  this._query = [];\n  this.qsRaw = this._query; // Unused, for backwards compatibility only\n  this._redirectList = [];\n  this._streamRequest = false;\n  this._lookup = undefined;\n  this.once('end', this.clearTimeout.bind(this));\n}\n\n/**\n * Inherit from `Stream` (which inherits from `EventEmitter`).\n * Mixin `RequestBase`.\n */\nutil.inherits(Request, Stream);\nmixin(Request.prototype, RequestBase.prototype);\n\n/**\n * Enable or Disable http2.\n *\n * Enable http2.\n *\n * ``` js\n * request.get('http://localhost/')\n *   .http2()\n *   .end(callback);\n *\n * request.get('http://localhost/')\n *   .http2(true)\n *   .end(callback);\n * ```\n *\n * Disable http2.\n *\n * ``` js\n * request = request.http2();\n * request.get('http://localhost/')\n *   .http2(false)\n *   .end(callback);\n * ```\n *\n * @param {Boolean} enable\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.http2 = function (bool) {\n  if (exports.protocols['http2:'] === undefined) {\n    throw new Error('superagent: this version of Node.js does not support http2');\n  }\n  this._enableHttp2 = bool === undefined ? true : bool;\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('http://localhost/upload')\n *   .attach('field', Buffer.from('<b>Hello world</b>'), 'hello.html')\n *   .end(callback);\n * ```\n *\n * A filename may also be used:\n *\n * ``` js\n * request.post('http://localhost/upload')\n *   .attach('files', 'image.jpg')\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {String|fs.ReadStream|Buffer} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function (field, file, options) {\n  if (file) {\n    if (this._data) {\n      throw new Error(\"superagent can't mix .send() and .attach()\");\n    }\n    let o = options || {};\n    if (typeof options === 'string') {\n      o = {\n        filename: options\n      };\n    }\n    if (typeof file === 'string') {\n      if (!o.filename) o.filename = file;\n      debug('creating `fs.ReadStream` instance for file: %s', file);\n      file = fs.createReadStream(file);\n      file.on('error', error => {\n        const formData = this._getFormData();\n        formData.emit('error', error);\n      });\n    } else if (!o.filename && file.path) {\n      o.filename = file.path;\n    }\n    this._getFormData().append(field, file, o);\n  }\n  return this;\n};\nRequest.prototype._getFormData = function () {\n  if (!this._formData) {\n    this._formData = new FormData();\n    this._formData.on('error', error => {\n      debug('FormData error', error);\n      if (this.called) {\n        // The request has already finished and the callback was called.\n        // Silently ignore the error.\n        return;\n      }\n      this.callback(error);\n      this.abort();\n    });\n  }\n  return this._formData;\n};\n\n/**\n * Gets/sets the `Agent` to use for this HTTP request. The default (if this\n * function is not called) is to opt out of connection pooling (`agent: false`).\n *\n * @param {http.Agent} agent\n * @return {http.Agent}\n * @api public\n */\n\nRequest.prototype.agent = function (agent) {\n  if (arguments.length === 0) return this._agent;\n  this._agent = agent;\n  return this;\n};\n\n/**\n * Gets/sets the `lookup` function to use custom DNS resolver.\n *\n * @param {Function} lookup\n * @return {Function}\n * @api public\n */\n\nRequest.prototype.lookup = function (lookup) {\n  if (arguments.length === 0) return this._lookup;\n  this._lookup = lookup;\n  return this;\n};\n\n/**\n * Set _Content-Type_ response header passed through `mime.getType()`.\n *\n * Examples:\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('json')\n *        .send(jsonstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/json')\n *        .send(jsonstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function (type) {\n  return this.set('Content-Type', type.includes('/') ? type : mime.getType(type));\n};\n\n/**\n * Set _Accept_ response header passed through `mime.getType()`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function (type) {\n  return this.set('Accept', type.includes('/') ? type : mime.getType(type));\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function (value) {\n  if (typeof value === 'string') {\n    this._query.push(value);\n  } else {\n    Object.assign(this.qs, value);\n  }\n  return this;\n};\n\n/**\n * Write raw `data` / `encoding` to the socket.\n *\n * @param {Buffer|String} data\n * @param {String} encoding\n * @return {Boolean}\n * @api public\n */\n\nRequest.prototype.write = function (data, encoding) {\n  const request_ = this.request();\n  if (!this._streamRequest) {\n    this._streamRequest = true;\n  }\n  return request_.write(data, encoding);\n};\n\n/**\n * Pipe the request body to `stream`.\n *\n * @param {Stream} stream\n * @param {Object} options\n * @return {Stream}\n * @api public\n */\n\nRequest.prototype.pipe = function (stream, options) {\n  this.piped = true; // HACK...\n  this.buffer(false);\n  this.end();\n  return this._pipeContinue(stream, options);\n};\nRequest.prototype._pipeContinue = function (stream, options) {\n  this.req.once('response', res => {\n    // redirect\n    if (isRedirect(res.statusCode) && this._redirects++ !== this._maxRedirects) {\n      return this._redirect(res) === this ? this._pipeContinue(stream, options) : undefined;\n    }\n    this.res = res;\n    this._emitResponse();\n    if (this._aborted) return;\n    if (this._shouldUnzip(res)) {\n      const unzipObject = zlib.createUnzip();\n      unzipObject.on('error', error => {\n        if (error && error.code === 'Z_BUF_ERROR') {\n          // unexpected end of file is ignored by browsers and curl\n          stream.emit('end');\n          return;\n        }\n        stream.emit('error', error);\n      });\n      res.pipe(unzipObject).pipe(stream, options);\n    } else {\n      res.pipe(stream, options);\n    }\n    res.once('end', () => {\n      this.emit('end');\n    });\n  });\n  return stream;\n};\n\n/**\n * Enable / disable buffering.\n *\n * @return {Boolean} [val]\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.buffer = function (value) {\n  this._buffer = value !== false;\n  return this;\n};\n\n/**\n * Redirect to `url\n *\n * @param {IncomingMessage} res\n * @return {Request} for chaining\n * @api private\n */\n\nRequest.prototype._redirect = function (res) {\n  let url = res.headers.location;\n  if (!url) {\n    return this.callback(new Error('No location header for redirect'), res);\n  }\n  debug('redirect %s -> %s', this.url, url);\n\n  // location\n  url = resolve(this.url, url);\n\n  // ensure the response is being consumed\n  // this is required for Node v0.10+\n  res.resume();\n  let headers = this.req.getHeaders ? this.req.getHeaders() : this.req._headers;\n  const changesOrigin = parse(url).host !== parse(this.url).host;\n\n  // implementation of 302 following defacto standard\n  if (res.statusCode === 301 || res.statusCode === 302) {\n    // strip Content-* related fields\n    // in case of POST etc\n    headers = utils.cleanHeader(headers, changesOrigin);\n\n    // force GET\n    this.method = this.method === 'HEAD' ? 'HEAD' : 'GET';\n\n    // clear data\n    this._data = null;\n  }\n\n  // 303 is always GET\n  if (res.statusCode === 303) {\n    // strip Content-* related fields\n    // in case of POST etc\n    headers = utils.cleanHeader(headers, changesOrigin);\n\n    // force method\n    this.method = 'GET';\n\n    // clear data\n    this._data = null;\n  }\n\n  // 307 preserves method\n  // 308 preserves method\n  delete headers.host;\n  delete this.req;\n  delete this._formData;\n\n  // remove all add header except User-Agent\n  _initHeaders(this);\n\n  // redirect\n  this._endCalled = false;\n  this.url = url;\n  this.qs = {};\n  this._query.length = 0;\n  this.set(headers);\n  this.emit('redirect', res);\n  this._redirectList.push(this.url);\n  this.end(this._callback);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * Examples:\n *\n *   .auth('tobi', 'learnboost')\n *   .auth('tobi:learnboost')\n *   .auth('tobi')\n *   .auth(accessToken, { type: 'bearer' })\n *\n * @param {String} user\n * @param {String} [pass]\n * @param {Object} [options] options with authorization type 'basic' or 'bearer' ('basic' is default)\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function (user, pass, options) {\n  if (arguments.length === 1) pass = '';\n  if (typeof pass === 'object' && pass !== null) {\n    // pass is optional and can be replaced with options\n    options = pass;\n    pass = '';\n  }\n  if (!options) {\n    options = {\n      type: 'basic'\n    };\n  }\n  const encoder = string => Buffer.from(string).toString('base64');\n  return this._auth(user, pass, options, encoder);\n};\n\n/**\n * Set the certificate authority option for https request.\n *\n * @param {Buffer | Array} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.ca = function (cert) {\n  this._ca = cert;\n  return this;\n};\n\n/**\n * Set the client certificate key option for https request.\n *\n * @param {Buffer | String} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.key = function (cert) {\n  this._key = cert;\n  return this;\n};\n\n/**\n * Set the key, certificate, and CA certs of the client in PFX or PKCS12 format.\n *\n * @param {Buffer | String} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.pfx = function (cert) {\n  if (typeof cert === 'object' && !Buffer.isBuffer(cert)) {\n    this._pfx = cert.pfx;\n    this._passphrase = cert.passphrase;\n  } else {\n    this._pfx = cert;\n  }\n  return this;\n};\n\n/**\n * Set the client certificate option for https request.\n *\n * @param {Buffer | String} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.cert = function (cert) {\n  this._cert = cert;\n  return this;\n};\n\n/**\n * Do not reject expired or invalid TLS certs.\n * sets `rejectUnauthorized=true`. Be warned that this allows MITM attacks.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.disableTLSCerts = function () {\n  this._disableTLSCerts = true;\n  return this;\n};\n\n/**\n * Return an http[s] request.\n *\n * @return {OutgoingMessage}\n * @api private\n */\n\n// eslint-disable-next-line complexity\nRequest.prototype.request = function () {\n  if (this.req) return this.req;\n  const options = {};\n  try {\n    const query = qs.stringify(this.qs, {\n      indices: false,\n      strictNullHandling: true\n    });\n    if (query) {\n      this.qs = {};\n      this._query.push(query);\n    }\n    this._finalizeQueryString();\n  } catch (err) {\n    return this.emit('error', err);\n  }\n  let url = this.url;\n  const retries = this._retries;\n\n  // Capture backticks as-is from the final query string built above.\n  // Note: this'll only find backticks entered in req.query(String)\n  // calls, because qs.stringify unconditionally encodes backticks.\n  let queryStringBackticks;\n  if (url.includes('`')) {\n    const queryStartIndex = url.indexOf('?');\n    if (queryStartIndex !== -1) {\n      const queryString = url.slice(queryStartIndex + 1);\n      queryStringBackticks = queryString.match(/`|%60/g);\n    }\n  }\n\n  // default to http://\n  if (url.indexOf('http') !== 0) url = `http://${url}`;\n  url = parse(url);\n\n  // See https://github.com/ladjs/superagent/issues/1367\n  if (queryStringBackticks) {\n    let i = 0;\n    url.query = url.query.replace(/%60/g, () => queryStringBackticks[i++]);\n    url.search = `?${url.query}`;\n    url.path = url.pathname + url.search;\n  }\n\n  // support unix sockets\n  if (/^https?\\+unix:/.test(url.protocol) === true) {\n    // get the protocol\n    url.protocol = `${url.protocol.split('+')[0]}:`;\n\n    // get the socket, path\n    const unixParts = url.path.match(/^([^/]+)(.+)$/);\n    options.socketPath = unixParts[1].replace(/%2F/g, '/');\n    url.path = unixParts[2];\n  }\n\n  // Override IP address of a hostname\n  if (this._connectOverride) {\n    const _url = url,\n      hostname = _url.hostname;\n    const match = hostname in this._connectOverride ? this._connectOverride[hostname] : this._connectOverride['*'];\n    if (match) {\n      // backup the real host\n      if (!this._header.host) {\n        this.set('host', url.host);\n      }\n      let newHost;\n      let newPort;\n      if (typeof match === 'object') {\n        newHost = match.host;\n        newPort = match.port;\n      } else {\n        newHost = match;\n        newPort = url.port;\n      }\n\n      // wrap [ipv6]\n      url.host = /:/.test(newHost) ? `[${newHost}]` : newHost;\n      if (newPort) {\n        url.host += `:${newPort}`;\n        url.port = newPort;\n      }\n      url.hostname = newHost;\n    }\n  }\n\n  // options\n  options.method = this.method;\n  options.port = url.port;\n  options.path = url.path;\n  options.host = url.hostname;\n  options.ca = this._ca;\n  options.key = this._key;\n  options.pfx = this._pfx;\n  options.cert = this._cert;\n  options.passphrase = this._passphrase;\n  options.agent = this._agent;\n  options.lookup = this._lookup;\n  options.rejectUnauthorized = typeof this._disableTLSCerts === 'boolean' ? !this._disableTLSCerts : process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0';\n\n  // Allows request.get('https://1.2.3.4/').set('Host', 'example.com')\n  if (this._header.host) {\n    options.servername = this._header.host.replace(/:\\d+$/, '');\n  }\n  if (this._trustLocalhost && /^(?:localhost|127\\.0\\.0\\.\\d+|(0*:)+:0*1)$/.test(url.hostname)) {\n    options.rejectUnauthorized = false;\n  }\n\n  // initiate request\n  const module_ = this._enableHttp2 ? exports.protocols['http2:'].setProtocol(url.protocol) : exports.protocols[url.protocol];\n\n  // request\n  this.req = module_.request(options);\n  const req = this.req;\n\n  // set tcp no delay\n  req.setNoDelay(true);\n  if (options.method !== 'HEAD') {\n    req.setHeader('Accept-Encoding', 'gzip, deflate');\n  }\n  this.protocol = url.protocol;\n  this.host = url.host;\n\n  // expose events\n  req.once('drain', () => {\n    this.emit('drain');\n  });\n  req.on('error', error => {\n    // flag abortion here for out timeouts\n    // because node will emit a faux-error \"socket hang up\"\n    // when request is aborted before a connection is made\n    if (this._aborted) return;\n    // if not the same, we are in the **old** (cancelled) request,\n    // so need to continue (same as for above)\n    if (this._retries !== retries) return;\n    // if we've received a response then we don't want to let\n    // an error in the request blow up the response\n    if (this.response) return;\n    this.callback(error);\n  });\n\n  // auth\n  if (url.auth) {\n    const auth = url.auth.split(':');\n    this.auth(auth[0], auth[1]);\n  }\n  if (this.username && this.password) {\n    this.auth(this.username, this.password);\n  }\n  for (const key in this.header) {\n    if (hasOwn(this.header, key)) req.setHeader(key, this.header[key]);\n  }\n\n  // add cookies\n  if (this.cookies) {\n    if (hasOwn(this._header, 'cookie')) {\n      // merge\n      const temporaryJar = new CookieJar.CookieJar();\n      temporaryJar.setCookies(this._header.cookie.split(';'));\n      temporaryJar.setCookies(this.cookies.split(';'));\n      req.setHeader('Cookie', temporaryJar.getCookies(CookieJar.CookieAccessInfo.All).toValueString());\n    } else {\n      req.setHeader('Cookie', this.cookies);\n    }\n  }\n  return req;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function (error, res) {\n  if (this._shouldRetry(error, res)) {\n    return this._retry();\n  }\n\n  // Avoid the error which is emitted from 'socket hang up' to cause the fn undefined error on JS runtime.\n  const fn = this._callback || noop;\n  this.clearTimeout();\n  if (this.called) return console.warn('superagent: double callback bug');\n  this.called = true;\n  if (!error) {\n    try {\n      if (!this._isResponseOK(res)) {\n        let message = 'Unsuccessful HTTP response';\n        if (res) {\n          message = http.STATUS_CODES[res.status] || message;\n        }\n        error = new Error(message);\n        error.status = res ? res.status : undefined;\n      }\n    } catch (err) {\n      error = err;\n      error.status = error.status || (res ? res.status : undefined);\n    }\n  }\n\n  // It's important that the callback is called outside try/catch\n  // to avoid double callback\n  if (!error) {\n    return fn(null, res);\n  }\n  error.response = res;\n  if (this._maxRetries) error.retries = this._retries - 1;\n\n  // only emit error event if there is a listener\n  // otherwise we assume the callback to `.end()` will get the error\n  if (error && this.listeners('error').length > 0) {\n    this.emit('error', error);\n  }\n  fn(error, res);\n};\n\n/**\n * Check if `obj` is a host object,\n *\n * @param {Object} obj host object\n * @return {Boolean} is a host object\n * @api private\n */\nRequest.prototype._isHost = function (object) {\n  return Buffer.isBuffer(object) || object instanceof Stream || object instanceof FormData;\n};\n\n/**\n * Initiate request, invoking callback `fn(err, res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype._emitResponse = function (body, files) {\n  const response = new Response(this);\n  this.response = response;\n  response.redirects = this._redirectList;\n  if (undefined !== body) {\n    response.body = body;\n  }\n  response.files = files;\n  if (this._endCalled) {\n    response.pipe = function () {\n      throw new Error(\"end() has already been called, so it's too late to start piping\");\n    };\n  }\n  this.emit('response', response);\n  return response;\n};\nRequest.prototype.end = function (fn) {\n  this.request();\n  debug('%s %s', this.method, this.url);\n  if (this._endCalled) {\n    throw new Error('.end() was called twice. This is not supported in superagent');\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n  this._end();\n};\nRequest.prototype._end = function () {\n  if (this._aborted) return this.callback(new Error('The request has been aborted even before .end() was called'));\n  let data = this._data;\n  const req = this.req;\n  const method = this.method;\n  this._setTimeouts();\n\n  // body\n  if (method !== 'HEAD' && !req._headerSent) {\n    // serialize stuff\n    if (typeof data !== 'string') {\n      let contentType = req.getHeader('Content-Type');\n      // Parse out just the content type from the header (ignore the charset)\n      if (contentType) contentType = contentType.split(';')[0];\n      let serialize = this._serializer || exports.serialize[contentType];\n      if (!serialize && isJSON(contentType)) {\n        serialize = exports.serialize['application/json'];\n      }\n      if (serialize) data = serialize(data);\n    }\n\n    // content-length\n    if (data && !req.getHeader('Content-Length')) {\n      req.setHeader('Content-Length', Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data));\n    }\n  }\n\n  // response\n  // eslint-disable-next-line complexity\n  req.once('response', res => {\n    debug('%s %s -> %s', this.method, this.url, res.statusCode);\n    if (this._responseTimeoutTimer) {\n      clearTimeout(this._responseTimeoutTimer);\n    }\n    if (this.piped) {\n      return;\n    }\n    const max = this._maxRedirects;\n    const mime = utils.type(res.headers['content-type'] || '') || 'text/plain';\n    let type = mime.split('/')[0];\n    if (type) type = type.toLowerCase().trim();\n    const multipart = type === 'multipart';\n    const redirect = isRedirect(res.statusCode);\n    const responseType = this._responseType;\n    this.res = res;\n\n    // redirect\n    if (redirect && this._redirects++ !== max) {\n      return this._redirect(res);\n    }\n    if (this.method === 'HEAD') {\n      this.emit('end');\n      this.callback(null, this._emitResponse());\n      return;\n    }\n\n    // zlib support\n    if (this._shouldUnzip(res)) {\n      unzip(req, res);\n    }\n    let buffer = this._buffer;\n    if (buffer === undefined && mime in exports.buffer) {\n      buffer = Boolean(exports.buffer[mime]);\n    }\n    let parser = this._parser;\n    if (undefined === buffer && parser) {\n      console.warn(\"A custom superagent parser has been set, but buffering strategy for the parser hasn't been configured. Call `req.buffer(true or false)` or set `superagent.buffer[mime] = true or false`\");\n      buffer = true;\n    }\n    if (!parser) {\n      if (responseType) {\n        parser = exports.parse.image; // It's actually a generic Buffer\n        buffer = true;\n      } else if (multipart) {\n        const form = formidable();\n        parser = form.parse.bind(form);\n        buffer = true;\n      } else if (isBinary(mime)) {\n        parser = exports.parse.image;\n        buffer = true; // For backwards-compatibility buffering default is ad-hoc MIME-dependent\n      } else if (exports.parse[mime]) {\n        parser = exports.parse[mime];\n      } else if (type === 'text') {\n        parser = exports.parse.text;\n        buffer = buffer !== false;\n        // everyone wants their own white-labeled json\n      } else if (isJSON(mime)) {\n        parser = exports.parse['application/json'];\n        buffer = buffer !== false;\n      } else if (buffer) {\n        parser = exports.parse.text;\n      } else if (undefined === buffer) {\n        parser = exports.parse.image; // It's actually a generic Buffer\n        buffer = true;\n      }\n    }\n\n    // by default only buffer text/*, json and messed up thing from hell\n    if (undefined === buffer && isText(mime) || isJSON(mime)) {\n      buffer = true;\n    }\n    this._resBuffered = buffer;\n    let parserHandlesEnd = false;\n    if (buffer) {\n      // Protectiona against zip bombs and other nuisance\n      let responseBytesLeft = this._maxResponseSize || 200000000;\n      res.on('data', buf => {\n        responseBytesLeft -= buf.byteLength || buf.length > 0 ? buf.length : 0;\n        if (responseBytesLeft < 0) {\n          // This will propagate through error event\n          const error = new Error('Maximum response size reached');\n          error.code = 'ETOOLARGE';\n          // Parsers aren't required to observe error event,\n          // so would incorrectly report success\n          parserHandlesEnd = false;\n          // Will not emit error event\n          res.destroy(error);\n          // so we do callback now\n          this.callback(error, null);\n        }\n      });\n    }\n    if (parser) {\n      try {\n        // Unbuffered parsers are supposed to emit response early,\n        // which is weird BTW, because response.body won't be there.\n        parserHandlesEnd = buffer;\n        parser(res, (error, object, files) => {\n          if (this.timedout) {\n            // Timeout has already handled all callbacks\n            return;\n          }\n\n          // Intentional (non-timeout) abort is supposed to preserve partial response,\n          // even if it doesn't parse.\n          if (error && !this._aborted) {\n            return this.callback(error);\n          }\n          if (parserHandlesEnd) {\n            this.emit('end');\n            this.callback(null, this._emitResponse(object, files));\n          }\n        });\n      } catch (err) {\n        this.callback(err);\n        return;\n      }\n    }\n    this.res = res;\n\n    // unbuffered\n    if (!buffer) {\n      debug('unbuffered %s %s', this.method, this.url);\n      this.callback(null, this._emitResponse());\n      if (multipart) return; // allow multipart to handle end event\n      res.once('end', () => {\n        debug('end %s %s', this.method, this.url);\n        this.emit('end');\n      });\n      return;\n    }\n\n    // terminating events\n    res.once('error', error => {\n      parserHandlesEnd = false;\n      this.callback(error, null);\n    });\n    if (!parserHandlesEnd) res.once('end', () => {\n      debug('end %s %s', this.method, this.url);\n      // TODO: unless buffering emit earlier to stream\n      this.emit('end');\n      this.callback(null, this._emitResponse());\n    });\n  });\n  this.emit('request', this);\n  const getProgressMonitor = () => {\n    const lengthComputable = true;\n    const total = req.getHeader('Content-Length');\n    let loaded = 0;\n    const progress = new Stream.Transform();\n    progress._transform = (chunk, encoding, callback) => {\n      loaded += chunk.length;\n      this.emit('progress', {\n        direction: 'upload',\n        lengthComputable,\n        loaded,\n        total\n      });\n      callback(null, chunk);\n    };\n    return progress;\n  };\n  const bufferToChunks = buffer => {\n    const chunkSize = 16 * 1024; // default highWaterMark value\n    const chunking = new Stream.Readable();\n    const totalLength = buffer.length;\n    const remainder = totalLength % chunkSize;\n    const cutoff = totalLength - remainder;\n    for (let i = 0; i < cutoff; i += chunkSize) {\n      const chunk = buffer.slice(i, i + chunkSize);\n      chunking.push(chunk);\n    }\n    if (remainder > 0) {\n      const remainderBuffer = buffer.slice(-remainder);\n      chunking.push(remainderBuffer);\n    }\n    chunking.push(null); // no more data\n\n    return chunking;\n  };\n\n  // if a FormData instance got created, then we send that as the request body\n  const formData = this._formData;\n  if (formData) {\n    // set headers\n    const headers = formData.getHeaders();\n    for (const i in headers) {\n      if (hasOwn(headers, i)) {\n        debug('setting FormData header: \"%s: %s\"', i, headers[i]);\n        req.setHeader(i, headers[i]);\n      }\n    }\n\n    // attempt to get \"Content-Length\" header\n    formData.getLength((error, length) => {\n      // TODO: Add chunked encoding when no length (if err)\n      if (error) debug('formData.getLength had error', error, length);\n      debug('got FormData Content-Length: %s', length);\n      if (typeof length === 'number') {\n        req.setHeader('Content-Length', length);\n      }\n      formData.pipe(getProgressMonitor()).pipe(req);\n    });\n  } else if (Buffer.isBuffer(data)) {\n    bufferToChunks(data).pipe(getProgressMonitor()).pipe(req);\n  } else {\n    req.end(data);\n  }\n};\n\n// Check whether response has a non-0-sized gzip-encoded body\nRequest.prototype._shouldUnzip = res => {\n  if (res.statusCode === 204 || res.statusCode === 304) {\n    // These aren't supposed to have any body\n    return false;\n  }\n\n  // header content is a string, and distinction between 0 and no information is crucial\n  if (res.headers['content-length'] === '0') {\n    // We know that the body is empty (unfortunately, this check does not cover chunked encoding)\n    return false;\n  }\n\n  // console.log(res);\n  return /^\\s*(?:deflate|gzip)\\s*$/.test(res.headers['content-encoding']);\n};\n\n/**\n * Overrides DNS for selected hostnames. Takes object mapping hostnames to IP addresses.\n *\n * When making a request to a URL with a hostname exactly matching a key in the object,\n * use the given IP address to connect, instead of using DNS to resolve the hostname.\n *\n * A special host `*` matches every hostname (keep redirects in mind!)\n *\n *      request.connect({\n *        'test.example.com': '127.0.0.1',\n *        'ipv6.example.com': '::1',\n *      })\n */\nRequest.prototype.connect = function (connectOverride) {\n  if (typeof connectOverride === 'string') {\n    this._connectOverride = {\n      '*': connectOverride\n    };\n  } else if (typeof connectOverride === 'object') {\n    this._connectOverride = connectOverride;\n  } else {\n    this._connectOverride = undefined;\n  }\n  return this;\n};\nRequest.prototype.trustLocalhost = function (toggle) {\n  this._trustLocalhost = toggle === undefined ? true : toggle;\n  return this;\n};\n\n// generate HTTP verb methods\nif (!methods.includes('del')) {\n  // create a copy so we don't cause conflicts with\n  // other packages using the methods package and\n  // npm 3.x\n  methods = [...methods];\n  methods.push('del');\n}\nvar _iterator = _createForOfIteratorHelper(methods),\n  _step;\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    let method = _step.value;\n    const name = method;\n    method = method === 'del' ? 'delete' : method;\n    method = method.toUpperCase();\n    request[name] = (url, data, fn) => {\n      const request_ = request(method, url);\n      if (typeof data === 'function') {\n        fn = data;\n        data = null;\n      }\n      if (data) {\n        if (method === 'GET' || method === 'HEAD') {\n          request_.query(data);\n        } else {\n          request_.send(data);\n        }\n      }\n      if (fn) request_.end(fn);\n      return request_;\n    };\n  }\n\n  /**\n   * Check if `mime` is text and should be buffered.\n   *\n   * @param {String} mime\n   * @return {Boolean}\n   * @api public\n   */\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\nfunction isText(mime) {\n  const parts = mime.split('/');\n  let type = parts[0];\n  if (type) type = type.toLowerCase().trim();\n  let subtype = parts[1];\n  if (subtype) subtype = subtype.toLowerCase().trim();\n  return type === 'text' || subtype === 'x-www-form-urlencoded';\n}\n\n// This is not a catchall, but a start. It might be useful\n// in the long run to have file that includes all binary\n// content types from https://www.iana.org/assignments/media-types/media-types.xhtml\nfunction isBinary(mime) {\n  let _mime$split = mime.split('/'),\n    _mime$split2 = _slicedToArray(_mime$split, 2),\n    registry = _mime$split2[0],\n    name = _mime$split2[1];\n  if (registry) registry = registry.toLowerCase().trim();\n  if (name) name = name.toLowerCase().trim();\n  return ['audio', 'font', 'image', 'video'].includes(registry) || ['gz', 'gzip'].includes(name);\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  // should match /json or +json\n  // but not /json-seq\n  return /[/+]json($|[^-\\w])/i.test(mime);\n}\n\n/**\n * Check if we should follow the redirect `code`.\n *\n * @param {Number} code\n * @return {Boolean}\n * @api private\n */\n\nfunction isRedirect(code) {\n  return [301, 302, 303, 305, 307, 308].includes(code);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nmodule.exports = (res, fn) => {\n  const data = []; // Binary data needs binary storage\n\n  res.on('data', chunk => {\n    data.push(chunk);\n  });\n  res.on('end', () => {\n    fn(null, Buffer.concat(data));\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVzIiwiZm4iLCJkYXRhIiwib24iLCJjaHVuayIsInB1c2giLCJCdWZmZXIiLCJjb25jYXQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbm9kZS9wYXJzZXJzL2ltYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKHJlcywgZm4pID0+IHtcbiAgY29uc3QgZGF0YSA9IFtdOyAvLyBCaW5hcnkgZGF0YSBuZWVkcyBiaW5hcnkgc3RvcmFnZVxuXG4gIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgIGRhdGEucHVzaChjaHVuayk7XG4gIH0pO1xuICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICBmbihudWxsLCBCdWZmZXIuY29uY2F0KGRhdGEpKTtcbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxHQUFHLEVBQUVDLEVBQUUsS0FBSztFQUM1QixNQUFNQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7O0VBRWpCRixHQUFHLENBQUNHLEVBQUUsQ0FBQyxNQUFNLEVBQUdDLEtBQUssSUFBSztJQUN4QkYsSUFBSSxDQUFDRyxJQUFJLENBQUNELEtBQUssQ0FBQztFQUNsQixDQUFDLENBQUM7RUFDRkosR0FBRyxDQUFDRyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU07SUFDbEJGLEVBQUUsQ0FBQyxJQUFJLEVBQUVLLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDTCxJQUFJLENBQUMsQ0FBQztFQUMvQixDQUFDLENBQUM7QUFDSixDQUFDIn0=","\"use strict\";\n\nexports['application/x-www-form-urlencoded'] = require('./urlencoded');\nexports['application/json'] = require('./json');\nexports.text = require('./text');\nexports['application/json-seq'] = exports.text;\nconst binary = require('./image');\nexports['application/octet-stream'] = binary;\nexports['application/pdf'] = binary;\nexports.image = binary;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwicmVxdWlyZSIsInRleHQiLCJiaW5hcnkiLCJpbWFnZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ub2RlL3BhcnNlcnMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0c1snYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ10gPSByZXF1aXJlKCcuL3VybGVuY29kZWQnKTtcbmV4cG9ydHNbJ2FwcGxpY2F0aW9uL2pzb24nXSA9IHJlcXVpcmUoJy4vanNvbicpO1xuZXhwb3J0cy50ZXh0ID0gcmVxdWlyZSgnLi90ZXh0Jyk7XG5cbmV4cG9ydHNbJ2FwcGxpY2F0aW9uL2pzb24tc2VxJ10gPSBleHBvcnRzLnRleHQ7XG5cbmNvbnN0IGJpbmFyeSA9IHJlcXVpcmUoJy4vaW1hZ2UnKTtcblxuZXhwb3J0c1snYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10gPSBiaW5hcnk7XG5leHBvcnRzWydhcHBsaWNhdGlvbi9wZGYnXSA9IGJpbmFyeTtcbmV4cG9ydHMuaW1hZ2UgPSBiaW5hcnk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxHQUFHQyxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3RFRCxPQUFPLENBQUMsa0JBQWtCLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUMvQ0QsT0FBTyxDQUFDRSxJQUFJLEdBQUdELE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFFaENELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHQSxPQUFPLENBQUNFLElBQUk7QUFFOUMsTUFBTUMsTUFBTSxHQUFHRixPQUFPLENBQUMsU0FBUyxDQUFDO0FBRWpDRCxPQUFPLENBQUMsMEJBQTBCLENBQUMsR0FBR0csTUFBTTtBQUM1Q0gsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUdHLE1BQU07QUFDbkNILE9BQU8sQ0FBQ0ksS0FBSyxHQUFHRCxNQUFNIn0=","\"use strict\";\n\nmodule.exports = function (res, fn) {\n  res.text = '';\n  res.setEncoding('utf8');\n  res.on('data', chunk => {\n    res.text += chunk;\n  });\n  res.on('end', () => {\n    let body;\n    let error;\n    try {\n      body = res.text && JSON.parse(res.text);\n    } catch (err) {\n      error = err;\n      // issue #675: return the raw response if the response parsing fails\n      error.rawResponse = res.text || null;\n      // issue #876: return the http status code if the response parsing fails\n      error.statusCode = res.statusCode;\n    } finally {\n      fn(error, body);\n    }\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVzIiwiZm4iLCJ0ZXh0Iiwic2V0RW5jb2RpbmciLCJvbiIsImNodW5rIiwiYm9keSIsImVycm9yIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwicmF3UmVzcG9uc2UiLCJzdGF0dXNDb2RlIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25vZGUvcGFyc2Vycy9qc29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlcywgZm4pIHtcbiAgcmVzLnRleHQgPSAnJztcbiAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgIHJlcy50ZXh0ICs9IGNodW5rO1xuICB9KTtcbiAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgbGV0IGJvZHk7XG4gICAgbGV0IGVycm9yO1xuICAgIHRyeSB7XG4gICAgICBib2R5ID0gcmVzLnRleHQgJiYgSlNPTi5wYXJzZShyZXMudGV4dCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBlcnJvciA9IGVycjtcbiAgICAgIC8vIGlzc3VlICM2NzU6IHJldHVybiB0aGUgcmF3IHJlc3BvbnNlIGlmIHRoZSByZXNwb25zZSBwYXJzaW5nIGZhaWxzXG4gICAgICBlcnJvci5yYXdSZXNwb25zZSA9IHJlcy50ZXh0IHx8IG51bGw7XG4gICAgICAvLyBpc3N1ZSAjODc2OiByZXR1cm4gdGhlIGh0dHAgc3RhdHVzIGNvZGUgaWYgdGhlIHJlc3BvbnNlIHBhcnNpbmcgZmFpbHNcbiAgICAgIGVycm9yLnN0YXR1c0NvZGUgPSByZXMuc3RhdHVzQ29kZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZm4oZXJyb3IsIGJvZHkpO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLEVBQUUsRUFBRTtFQUNsQ0QsR0FBRyxDQUFDRSxJQUFJLEdBQUcsRUFBRTtFQUNiRixHQUFHLENBQUNHLFdBQVcsQ0FBQyxNQUFNLENBQUM7RUFDdkJILEdBQUcsQ0FBQ0ksRUFBRSxDQUFDLE1BQU0sRUFBR0MsS0FBSyxJQUFLO0lBQ3hCTCxHQUFHLENBQUNFLElBQUksSUFBSUcsS0FBSztFQUNuQixDQUFDLENBQUM7RUFDRkwsR0FBRyxDQUFDSSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU07SUFDbEIsSUFBSUUsSUFBSTtJQUNSLElBQUlDLEtBQUs7SUFDVCxJQUFJO01BQ0ZELElBQUksR0FBR04sR0FBRyxDQUFDRSxJQUFJLElBQUlNLElBQUksQ0FBQ0MsS0FBSyxDQUFDVCxHQUFHLENBQUNFLElBQUksQ0FBQztJQUN6QyxDQUFDLENBQUMsT0FBT1EsR0FBRyxFQUFFO01BQ1pILEtBQUssR0FBR0csR0FBRztNQUNYO01BQ0FILEtBQUssQ0FBQ0ksV0FBVyxHQUFHWCxHQUFHLENBQUNFLElBQUksSUFBSSxJQUFJO01BQ3BDO01BQ0FLLEtBQUssQ0FBQ0ssVUFBVSxHQUFHWixHQUFHLENBQUNZLFVBQVU7SUFDbkMsQ0FBQyxTQUFTO01BQ1JYLEVBQUUsQ0FBQ00sS0FBSyxFQUFFRCxJQUFJLENBQUM7SUFDakI7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDIn0=","\"use strict\";\n\nmodule.exports = (res, fn) => {\n  res.text = '';\n  res.setEncoding('utf8');\n  res.on('data', chunk => {\n    res.text += chunk;\n  });\n  res.on('end', fn);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVzIiwiZm4iLCJ0ZXh0Iiwic2V0RW5jb2RpbmciLCJvbiIsImNodW5rIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25vZGUvcGFyc2Vycy90ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKHJlcywgZm4pID0+IHtcbiAgcmVzLnRleHQgPSAnJztcbiAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgIHJlcy50ZXh0ICs9IGNodW5rO1xuICB9KTtcbiAgcmVzLm9uKCdlbmQnLCBmbik7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxHQUFHLEVBQUVDLEVBQUUsS0FBSztFQUM1QkQsR0FBRyxDQUFDRSxJQUFJLEdBQUcsRUFBRTtFQUNiRixHQUFHLENBQUNHLFdBQVcsQ0FBQyxNQUFNLENBQUM7RUFDdkJILEdBQUcsQ0FBQ0ksRUFBRSxDQUFDLE1BQU0sRUFBR0MsS0FBSyxJQUFLO0lBQ3hCTCxHQUFHLENBQUNFLElBQUksSUFBSUcsS0FBSztFQUNuQixDQUFDLENBQUM7RUFDRkwsR0FBRyxDQUFDSSxFQUFFLENBQUMsS0FBSyxFQUFFSCxFQUFFLENBQUM7QUFDbkIsQ0FBQyJ9","\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nconst qs = require('qs');\nmodule.exports = (res, fn) => {\n  res.text = '';\n  res.setEncoding('ascii');\n  res.on('data', chunk => {\n    res.text += chunk;\n  });\n  res.on('end', () => {\n    try {\n      fn(null, qs.parse(res.text));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJxcyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVzIiwiZm4iLCJ0ZXh0Iiwic2V0RW5jb2RpbmciLCJvbiIsImNodW5rIiwicGFyc2UiLCJlcnIiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbm9kZS9wYXJzZXJzL3VybGVuY29kZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IHFzID0gcmVxdWlyZSgncXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAocmVzLCBmbikgPT4ge1xuICByZXMudGV4dCA9ICcnO1xuICByZXMuc2V0RW5jb2RpbmcoJ2FzY2lpJyk7XG4gIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgIHJlcy50ZXh0ICs9IGNodW5rO1xuICB9KTtcbiAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKG51bGwsIHFzLnBhcnNlKHJlcy50ZXh0KSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBmbihlcnIpO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFFeEJDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLENBQUNDLEdBQUcsRUFBRUMsRUFBRSxLQUFLO0VBQzVCRCxHQUFHLENBQUNFLElBQUksR0FBRyxFQUFFO0VBQ2JGLEdBQUcsQ0FBQ0csV0FBVyxDQUFDLE9BQU8sQ0FBQztFQUN4QkgsR0FBRyxDQUFDSSxFQUFFLENBQUMsTUFBTSxFQUFHQyxLQUFLLElBQUs7SUFDeEJMLEdBQUcsQ0FBQ0UsSUFBSSxJQUFJRyxLQUFLO0VBQ25CLENBQUMsQ0FBQztFQUNGTCxHQUFHLENBQUNJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTTtJQUNsQixJQUFJO01BQ0ZILEVBQUUsQ0FBQyxJQUFJLEVBQUVMLEVBQUUsQ0FBQ1UsS0FBSyxDQUFDTixHQUFHLENBQUNFLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxPQUFPSyxHQUFHLEVBQUU7TUFDWk4sRUFBRSxDQUFDTSxHQUFHLENBQUM7SUFDVDtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMifQ==","\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nconst util = require('util');\nconst Stream = require('stream');\nconst ResponseBase = require('../response-base');\nconst _require = require('../utils'),\n  mixin = _require.mixin;\n\n/**\n * Expose `Response`.\n */\n\nmodule.exports = Response;\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * @param {Request} req\n * @param {Object} options\n * @constructor\n * @extends {Stream}\n * @implements {ReadableStream}\n * @api private\n */\n\nfunction Response(request) {\n  Stream.call(this);\n  this.res = request.res;\n  const res = this.res;\n  this.request = request;\n  this.req = request.req;\n  this.text = res.text;\n  this.files = res.files || {};\n  this.buffered = request._resBuffered;\n  this.headers = res.headers;\n  this.header = this.headers;\n  this._setStatusProperties(res.statusCode);\n  this._setHeaderProperties(this.header);\n  this.setEncoding = res.setEncoding.bind(res);\n  res.on('data', this.emit.bind(this, 'data'));\n  res.on('end', this.emit.bind(this, 'end'));\n  res.on('close', this.emit.bind(this, 'close'));\n  res.on('error', this.emit.bind(this, 'error'));\n}\n\n// Lazy access res.body.\n// https://github.com/nodejs/node/pull/39520#issuecomment-889697136\nObject.defineProperty(Response.prototype, 'body', {\n  get() {\n    return this._body !== undefined ? this._body : this.res.body !== undefined ? this.res.body : {};\n  },\n  set(value) {\n    this._body = value;\n  }\n});\n\n/**\n * Inherit from `Stream`.\n */\n\nutil.inherits(Response, Stream);\nmixin(Response.prototype, ResponseBase.prototype);\n\n/**\n * Implements methods of a `ReadableStream`\n */\n\nResponse.prototype.destroy = function (error) {\n  this.res.destroy(error);\n};\n\n/**\n * Pause.\n */\n\nResponse.prototype.pause = function () {\n  this.res.pause();\n};\n\n/**\n * Resume.\n */\n\nResponse.prototype.resume = function () {\n  this.res.resume();\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function () {\n  const req = this.req;\n  const method = req.method;\n  const path = req.path;\n  const message = `cannot ${method} ${path} (${this.status})`;\n  const error = new Error(message);\n  error.status = this.status;\n  error.text = this.text;\n  error.method = method;\n  error.path = path;\n  return error;\n};\nResponse.prototype.setStatusProperties = function (status) {\n  console.warn('In superagent 2.x setStatusProperties is a private method');\n  return this._setStatusProperties(status);\n};\n\n/**\n * To json.\n *\n * @return {Object}\n * @api public\n */\n\nResponse.prototype.toJSON = function () {\n  return {\n    req: this.request.toJSON(),\n    header: this.header,\n    status: this.status,\n    text: this.text\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nconst _require = require('string_decoder'),\n  StringDecoder = _require.StringDecoder;\nconst Stream = require('stream');\nconst zlib = require('zlib');\n\n/**\n * Buffers response data events and re-emits when they're unzipped.\n *\n * @param {Request} req\n * @param {Response} res\n * @api private\n */\n\nexports.unzip = (request, res) => {\n  const unzip = zlib.createUnzip();\n  const stream = new Stream();\n  let decoder;\n\n  // make node responseOnEnd() happy\n  stream.req = request;\n  unzip.on('error', error => {\n    if (error && error.code === 'Z_BUF_ERROR') {\n      // unexpected end of file is ignored by browsers and curl\n      stream.emit('end');\n      return;\n    }\n    stream.emit('error', error);\n  });\n\n  // pipe to unzip\n  res.pipe(unzip);\n\n  // override `setEncoding` to capture encoding\n  res.setEncoding = type => {\n    decoder = new StringDecoder(type);\n  };\n\n  // decode upon decompressing with captured encoding\n  unzip.on('data', buf => {\n    if (decoder) {\n      const string_ = decoder.write(buf);\n      if (string_.length > 0) stream.emit('data', string_);\n    } else {\n      stream.emit('data', buf);\n    }\n  });\n  unzip.on('end', () => {\n    stream.emit('end');\n  });\n\n  // override `on` to capture data listeners\n  const _on = res.on;\n  res.on = function (type, fn) {\n    if (type === 'data' || type === 'end') {\n      stream.on(type, fn.bind(res));\n    } else if (type === 'error') {\n      stream.on(type, fn.bind(res));\n      _on.call(res, type, fn);\n    } else {\n      _on.call(res, type, fn);\n    }\n    return this;\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiU3RyaW5nRGVjb2RlciIsIlN0cmVhbSIsInpsaWIiLCJleHBvcnRzIiwidW56aXAiLCJyZXF1ZXN0IiwicmVzIiwiY3JlYXRlVW56aXAiLCJzdHJlYW0iLCJkZWNvZGVyIiwicmVxIiwib24iLCJlcnJvciIsImNvZGUiLCJlbWl0IiwicGlwZSIsInNldEVuY29kaW5nIiwidHlwZSIsImJ1ZiIsInN0cmluZ18iLCJ3cml0ZSIsImxlbmd0aCIsIl9vbiIsImZuIiwiYmluZCIsImNhbGwiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbm9kZS91bnppcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgeyBTdHJpbmdEZWNvZGVyIH0gPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpO1xuY29uc3QgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5jb25zdCB6bGliID0gcmVxdWlyZSgnemxpYicpO1xuXG4vKipcbiAqIEJ1ZmZlcnMgcmVzcG9uc2UgZGF0YSBldmVudHMgYW5kIHJlLWVtaXRzIHdoZW4gdGhleSdyZSB1bnppcHBlZC5cbiAqXG4gKiBAcGFyYW0ge1JlcXVlc3R9IHJlcVxuICogQHBhcmFtIHtSZXNwb25zZX0gcmVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnVuemlwID0gKHJlcXVlc3QsIHJlcykgPT4ge1xuICBjb25zdCB1bnppcCA9IHpsaWIuY3JlYXRlVW56aXAoKTtcbiAgY29uc3Qgc3RyZWFtID0gbmV3IFN0cmVhbSgpO1xuICBsZXQgZGVjb2RlcjtcblxuICAvLyBtYWtlIG5vZGUgcmVzcG9uc2VPbkVuZCgpIGhhcHB5XG4gIHN0cmVhbS5yZXEgPSByZXF1ZXN0O1xuXG4gIHVuemlwLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvciAmJiBlcnJvci5jb2RlID09PSAnWl9CVUZfRVJST1InKSB7XG4gICAgICAvLyB1bmV4cGVjdGVkIGVuZCBvZiBmaWxlIGlzIGlnbm9yZWQgYnkgYnJvd3NlcnMgYW5kIGN1cmxcbiAgICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gIH0pO1xuXG4gIC8vIHBpcGUgdG8gdW56aXBcbiAgcmVzLnBpcGUodW56aXApO1xuXG4gIC8vIG92ZXJyaWRlIGBzZXRFbmNvZGluZ2AgdG8gY2FwdHVyZSBlbmNvZGluZ1xuICByZXMuc2V0RW5jb2RpbmcgPSAodHlwZSkgPT4ge1xuICAgIGRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2Rlcih0eXBlKTtcbiAgfTtcblxuICAvLyBkZWNvZGUgdXBvbiBkZWNvbXByZXNzaW5nIHdpdGggY2FwdHVyZWQgZW5jb2RpbmdcbiAgdW56aXAub24oJ2RhdGEnLCAoYnVmKSA9PiB7XG4gICAgaWYgKGRlY29kZXIpIHtcbiAgICAgIGNvbnN0IHN0cmluZ18gPSBkZWNvZGVyLndyaXRlKGJ1Zik7XG4gICAgICBpZiAoc3RyaW5nXy5sZW5ndGggPiAwKSBzdHJlYW0uZW1pdCgnZGF0YScsIHN0cmluZ18pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGJ1Zik7XG4gICAgfVxuICB9KTtcblxuICB1bnppcC5vbignZW5kJywgKCkgPT4ge1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfSk7XG5cbiAgLy8gb3ZlcnJpZGUgYG9uYCB0byBjYXB0dXJlIGRhdGEgbGlzdGVuZXJzXG4gIGNvbnN0IF9vbiA9IHJlcy5vbjtcbiAgcmVzLm9uID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gICAgaWYgKHR5cGUgPT09ICdkYXRhJyB8fCB0eXBlID09PSAnZW5kJykge1xuICAgICAgc3RyZWFtLm9uKHR5cGUsIGZuLmJpbmQocmVzKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgICBzdHJlYW0ub24odHlwZSwgZm4uYmluZChyZXMpKTtcbiAgICAgIF9vbi5jYWxsKHJlcywgdHlwZSwgZm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfb24uY2FsbChyZXMsIHR5cGUsIGZuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBOztBQUVBLGlCQUEwQkEsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0VBQTNDQyxhQUFhLFlBQWJBLGFBQWE7QUFDckIsTUFBTUMsTUFBTSxHQUFHRixPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ2hDLE1BQU1HLElBQUksR0FBR0gsT0FBTyxDQUFDLE1BQU0sQ0FBQzs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFJLE9BQU8sQ0FBQ0MsS0FBSyxHQUFHLENBQUNDLE9BQU8sRUFBRUMsR0FBRyxLQUFLO0VBQ2hDLE1BQU1GLEtBQUssR0FBR0YsSUFBSSxDQUFDSyxXQUFXLEVBQUU7RUFDaEMsTUFBTUMsTUFBTSxHQUFHLElBQUlQLE1BQU0sRUFBRTtFQUMzQixJQUFJUSxPQUFPOztFQUVYO0VBQ0FELE1BQU0sQ0FBQ0UsR0FBRyxHQUFHTCxPQUFPO0VBRXBCRCxLQUFLLENBQUNPLEVBQUUsQ0FBQyxPQUFPLEVBQUdDLEtBQUssSUFBSztJQUMzQixJQUFJQSxLQUFLLElBQUlBLEtBQUssQ0FBQ0MsSUFBSSxLQUFLLGFBQWEsRUFBRTtNQUN6QztNQUNBTCxNQUFNLENBQUNNLElBQUksQ0FBQyxLQUFLLENBQUM7TUFDbEI7SUFDRjtJQUVBTixNQUFNLENBQUNNLElBQUksQ0FBQyxPQUFPLEVBQUVGLEtBQUssQ0FBQztFQUM3QixDQUFDLENBQUM7O0VBRUY7RUFDQU4sR0FBRyxDQUFDUyxJQUFJLENBQUNYLEtBQUssQ0FBQzs7RUFFZjtFQUNBRSxHQUFHLENBQUNVLFdBQVcsR0FBSUMsSUFBSSxJQUFLO0lBQzFCUixPQUFPLEdBQUcsSUFBSVQsYUFBYSxDQUFDaUIsSUFBSSxDQUFDO0VBQ25DLENBQUM7O0VBRUQ7RUFDQWIsS0FBSyxDQUFDTyxFQUFFLENBQUMsTUFBTSxFQUFHTyxHQUFHLElBQUs7SUFDeEIsSUFBSVQsT0FBTyxFQUFFO01BQ1gsTUFBTVUsT0FBTyxHQUFHVixPQUFPLENBQUNXLEtBQUssQ0FBQ0YsR0FBRyxDQUFDO01BQ2xDLElBQUlDLE9BQU8sQ0FBQ0UsTUFBTSxHQUFHLENBQUMsRUFBRWIsTUFBTSxDQUFDTSxJQUFJLENBQUMsTUFBTSxFQUFFSyxPQUFPLENBQUM7SUFDdEQsQ0FBQyxNQUFNO01BQ0xYLE1BQU0sQ0FBQ00sSUFBSSxDQUFDLE1BQU0sRUFBRUksR0FBRyxDQUFDO0lBQzFCO0VBQ0YsQ0FBQyxDQUFDO0VBRUZkLEtBQUssQ0FBQ08sRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNO0lBQ3BCSCxNQUFNLENBQUNNLElBQUksQ0FBQyxLQUFLLENBQUM7RUFDcEIsQ0FBQyxDQUFDOztFQUVGO0VBQ0EsTUFBTVEsR0FBRyxHQUFHaEIsR0FBRyxDQUFDSyxFQUFFO0VBQ2xCTCxHQUFHLENBQUNLLEVBQUUsR0FBRyxVQUFVTSxJQUFJLEVBQUVNLEVBQUUsRUFBRTtJQUMzQixJQUFJTixJQUFJLEtBQUssTUFBTSxJQUFJQSxJQUFJLEtBQUssS0FBSyxFQUFFO01BQ3JDVCxNQUFNLENBQUNHLEVBQUUsQ0FBQ00sSUFBSSxFQUFFTSxFQUFFLENBQUNDLElBQUksQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUMsTUFBTSxJQUFJVyxJQUFJLEtBQUssT0FBTyxFQUFFO01BQzNCVCxNQUFNLENBQUNHLEVBQUUsQ0FBQ00sSUFBSSxFQUFFTSxFQUFFLENBQUNDLElBQUksQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDO01BQzdCZ0IsR0FBRyxDQUFDRyxJQUFJLENBQUNuQixHQUFHLEVBQUVXLElBQUksRUFBRU0sRUFBRSxDQUFDO0lBQ3pCLENBQUMsTUFBTTtNQUNMRCxHQUFHLENBQUNHLElBQUksQ0FBQ25CLEdBQUcsRUFBRVcsSUFBSSxFQUFFTSxFQUFFLENBQUM7SUFDekI7SUFFQSxPQUFPLElBQUk7RUFDYixDQUFDO0FBQ0gsQ0FBQyJ9","\"use strict\";\n\nconst semver = require('semver');\n\n/**\n * Module of mixed-in functions shared between node and client code\n */\nconst _require = require('./utils'),\n  isObject = _require.isObject,\n  hasOwn = _require.hasOwn;\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase() {}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function () {\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  clearTimeout(this._uploadTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  delete this._uploadTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function (fn) {\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function (value) {\n  this._responseType = value;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function (fn) {\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n * - upload is the time  since last bit of data was sent or received. This timeout works only if deadline timeout is off\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function (options) {\n  if (!options || typeof options !== 'object') {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    this._uploadTimeout = 0;\n    return this;\n  }\n  for (const option in options) {\n    if (hasOwn(options, option)) {\n      switch (option) {\n        case 'deadline':\n          this._timeout = options.deadline;\n          break;\n        case 'response':\n          this._responseTimeout = options.response;\n          break;\n        case 'upload':\n          this._uploadTimeout = options.upload;\n          break;\n        default:\n          console.warn('Unknown timeout option', option);\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @param {Function} [fn]\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function (count, fn) {\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  this._retryCallback = fn;\n  return this;\n};\n\n//\n// NOTE: we do not include ESOCKETTIMEDOUT because that is from `request` package\n//       <https://github.com/sindresorhus/got/pull/537>\n//\n// NOTE: we do not include EADDRINFO because it was removed from libuv in 2014\n//       <https://github.com/libuv/libuv/commit/02e1ebd40b807be5af46343ea873331b2ee4e9c1>\n//       <https://github.com/request/request/search?q=ESOCKETTIMEDOUT&unscoped_q=ESOCKETTIMEDOUT>\n//\n//\n// TODO: expose these as configurable defaults\n//\nconst ERROR_CODES = new Set(['ETIMEDOUT', 'ECONNRESET', 'EADDRINUSE', 'ECONNREFUSED', 'EPIPE', 'ENOTFOUND', 'ENETUNREACH', 'EAI_AGAIN']);\nconst STATUS_CODES = new Set([408, 413, 429, 500, 502, 503, 504, 521, 522, 524]);\n\n// TODO: we would need to make this easily configurable before adding it in (e.g. some might want to add POST)\n// const METHODS = new Set(['GET', 'PUT', 'HEAD', 'DELETE', 'OPTIONS', 'TRACE']);\n\n/**\n * Determine if a request should be retried.\n * (Inspired by https://github.com/sindresorhus/got#retry)\n *\n * @param {Error} err an error\n * @param {Response} [res] response\n * @returns {Boolean} if segment should be retried\n */\nRequestBase.prototype._shouldRetry = function (error, res) {\n  if (!this._maxRetries || this._retries++ >= this._maxRetries) {\n    return false;\n  }\n  if (this._retryCallback) {\n    try {\n      const override = this._retryCallback(error, res);\n      if (override === true) return true;\n      if (override === false) return false;\n      // undefined falls back to defaults\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  // TODO: we would need to make this easily configurable before adding it in (e.g. some might want to add POST)\n  /*\n  if (\n    this.req &&\n    this.req.method &&\n    !METHODS.has(this.req.method.toUpperCase())\n  )\n    return false;\n  */\n  if (res && res.status && STATUS_CODES.has(res.status)) return true;\n  if (error) {\n    if (error.code && ERROR_CODES.has(error.code)) return true;\n    // Superagent timeout\n    if (error.timeout && error.code === 'ECONNABORTED') return true;\n    if (error.crossDomain) return true;\n  }\n  return false;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function () {\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n  this._aborted = false;\n  this.timedout = false;\n  this.timedoutError = null;\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function (resolve, reject) {\n  if (!this._fullfilledPromise) {\n    const self = this;\n    if (this._endCalled) {\n      console.warn('Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises');\n    }\n    this._fullfilledPromise = new Promise((resolve, reject) => {\n      self.on('abort', () => {\n        if (this._maxRetries && this._maxRetries > this._retries) {\n          return;\n        }\n        if (this.timedout && this.timedoutError) {\n          reject(this.timedoutError);\n          return;\n        }\n        const error = new Error('Aborted');\n        error.code = 'ABORTED';\n        error.status = this.status;\n        error.method = this.method;\n        error.url = this.url;\n        reject(error);\n      });\n      self.end((error, res) => {\n        if (error) reject(error);else resolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n};\nRequestBase.prototype.catch = function (callback) {\n  return this.then(undefined, callback);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function (fn) {\n  fn(this);\n  return this;\n};\nRequestBase.prototype.ok = function (callback) {\n  if (typeof callback !== 'function') throw new Error('Callback required');\n  this._okCallback = callback;\n  return this;\n};\nRequestBase.prototype._isResponseOK = function (res) {\n  if (!res) {\n    return false;\n  }\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n  return res.status >= 200 && res.status < 300;\n};\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function (field) {\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function (field, value) {\n  if (isObject(field)) {\n    for (const key in field) {\n      if (hasOwn(field, key)) this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = value;\n  this.header[field] = value;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field field name\n */\nRequestBase.prototype.unset = function (field) {\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name name of field\n * @param {String|Blob|File|Buffer|fs.ReadStream} val value of field\n * @param {String} options extra options, e.g. 'blob'\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function (name, value, options) {\n  // name should be either a string or an object.\n  if (name === null || undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n  if (this._data) {\n    throw new Error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n  if (isObject(name)) {\n    for (const key in name) {\n      if (hasOwn(name, key)) this.field(key, name[key]);\n    }\n    return this;\n  }\n  if (Array.isArray(value)) {\n    for (const i in value) {\n      if (hasOwn(value, i)) this.field(name, value[i]);\n    }\n    return this;\n  }\n\n  // val should be defined now\n  if (value === null || undefined === value) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  // fix https://github.com/ladjs/superagent/issues/1680\n  if (options) this._getFormData().append(name, value, options);else this._getFormData().append(name, value);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request} request\n * @api public\n */\nRequestBase.prototype.abort = function () {\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  if (this.xhr) this.xhr.abort(); // browser\n  if (this.req) {\n    // Node v13 has major differences in `abort()`\n    // https://github.com/nodejs/node/blob/v12.x/lib/internal/streams/end-of-stream.js\n    // https://github.com/nodejs/node/blob/v13.x/lib/internal/streams/end-of-stream.js\n    // https://github.com/nodejs/node/blob/v14.x/lib/internal/streams/end-of-stream.js\n    // (if you run a diff across these you will see the differences)\n    //\n    // References:\n    // <https://github.com/nodejs/node/issues/31630>\n    // <https://github.com/ladjs/superagent/pull/1084/commits/dc18679a7c5ccfc6046d882015e5126888973bc8>\n    //\n    // Thanks to @shadowgate15 and @niftylettuce\n    if (semver.gte(process.version, 'v13.0.0') && semver.lt(process.version, 'v14.0.0')) {\n      // Note that the reason this doesn't work is because in v13 as compared to v14\n      // there is no `callback = nop` set in end-of-stream.js above\n      throw new Error('Superagent does not work in v13 properly with abort() due to Node.js core changes');\n    } else if (semver.gte(process.version, 'v14.0.0')) {\n      // We have to manually set `destroyed` to `true` in order for this to work\n      // (see core internals of end-of-stream.js above in v14 branch as compared to v12)\n      this.req.destroyed = true;\n    }\n    this.req.abort(); // node\n  }\n\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\nRequestBase.prototype._auth = function (user, pass, options, base64Encoder) {\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', `Basic ${base64Encoder(`${user}:${pass}`)}`);\n      break;\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n    case 'bearer':\n      // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', `Bearer ${user}`);\n      break;\n    default:\n      break;\n  }\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n * @param {Boolean} [on=true] - Set 'withCredentials' state\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function (on) {\n  // This is browser-only functionality. Node side is no-op.\n  if (on === undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does nothing in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function (n) {\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Maximum size of buffered response body, in bytes. Counts uncompressed size.\n * Default 200MB.\n *\n * @param {Number} n number of bytes\n * @return {Request} for chaining\n */\nRequestBase.prototype.maxResponseSize = function (n) {\n  if (typeof n !== 'number') {\n    throw new TypeError('Invalid argument');\n  }\n  this._maxResponseSize = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function () {\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header\n  };\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\n// eslint-disable-next-line complexity\nRequestBase.prototype.send = function (data) {\n  const isObject_ = isObject(data);\n  let type = this._header['content-type'];\n  if (this._formData) {\n    throw new Error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n  if (isObject_ && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw new Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObject_ && isObject(this._data)) {\n    for (const key in data) {\n      if (hasOwn(data, key)) this._data[key] = data[key];\n    }\n  } else if (typeof data === 'string') {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if (type) type = type.toLowerCase().trim();\n    if (type === 'application/x-www-form-urlencoded') {\n      this._data = this._data ? `${this._data}&${data}` : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n  if (!isObject_ || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function (sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\nRequestBase.prototype._finalizeQueryString = function () {\n  const query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.includes('?') ? '&' : '?') + query;\n  }\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    const index = this.url.indexOf('?');\n    if (index >= 0) {\n      const queryArray = this.url.slice(index + 1).split('&');\n      if (typeof this._sort === 'function') {\n        queryArray.sort(this._sort);\n      } else {\n        queryArray.sort();\n      }\n      this.url = this.url.slice(0, index) + '?' + queryArray.join('&');\n    }\n  }\n};\n\n// For backwards compat only\nRequestBase.prototype._appendQueryString = () => {\n  console.warn('Unsupported');\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function (reason, timeout, errno) {\n  if (this._aborted) {\n    return;\n  }\n  const error = new Error(`${reason + timeout}ms exceeded`);\n  error.timeout = timeout;\n  error.code = 'ECONNABORTED';\n  error.errno = errno;\n  this.timedout = true;\n  this.timedoutError = error;\n  this.abort();\n  this.callback(error);\n};\nRequestBase.prototype._setTimeouts = function () {\n  const self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(() => {\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(() => {\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nconst utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase() {}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n\n  // content-type\n  const ct = header['content-type'] || '';\n  this.type = utils.type(ct);\n\n  // params\n  const parameters = utils.params(ct);\n  for (const key in parameters) {\n    if (Object.prototype.hasOwnProperty.call(parameters, key)) this[key] = parameters[key];\n  }\n  this.links = {};\n\n  // links\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch (err) {\n    // ignore\n  }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  const type = Math.trunc(status / 100);\n\n  // status / class\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type;\n\n  // basics\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false;\n\n  // sugar\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiUmVzcG9uc2VCYXNlIiwicHJvdG90eXBlIiwiZ2V0IiwiZmllbGQiLCJoZWFkZXIiLCJ0b0xvd2VyQ2FzZSIsIl9zZXRIZWFkZXJQcm9wZXJ0aWVzIiwiY3QiLCJ0eXBlIiwicGFyYW1ldGVycyIsInBhcmFtcyIsImtleSIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImxpbmtzIiwibGluayIsInBhcnNlTGlua3MiLCJlcnIiLCJfc2V0U3RhdHVzUHJvcGVydGllcyIsInN0YXR1cyIsIk1hdGgiLCJ0cnVuYyIsInN0YXR1c0NvZGUiLCJzdGF0dXNUeXBlIiwiaW5mbyIsIm9rIiwicmVkaXJlY3QiLCJjbGllbnRFcnJvciIsInNlcnZlckVycm9yIiwiZXJyb3IiLCJ0b0Vycm9yIiwiY3JlYXRlZCIsImFjY2VwdGVkIiwibm9Db250ZW50IiwiYmFkUmVxdWVzdCIsInVuYXV0aG9yaXplZCIsIm5vdEFjY2VwdGFibGUiLCJmb3JiaWRkZW4iLCJub3RGb3VuZCIsInVucHJvY2Vzc2FibGVFbnRpdHkiXSwic291cmNlcyI6WyIuLi9zcmMvcmVzcG9uc2UtYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8qKlxuICogRXhwb3NlIGBSZXNwb25zZUJhc2VgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2VCYXNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlc3BvbnNlQmFzZWAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXNwb25zZUJhc2UoKSB7fVxuXG4vKipcbiAqIEdldCBjYXNlLWluc2Vuc2l0aXZlIGBmaWVsZGAgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlQmFzZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gIHJldHVybiB0aGlzLmhlYWRlcltmaWVsZC50b0xvd2VyQ2FzZSgpXTtcbn07XG5cbi8qKlxuICogU2V0IGhlYWRlciByZWxhdGVkIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGAudHlwZWAgdGhlIGNvbnRlbnQgdHlwZSB3aXRob3V0IHBhcmFtc1xuICpcbiAqIEEgcmVzcG9uc2Ugb2YgXCJDb250ZW50LVR5cGU6IHRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThcIlxuICogd2lsbCBwcm92aWRlIHlvdSB3aXRoIGEgYC50eXBlYCBvZiBcInRleHQvcGxhaW5cIi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXNwb25zZUJhc2UucHJvdG90eXBlLl9zZXRIZWFkZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGhlYWRlcikge1xuICAvLyBUT0RPOiBtb2FyIVxuICAvLyBUT0RPOiBtYWtlIHRoaXMgYSB1dGlsXG5cbiAgLy8gY29udGVudC10eXBlXG4gIGNvbnN0IGN0ID0gaGVhZGVyWydjb250ZW50LXR5cGUnXSB8fCAnJztcbiAgdGhpcy50eXBlID0gdXRpbHMudHlwZShjdCk7XG5cbiAgLy8gcGFyYW1zXG4gIGNvbnN0IHBhcmFtZXRlcnMgPSB1dGlscy5wYXJhbXMoY3QpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbWV0ZXJzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbWV0ZXJzLCBrZXkpKVxuICAgICAgdGhpc1trZXldID0gcGFyYW1ldGVyc1trZXldO1xuICB9XG5cbiAgdGhpcy5saW5rcyA9IHt9O1xuXG4gIC8vIGxpbmtzXG4gIHRyeSB7XG4gICAgaWYgKGhlYWRlci5saW5rKSB7XG4gICAgICB0aGlzLmxpbmtzID0gdXRpbHMucGFyc2VMaW5rcyhoZWFkZXIubGluayk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBpZ25vcmVcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgZmxhZ3Mgc3VjaCBhcyBgLm9rYCBiYXNlZCBvbiBgc3RhdHVzYC5cbiAqXG4gKiBGb3IgZXhhbXBsZSBhIDJ4eCByZXNwb25zZSB3aWxsIGdpdmUgeW91IGEgYC5va2Agb2YgX190cnVlX19cbiAqIHdoZXJlYXMgNXh4IHdpbGwgYmUgX19mYWxzZV9fIGFuZCBgLmVycm9yYCB3aWxsIGJlIF9fdHJ1ZV9fLiBUaGVcbiAqIGAuY2xpZW50RXJyb3JgIGFuZCBgLnNlcnZlckVycm9yYCBhcmUgYWxzbyBhdmFpbGFibGUgdG8gYmUgbW9yZVxuICogc3BlY2lmaWMsIGFuZCBgLnN0YXR1c1R5cGVgIGlzIHRoZSBjbGFzcyBvZiBlcnJvciByYW5naW5nIGZyb20gMS4uNVxuICogc29tZXRpbWVzIHVzZWZ1bCBmb3IgbWFwcGluZyByZXNwb25kIGNvbG9ycyBldGMuXG4gKlxuICogXCJzdWdhclwiIHByb3BlcnRpZXMgYXJlIGFsc28gZGVmaW5lZCBmb3IgY29tbW9uIGNhc2VzLiBDdXJyZW50bHkgcHJvdmlkaW5nOlxuICpcbiAqICAgLSAubm9Db250ZW50XG4gKiAgIC0gLmJhZFJlcXVlc3RcbiAqICAgLSAudW5hdXRob3JpemVkXG4gKiAgIC0gLm5vdEFjY2VwdGFibGVcbiAqICAgLSAubm90Rm91bmRcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXNwb25zZUJhc2UucHJvdG90eXBlLl9zZXRTdGF0dXNQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICBjb25zdCB0eXBlID0gTWF0aC50cnVuYyhzdGF0dXMgLyAxMDApO1xuXG4gIC8vIHN0YXR1cyAvIGNsYXNzXG4gIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1cztcbiAgdGhpcy5zdGF0dXMgPSB0aGlzLnN0YXR1c0NvZGU7XG4gIHRoaXMuc3RhdHVzVHlwZSA9IHR5cGU7XG5cbiAgLy8gYmFzaWNzXG4gIHRoaXMuaW5mbyA9IHR5cGUgPT09IDE7XG4gIHRoaXMub2sgPSB0eXBlID09PSAyO1xuICB0aGlzLnJlZGlyZWN0ID0gdHlwZSA9PT0gMztcbiAgdGhpcy5jbGllbnRFcnJvciA9IHR5cGUgPT09IDQ7XG4gIHRoaXMuc2VydmVyRXJyb3IgPSB0eXBlID09PSA1O1xuICB0aGlzLmVycm9yID0gdHlwZSA9PT0gNCB8fCB0eXBlID09PSA1ID8gdGhpcy50b0Vycm9yKCkgOiBmYWxzZTtcblxuICAvLyBzdWdhclxuICB0aGlzLmNyZWF0ZWQgPSBzdGF0dXMgPT09IDIwMTtcbiAgdGhpcy5hY2NlcHRlZCA9IHN0YXR1cyA9PT0gMjAyO1xuICB0aGlzLm5vQ29udGVudCA9IHN0YXR1cyA9PT0gMjA0O1xuICB0aGlzLmJhZFJlcXVlc3QgPSBzdGF0dXMgPT09IDQwMDtcbiAgdGhpcy51bmF1dGhvcml6ZWQgPSBzdGF0dXMgPT09IDQwMTtcbiAgdGhpcy5ub3RBY2NlcHRhYmxlID0gc3RhdHVzID09PSA0MDY7XG4gIHRoaXMuZm9yYmlkZGVuID0gc3RhdHVzID09PSA0MDM7XG4gIHRoaXMubm90Rm91bmQgPSBzdGF0dXMgPT09IDQwNDtcbiAgdGhpcy51bnByb2Nlc3NhYmxlRW50aXR5ID0gc3RhdHVzID09PSA0MjI7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsWUFBWSxHQUFHLENBQUM7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBQSxZQUFZLENBQUNDLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFVBQVVDLEtBQUssRUFBRTtFQUM1QyxPQUFPLElBQUksQ0FBQ0MsTUFBTSxDQUFDRCxLQUFLLENBQUNFLFdBQVcsRUFBRSxDQUFDO0FBQ3pDLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUwsWUFBWSxDQUFDQyxTQUFTLENBQUNLLG9CQUFvQixHQUFHLFVBQVVGLE1BQU0sRUFBRTtFQUM5RDtFQUNBOztFQUVBO0VBQ0EsTUFBTUcsRUFBRSxHQUFHSCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRTtFQUN2QyxJQUFJLENBQUNJLElBQUksR0FBR1osS0FBSyxDQUFDWSxJQUFJLENBQUNELEVBQUUsQ0FBQzs7RUFFMUI7RUFDQSxNQUFNRSxVQUFVLEdBQUdiLEtBQUssQ0FBQ2MsTUFBTSxDQUFDSCxFQUFFLENBQUM7RUFDbkMsS0FBSyxNQUFNSSxHQUFHLElBQUlGLFVBQVUsRUFBRTtJQUM1QixJQUFJRyxNQUFNLENBQUNYLFNBQVMsQ0FBQ1ksY0FBYyxDQUFDQyxJQUFJLENBQUNMLFVBQVUsRUFBRUUsR0FBRyxDQUFDLEVBQ3ZELElBQUksQ0FBQ0EsR0FBRyxDQUFDLEdBQUdGLFVBQVUsQ0FBQ0UsR0FBRyxDQUFDO0VBQy9CO0VBRUEsSUFBSSxDQUFDSSxLQUFLLEdBQUcsQ0FBQyxDQUFDOztFQUVmO0VBQ0EsSUFBSTtJQUNGLElBQUlYLE1BQU0sQ0FBQ1ksSUFBSSxFQUFFO01BQ2YsSUFBSSxDQUFDRCxLQUFLLEdBQUduQixLQUFLLENBQUNxQixVQUFVLENBQUNiLE1BQU0sQ0FBQ1ksSUFBSSxDQUFDO0lBQzVDO0VBQ0YsQ0FBQyxDQUFDLE9BQU9FLEdBQUcsRUFBRTtJQUNaO0VBQUE7QUFFSixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFsQixZQUFZLENBQUNDLFNBQVMsQ0FBQ2tCLG9CQUFvQixHQUFHLFVBQVVDLE1BQU0sRUFBRTtFQUM5RCxNQUFNWixJQUFJLEdBQUdhLElBQUksQ0FBQ0MsS0FBSyxDQUFDRixNQUFNLEdBQUcsR0FBRyxDQUFDOztFQUVyQztFQUNBLElBQUksQ0FBQ0csVUFBVSxHQUFHSCxNQUFNO0VBQ3hCLElBQUksQ0FBQ0EsTUFBTSxHQUFHLElBQUksQ0FBQ0csVUFBVTtFQUM3QixJQUFJLENBQUNDLFVBQVUsR0FBR2hCLElBQUk7O0VBRXRCO0VBQ0EsSUFBSSxDQUFDaUIsSUFBSSxHQUFHakIsSUFBSSxLQUFLLENBQUM7RUFDdEIsSUFBSSxDQUFDa0IsRUFBRSxHQUFHbEIsSUFBSSxLQUFLLENBQUM7RUFDcEIsSUFBSSxDQUFDbUIsUUFBUSxHQUFHbkIsSUFBSSxLQUFLLENBQUM7RUFDMUIsSUFBSSxDQUFDb0IsV0FBVyxHQUFHcEIsSUFBSSxLQUFLLENBQUM7RUFDN0IsSUFBSSxDQUFDcUIsV0FBVyxHQUFHckIsSUFBSSxLQUFLLENBQUM7RUFDN0IsSUFBSSxDQUFDc0IsS0FBSyxHQUFHdEIsSUFBSSxLQUFLLENBQUMsSUFBSUEsSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUN1QixPQUFPLEVBQUUsR0FBRyxLQUFLOztFQUU5RDtFQUNBLElBQUksQ0FBQ0MsT0FBTyxHQUFHWixNQUFNLEtBQUssR0FBRztFQUM3QixJQUFJLENBQUNhLFFBQVEsR0FBR2IsTUFBTSxLQUFLLEdBQUc7RUFDOUIsSUFBSSxDQUFDYyxTQUFTLEdBQUdkLE1BQU0sS0FBSyxHQUFHO0VBQy9CLElBQUksQ0FBQ2UsVUFBVSxHQUFHZixNQUFNLEtBQUssR0FBRztFQUNoQyxJQUFJLENBQUNnQixZQUFZLEdBQUdoQixNQUFNLEtBQUssR0FBRztFQUNsQyxJQUFJLENBQUNpQixhQUFhLEdBQUdqQixNQUFNLEtBQUssR0FBRztFQUNuQyxJQUFJLENBQUNrQixTQUFTLEdBQUdsQixNQUFNLEtBQUssR0FBRztFQUMvQixJQUFJLENBQUNtQixRQUFRLEdBQUduQixNQUFNLEtBQUssR0FBRztFQUM5QixJQUFJLENBQUNvQixtQkFBbUIsR0FBR3BCLE1BQU0sS0FBSyxHQUFHO0FBQzNDLENBQUMifQ==","\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = string_ => string_.split(/ *; */).shift();\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = value => {\n  const object = {};\n  var _iterator = _createForOfIteratorHelper(value.split(/ *; */)),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      const string_ = _step.value;\n      const parts = string_.split(/ *= */);\n      const key = parts.shift();\n      const value = parts.shift();\n      if (key && value) object[key] = value;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return object;\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = value => {\n  const object = {};\n  var _iterator2 = _createForOfIteratorHelper(value.split(/ *, */)),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      const string_ = _step2.value;\n      const parts = string_.split(/ *; */);\n      const url = parts[0].slice(1, -1);\n      const rel = parts[1].split(/ *= */)[1].slice(1, -1);\n      object[rel] = url;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return object;\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = (header, changesOrigin) => {\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header.host;\n  // secuirty\n  if (changesOrigin) {\n    delete header.authorization;\n    delete header.cookie;\n  }\n  return header;\n};\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} object\n * @return {Boolean}\n * @api private\n */\nexports.isObject = object => {\n  return object !== null && typeof object === 'object';\n};\n\n/**\n * Object.hasOwn fallback/polyfill.\n *\n * @type {(object: object, property: string) => boolean} object\n * @api private\n */\nexports.hasOwn = Object.hasOwn || function (object, property) {\n  if (object == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  return Object.prototype.hasOwnProperty.call(new Object(object), property);\n};\nexports.mixin = (target, source) => {\n  for (const key in source) {\n    if (exports.hasOwn(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwidHlwZSIsInN0cmluZ18iLCJzcGxpdCIsInNoaWZ0IiwicGFyYW1zIiwidmFsdWUiLCJvYmplY3QiLCJwYXJ0cyIsImtleSIsInBhcnNlTGlua3MiLCJ1cmwiLCJzbGljZSIsInJlbCIsImNsZWFuSGVhZGVyIiwiaGVhZGVyIiwiY2hhbmdlc09yaWdpbiIsImhvc3QiLCJhdXRob3JpemF0aW9uIiwiY29va2llIiwiaXNPYmplY3QiLCJoYXNPd24iLCJPYmplY3QiLCJwcm9wZXJ0eSIsIlR5cGVFcnJvciIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1peGluIiwidGFyZ2V0Iiwic291cmNlIl0sInNvdXJjZXMiOlsiLi4vc3JjL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmV0dXJuIHRoZSBtaW1lIHR5cGUgZm9yIHRoZSBnaXZlbiBgc3RyYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnR5cGUgPSAoc3RyaW5nXykgPT4gc3RyaW5nXy5zcGxpdCgvICo7ICovKS5zaGlmdCgpO1xuXG4vKipcbiAqIFJldHVybiBoZWFkZXIgZmllbGQgcGFyYW1ldGVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnBhcmFtcyA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCBvYmplY3QgPSB7fTtcbiAgZm9yIChjb25zdCBzdHJpbmdfIG9mIHZhbHVlLnNwbGl0KC8gKjsgKi8pKSB7XG4gICAgY29uc3QgcGFydHMgPSBzdHJpbmdfLnNwbGl0KC8gKj0gKi8pO1xuICAgIGNvbnN0IGtleSA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgY29uc3QgdmFsdWUgPSBwYXJ0cy5zaGlmdCgpO1xuXG4gICAgaWYgKGtleSAmJiB2YWx1ZSkgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG4vKipcbiAqIFBhcnNlIExpbmsgaGVhZGVyIGZpZWxkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnBhcnNlTGlua3MgPSAodmFsdWUpID0+IHtcbiAgY29uc3Qgb2JqZWN0ID0ge307XG4gIGZvciAoY29uc3Qgc3RyaW5nXyBvZiB2YWx1ZS5zcGxpdCgvICosICovKSkge1xuICAgIGNvbnN0IHBhcnRzID0gc3RyaW5nXy5zcGxpdCgvICo7ICovKTtcbiAgICBjb25zdCB1cmwgPSBwYXJ0c1swXS5zbGljZSgxLCAtMSk7XG4gICAgY29uc3QgcmVsID0gcGFydHNbMV0uc3BsaXQoLyAqPSAqLylbMV0uc2xpY2UoMSwgLTEpO1xuICAgIG9iamVjdFtyZWxdID0gdXJsO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbi8qKlxuICogU3RyaXAgY29udGVudCByZWxhdGVkIGZpZWxkcyBmcm9tIGBoZWFkZXJgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJcbiAqIEByZXR1cm4ge09iamVjdH0gaGVhZGVyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmNsZWFuSGVhZGVyID0gKGhlYWRlciwgY2hhbmdlc09yaWdpbikgPT4ge1xuICBkZWxldGUgaGVhZGVyWydjb250ZW50LXR5cGUnXTtcbiAgZGVsZXRlIGhlYWRlclsnY29udGVudC1sZW5ndGgnXTtcbiAgZGVsZXRlIGhlYWRlclsndHJhbnNmZXItZW5jb2RpbmcnXTtcbiAgZGVsZXRlIGhlYWRlci5ob3N0O1xuICAvLyBzZWN1aXJ0eVxuICBpZiAoY2hhbmdlc09yaWdpbikge1xuICAgIGRlbGV0ZSBoZWFkZXIuYXV0aG9yaXphdGlvbjtcbiAgICBkZWxldGUgaGVhZGVyLmNvb2tpZTtcbiAgfVxuXG4gIHJldHVybiBoZWFkZXI7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGBvYmpgIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cbmV4cG9ydHMuaXNPYmplY3QgPSAob2JqZWN0KSA9PiB7XG4gIHJldHVybiBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG59O1xuXG4vKipcbiAqIE9iamVjdC5oYXNPd24gZmFsbGJhY2svcG9seWZpbGwuXG4gKlxuICogQHR5cGUgeyhvYmplY3Q6IG9iamVjdCwgcHJvcGVydHk6IHN0cmluZykgPT4gYm9vbGVhbn0gb2JqZWN0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZXhwb3J0cy5oYXNPd24gPVxuICBPYmplY3QuaGFzT3duIHx8XG4gIGZ1bmN0aW9uIChvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5ldyBPYmplY3Qob2JqZWN0KSwgcHJvcGVydHkpO1xuICB9O1xuXG5leHBvcnRzLm1peGluID0gKHRhcmdldCwgc291cmNlKSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgIGlmIChleHBvcnRzLmhhc093bihzb3VyY2UsIGtleSkpIHtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBQSxPQUFPLENBQUNDLElBQUksR0FBSUMsT0FBTyxJQUFLQSxPQUFPLENBQUNDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQ0MsS0FBSyxFQUFFOztBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUosT0FBTyxDQUFDSyxNQUFNLEdBQUlDLEtBQUssSUFBSztFQUMxQixNQUFNQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQUMsMkNBQ0lELEtBQUssQ0FBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUFBO0VBQUE7SUFBMUMsb0RBQTRDO01BQUEsTUFBakNELE9BQU87TUFDaEIsTUFBTU0sS0FBSyxHQUFHTixPQUFPLENBQUNDLEtBQUssQ0FBQyxPQUFPLENBQUM7TUFDcEMsTUFBTU0sR0FBRyxHQUFHRCxLQUFLLENBQUNKLEtBQUssRUFBRTtNQUN6QixNQUFNRSxLQUFLLEdBQUdFLEtBQUssQ0FBQ0osS0FBSyxFQUFFO01BRTNCLElBQUlLLEdBQUcsSUFBSUgsS0FBSyxFQUFFQyxNQUFNLENBQUNFLEdBQUcsQ0FBQyxHQUFHSCxLQUFLO0lBQ3ZDO0VBQUM7SUFBQTtFQUFBO0lBQUE7RUFBQTtFQUVELE9BQU9DLE1BQU07QUFDZixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBUCxPQUFPLENBQUNVLFVBQVUsR0FBSUosS0FBSyxJQUFLO0VBQzlCLE1BQU1DLE1BQU0sR0FBRyxDQUFDLENBQUM7RUFBQyw0Q0FDSUQsS0FBSyxDQUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQUE7RUFBQTtJQUExQyx1REFBNEM7TUFBQSxNQUFqQ0QsT0FBTztNQUNoQixNQUFNTSxLQUFLLEdBQUdOLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLE9BQU8sQ0FBQztNQUNwQyxNQUFNUSxHQUFHLEdBQUdILEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0ksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztNQUNqQyxNQUFNQyxHQUFHLEdBQUdMLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDUyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO01BQ25ETCxNQUFNLENBQUNNLEdBQUcsQ0FBQyxHQUFHRixHQUFHO0lBQ25CO0VBQUM7SUFBQTtFQUFBO0lBQUE7RUFBQTtFQUVELE9BQU9KLE1BQU07QUFDZixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBUCxPQUFPLENBQUNjLFdBQVcsR0FBRyxDQUFDQyxNQUFNLEVBQUVDLGFBQWEsS0FBSztFQUMvQyxPQUFPRCxNQUFNLENBQUMsY0FBYyxDQUFDO0VBQzdCLE9BQU9BLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztFQUMvQixPQUFPQSxNQUFNLENBQUMsbUJBQW1CLENBQUM7RUFDbEMsT0FBT0EsTUFBTSxDQUFDRSxJQUFJO0VBQ2xCO0VBQ0EsSUFBSUQsYUFBYSxFQUFFO0lBQ2pCLE9BQU9ELE1BQU0sQ0FBQ0csYUFBYTtJQUMzQixPQUFPSCxNQUFNLENBQUNJLE1BQU07RUFDdEI7RUFFQSxPQUFPSixNQUFNO0FBQ2YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBZixPQUFPLENBQUNvQixRQUFRLEdBQUliLE1BQU0sSUFBSztFQUM3QixPQUFPQSxNQUFNLEtBQUssSUFBSSxJQUFJLE9BQU9BLE1BQU0sS0FBSyxRQUFRO0FBQ3RELENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FQLE9BQU8sQ0FBQ3FCLE1BQU0sR0FDWkMsTUFBTSxDQUFDRCxNQUFNLElBQ2IsVUFBVWQsTUFBTSxFQUFFZ0IsUUFBUSxFQUFFO0VBQzFCLElBQUloQixNQUFNLElBQUksSUFBSSxFQUFFO0lBQ2xCLE1BQU0sSUFBSWlCLFNBQVMsQ0FBQyw0Q0FBNEMsQ0FBQztFQUNuRTtFQUVBLE9BQU9GLE1BQU0sQ0FBQ0csU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQyxJQUFJTCxNQUFNLENBQUNmLE1BQU0sQ0FBQyxFQUFFZ0IsUUFBUSxDQUFDO0FBQzNFLENBQUM7QUFFSHZCLE9BQU8sQ0FBQzRCLEtBQUssR0FBRyxDQUFDQyxNQUFNLEVBQUVDLE1BQU0sS0FBSztFQUNsQyxLQUFLLE1BQU1yQixHQUFHLElBQUlxQixNQUFNLEVBQUU7SUFDeEIsSUFBSTlCLE9BQU8sQ0FBQ3FCLE1BQU0sQ0FBQ1MsTUFBTSxFQUFFckIsR0FBRyxDQUFDLEVBQUU7TUFDL0JvQixNQUFNLENBQUNwQixHQUFHLENBQUMsR0FBR3FCLE1BQU0sQ0FBQ3JCLEdBQUcsQ0FBQztJQUMzQjtFQUNGO0FBQ0YsQ0FBQyJ9","var CombinedStream = require('combined-stream');\nvar util = require('util');\nvar path = require('path');\nvar http = require('http');\nvar https = require('https');\nvar parseUrl = require('url').parse;\nvar fs = require('fs');\nvar Stream = require('stream').Stream;\nvar mime = require('mime-types');\nvar asynckit = require('asynckit');\nvar populate = require('./populate.js');\n\n// Public API\nmodule.exports = FormData;\n\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */\nfunction FormData(options) {\n  if (!(this instanceof FormData)) {\n    return new FormData(options);\n  }\n\n  this._overheadLength = 0;\n  this._valueLength = 0;\n  this._valuesToMeasure = [];\n\n  CombinedStream.call(this);\n\n  options = options || {};\n  for (var option in options) {\n    this[option] = options[option];\n  }\n}\n\nFormData.LINE_BREAK = '\\r\\n';\nFormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';\n\nFormData.prototype.append = function(field, value, options) {\n\n  options = options || {};\n\n  // allow filename as single option\n  if (typeof options == 'string') {\n    options = {filename: options};\n  }\n\n  var append = CombinedStream.prototype.append.bind(this);\n\n  // all that streamy business can't handle numbers\n  if (typeof value == 'number') {\n    value = '' + value;\n  }\n\n  // https://github.com/felixge/node-form-data/issues/38\n  if (util.isArray(value)) {\n    // Please convert your array into string\n    // the way web server expects it\n    this._error(new Error('Arrays are not supported.'));\n    return;\n  }\n\n  var header = this._multiPartHeader(field, value, options);\n  var footer = this._multiPartFooter();\n\n  append(header);\n  append(value);\n  append(footer);\n\n  // pass along options.knownLength\n  this._trackLength(header, value, options);\n};\n\nFormData.prototype._trackLength = function(header, value, options) {\n  var valueLength = 0;\n\n  // used w/ getLengthSync(), when length is known.\n  // e.g. for streaming directly from a remote server,\n  // w/ a known file a size, and not wanting to wait for\n  // incoming file to finish to get its size.\n  if (options.knownLength != null) {\n    valueLength += +options.knownLength;\n  } else if (Buffer.isBuffer(value)) {\n    valueLength = value.length;\n  } else if (typeof value === 'string') {\n    valueLength = Buffer.byteLength(value);\n  }\n\n  this._valueLength += valueLength;\n\n  // @check why add CRLF? does this account for custom/multiple CRLFs?\n  this._overheadLength +=\n    Buffer.byteLength(header) +\n    FormData.LINE_BREAK.length;\n\n  // empty or either doesn't have path or not an http response or not a stream\n  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream))) {\n    return;\n  }\n\n  // no need to bother with the length\n  if (!options.knownLength) {\n    this._valuesToMeasure.push(value);\n  }\n};\n\nFormData.prototype._lengthRetriever = function(value, callback) {\n\n  if (value.hasOwnProperty('fd')) {\n\n    // take read range into a account\n    // `end` = Infinity –> read file till the end\n    //\n    // TODO: Looks like there is bug in Node fs.createReadStream\n    // it doesn't respect `end` options without `start` options\n    // Fix it when node fixes it.\n    // https://github.com/joyent/node/issues/7819\n    if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n\n      // when end specified\n      // no need to calculate range\n      // inclusive, starts with 0\n      callback(null, value.end + 1 - (value.start ? value.start : 0));\n\n    // not that fast snoopy\n    } else {\n      // still need to fetch file size from fs\n      fs.stat(value.path, function(err, stat) {\n\n        var fileSize;\n\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        // update final size based on the range options\n        fileSize = stat.size - (value.start ? value.start : 0);\n        callback(null, fileSize);\n      });\n    }\n\n  // or http response\n  } else if (value.hasOwnProperty('httpVersion')) {\n    callback(null, +value.headers['content-length']);\n\n  // or request stream http://github.com/mikeal/request\n  } else if (value.hasOwnProperty('httpModule')) {\n    // wait till response come back\n    value.on('response', function(response) {\n      value.pause();\n      callback(null, +response.headers['content-length']);\n    });\n    value.resume();\n\n  // something else\n  } else {\n    callback('Unknown stream');\n  }\n};\n\nFormData.prototype._multiPartHeader = function(field, value, options) {\n  // custom header specified (as string)?\n  // it becomes responsible for boundary\n  // (e.g. to handle extra CRLFs on .NET servers)\n  if (typeof options.header == 'string') {\n    return options.header;\n  }\n\n  var contentDisposition = this._getContentDisposition(value, options);\n  var contentType = this._getContentType(value, options);\n\n  var contents = '';\n  var headers  = {\n    // add custom disposition as third element or keep it two elements if not\n    'Content-Disposition': ['form-data', 'name=\"' + field + '\"'].concat(contentDisposition || []),\n    // if no content type. allow it to be empty array\n    'Content-Type': [].concat(contentType || [])\n  };\n\n  // allow custom headers.\n  if (typeof options.header == 'object') {\n    populate(headers, options.header);\n  }\n\n  var header;\n  for (var prop in headers) {\n    if (!headers.hasOwnProperty(prop)) continue;\n    header = headers[prop];\n\n    // skip nullish headers.\n    if (header == null) {\n      continue;\n    }\n\n    // convert all headers to arrays.\n    if (!Array.isArray(header)) {\n      header = [header];\n    }\n\n    // add non-empty headers.\n    if (header.length) {\n      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;\n    }\n  }\n\n  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\n\nFormData.prototype._getContentDisposition = function(value, options) {\n\n  var filename\n    , contentDisposition\n    ;\n\n  if (typeof options.filepath === 'string') {\n    // custom filepath for relative paths\n    filename = path.normalize(options.filepath).replace(/\\\\/g, '/');\n  } else if (options.filename || value.name || value.path) {\n    // custom filename take precedence\n    // formidable and the browser add a name property\n    // fs- and request- streams have path property\n    filename = path.basename(options.filename || value.name || value.path);\n  } else if (value.readable && value.hasOwnProperty('httpVersion')) {\n    // or try http response\n    filename = path.basename(value.client._httpMessage.path || '');\n  }\n\n  if (filename) {\n    contentDisposition = 'filename=\"' + filename + '\"';\n  }\n\n  return contentDisposition;\n};\n\nFormData.prototype._getContentType = function(value, options) {\n\n  // use custom content-type above all\n  var contentType = options.contentType;\n\n  // or try `name` from formidable, browser\n  if (!contentType && value.name) {\n    contentType = mime.lookup(value.name);\n  }\n\n  // or try `path` from fs-, request- streams\n  if (!contentType && value.path) {\n    contentType = mime.lookup(value.path);\n  }\n\n  // or if it's http-reponse\n  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {\n    contentType = value.headers['content-type'];\n  }\n\n  // or guess it from the filepath or filename\n  if (!contentType && (options.filepath || options.filename)) {\n    contentType = mime.lookup(options.filepath || options.filename);\n  }\n\n  // fallback to the default content type if `value` is not simple value\n  if (!contentType && typeof value == 'object') {\n    contentType = FormData.DEFAULT_CONTENT_TYPE;\n  }\n\n  return contentType;\n};\n\nFormData.prototype._multiPartFooter = function() {\n  return function(next) {\n    var footer = FormData.LINE_BREAK;\n\n    var lastPart = (this._streams.length === 0);\n    if (lastPart) {\n      footer += this._lastBoundary();\n    }\n\n    next(footer);\n  }.bind(this);\n};\n\nFormData.prototype._lastBoundary = function() {\n  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;\n};\n\nFormData.prototype.getHeaders = function(userHeaders) {\n  var header;\n  var formHeaders = {\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n  };\n\n  for (header in userHeaders) {\n    if (userHeaders.hasOwnProperty(header)) {\n      formHeaders[header.toLowerCase()] = userHeaders[header];\n    }\n  }\n\n  return formHeaders;\n};\n\nFormData.prototype.setBoundary = function(boundary) {\n  this._boundary = boundary;\n};\n\nFormData.prototype.getBoundary = function() {\n  if (!this._boundary) {\n    this._generateBoundary();\n  }\n\n  return this._boundary;\n};\n\nFormData.prototype.getBuffer = function() {\n  var dataBuffer = new Buffer.alloc( 0 );\n  var boundary = this.getBoundary();\n\n  // Create the form content. Add Line breaks to the end of data.\n  for (var i = 0, len = this._streams.length; i < len; i++) {\n    if (typeof this._streams[i] !== 'function') {\n\n      // Add content to the buffer.\n      if(Buffer.isBuffer(this._streams[i])) {\n        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);\n      }else {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);\n      }\n\n      // Add break after content.\n      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );\n      }\n    }\n  }\n\n  // Add the footer and return the Buffer object.\n  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );\n};\n\nFormData.prototype._generateBoundary = function() {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  var boundary = '--------------------------';\n  for (var i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  this._boundary = boundary;\n};\n\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n  // so it basically checks if there is any value added to the form\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  // https://github.com/form-data/form-data/issues/40\n  if (!this.hasKnownLength()) {\n    // Some async length retrievers are present\n    // therefore synchronous length calculation is false.\n    // Please use getLength(callback) to get proper length\n    this._error(new Error('Cannot calculate proper length in synchronous way.'));\n  }\n\n  return knownLength;\n};\n\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n  var hasKnownLength = true;\n\n  if (this._valuesToMeasure.length) {\n    hasKnownLength = false;\n  }\n\n  return hasKnownLength;\n};\n\nFormData.prototype.getLength = function(cb) {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  if (!this._valuesToMeasure.length) {\n    process.nextTick(cb.bind(this, null, knownLength));\n    return;\n  }\n\n  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    values.forEach(function(length) {\n      knownLength += length;\n    });\n\n    cb(null, knownLength);\n  });\n};\n\nFormData.prototype.submit = function(params, cb) {\n  var request\n    , options\n    , defaults = {method: 'post'}\n    ;\n\n  // parse provided url if it's string\n  // or treat it as options object\n  if (typeof params == 'string') {\n\n    params = parseUrl(params);\n    options = populate({\n      port: params.port,\n      path: params.pathname,\n      host: params.hostname,\n      protocol: params.protocol\n    }, defaults);\n\n  // use custom params\n  } else {\n\n    options = populate(params, defaults);\n    // if no port provided use default one\n    if (!options.port) {\n      options.port = options.protocol == 'https:' ? 443 : 80;\n    }\n  }\n\n  // put that good code in getHeaders to some use\n  options.headers = this.getHeaders(params.headers);\n\n  // https if specified, fallback to http in any other case\n  if (options.protocol == 'https:') {\n    request = https.request(options);\n  } else {\n    request = http.request(options);\n  }\n\n  // get content length and fire away\n  this.getLength(function(err, length) {\n    if (err && err !== 'Unknown stream') {\n      this._error(err);\n      return;\n    }\n\n    // add content length\n    if (length) {\n      request.setHeader('Content-Length', length);\n    }\n\n    this.pipe(request);\n    if (cb) {\n      var onResponse;\n\n      var callback = function (error, responce) {\n        request.removeListener('error', callback);\n        request.removeListener('response', onResponse);\n\n        return cb.call(this, error, responce);\n      };\n\n      onResponse = callback.bind(this, null);\n\n      request.on('error', callback);\n      request.on('response', onResponse);\n    }\n  }.bind(this));\n\n  return request;\n};\n\nFormData.prototype._error = function(err) {\n  if (!this.error) {\n    this.error = err;\n    this.pause();\n    this.emit('error', err);\n  }\n};\n\nFormData.prototype.toString = function () {\n  return '[object FormData]';\n};\n","// populates missing values\nmodule.exports = function(dst, src) {\n\n  Object.keys(src).forEach(function(prop)\n  {\n    dst[prop] = dst[prop] || src[prop];\n  });\n\n  return dst;\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n","'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n","'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount, ...nodes) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    walker = insert(this, walker, nodes[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n","module.exports = require(\"crypto\");","module.exports = require(\"domain\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"http2\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"process\");","module.exports = require(\"querystring\");","module.exports = require(\"stream\");","module.exports = require(\"string_decoder\");","module.exports = require(\"tls\");","module.exports = require(\"tty\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"zlib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(7661);\n",""],"names":[],"sourceRoot":""}