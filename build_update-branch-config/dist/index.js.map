{"version":3,"file":"index.js","mappingsj4pBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChzzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChllltJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChprxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACthzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjzLA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdn2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvjjexjtQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjpjaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnzCA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACphGA;AACA;AACA;AACA;;;;;;;;ACHA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjngBA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACttrntnmxxrjxvhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1BA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChpvzgnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChCA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtrLA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvnvvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrjvhxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpuvpftIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrvQA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtfpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACptNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtljvpPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrnqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClptrvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChzaA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;AEDA;AACA;AACA;AACA","sources":["../webpack://build_update-branch-config/../api/lib/generated/app-center/index.js","../webpack://build_update-branch-config/../api/lib/main.js","../webpack://build_update-branch-config/./lib/src/main.js","../webpack://build_update-branch-config/./lib/src/run.js","../webpack://build_update-branch-config/../common/lib/utils/logger.js","../webpack://build_update-branch-config/../node_modules/@actions/core/lib/command.js","../webpack://build_update-branch-config/../node_modules/@actions/core/lib/core.js","../webpack://build_update-branch-config/../node_modules/@actions/core/lib/file-command.js","../webpack://build_update-branch-config/../node_modules/@actions/core/lib/oidc-utils.js","../webpack://build_update-branch-config/../node_modules/@actions/core/lib/path-utils.js","../webpack://build_update-branch-config/../node_modules/@actions/core/lib/summary.js","../webpack://build_update-branch-config/../node_modules/@actions/core/lib/utils.js","../webpack://build_update-branch-config/../node_modules/@actions/http-client/lib/auth.js","../webpack://build_update-branch-config/../node_modules/@actions/http-client/lib/index.js","../webpack://build_update-branch-config/../node_modules/@actions/http-client/lib/proxy.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/lib/colors.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/lib/custom/trap.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/lib/custom/zalgo.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/lib/maps/america.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/lib/maps/rainbow.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/lib/maps/random.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/lib/maps/zebra.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/lib/styles.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/lib/system/has-flag.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/lib/system/supports-colors.js","../webpack://build_update-branch-config/../node_modules/@colors/colors/safe.js","../webpack://build_update-branch-config/../node_modules/@dabh/diagnostics/adapters/index.js","../webpack://build_update-branch-config/../node_modules/@dabh/diagnostics/adapters/process.env.js","../webpack://build_update-branch-config/../node_modules/@dabh/diagnostics/diagnostics.js","../webpack://build_update-branch-config/../node_modules/@dabh/diagnostics/logger/console.js","../webpack://build_update-branch-config/../node_modules/@dabh/diagnostics/modifiers/namespace-ansi.js","../webpack://build_update-branch-config/../node_modules/@dabh/diagnostics/node/development.js","../webpack://build_update-branch-config/../node_modules/@dabh/diagnostics/node/index.js","../webpack://build_update-branch-config/../node_modules/@dabh/diagnostics/node/production.js","../webpack://build_update-branch-config/../node_modules/asap/asap.js","../webpack://build_update-branch-config/../node_modules/asap/raw.js","../webpack://build_update-branch-config/../node_modules/async/asyncify.js","../webpack://build_update-branch-config/../node_modules/async/eachOf.js","../webpack://build_update-branch-config/../node_modules/async/eachOfLimit.js","../webpack://build_update-branch-config/../node_modules/async/eachOfSeries.js","../webpack://build_update-branch-config/../node_modules/async/forEach.js","../webpack://build_update-branch-config/../node_modules/async/internal/asyncEachOfLimit.js","../webpack://build_update-branch-config/../node_modules/async/internal/awaitify.js","../webpack://build_update-branch-config/../node_modules/async/internal/breakLoop.js","../webpack://build_update-branch-config/../node_modules/async/internal/eachOfLimit.js","../webpack://build_update-branch-config/../node_modules/async/internal/getIterator.js","../webpack://build_update-branch-config/../node_modules/async/internal/initialParams.js","../webpack://build_update-branch-config/../node_modules/async/internal/isArrayLike.js","../webpack://build_update-branch-config/../node_modules/async/internal/iterator.js","../webpack://build_update-branch-config/../node_modules/async/internal/once.js","../webpack://build_update-branch-config/../node_modules/async/internal/onlyOnce.js","../webpack://build_update-branch-config/../node_modules/async/internal/parallel.js","../webpack://build_update-branch-config/../node_modules/async/internal/setImmediate.js","../webpack://build_update-branch-config/../node_modules/async/internal/withoutIndex.js","../webpack://build_update-branch-config/../node_modules/async/internal/wrapAsync.js","../webpack://build_update-branch-config/../node_modules/async/series.js","../webpack://build_update-branch-config/../node_modules/asynckit/index.js","../webpack://build_update-branch-config/../node_modules/asynckit/lib/abort.js","../webpack://build_update-branch-config/../node_modules/asynckit/lib/async.js","../webpack://build_update-branch-config/../node_modules/asynckit/lib/defer.js","../webpack://build_update-branch-config/../node_modules/asynckit/lib/iterate.js","../webpack://build_update-branch-config/../node_modules/asynckit/lib/state.js","../webpack://build_update-branch-config/../node_modules/asynckit/lib/terminator.js","../webpack://build_update-branch-config/../node_modules/asynckit/parallel.js","../webpack://build_update-branch-config/../node_modules/asynckit/serial.js","../webpack://build_update-branch-config/../node_modules/asynckit/serialOrdered.js","../webpack://build_update-branch-config/../node_modules/call-bind/callBound.js","../webpack://build_update-branch-config/../node_modules/call-bind/index.js","../webpack://build_update-branch-config/../node_modules/color-convert/conversions.js","../webpack://build_update-branch-config/../node_modules/color-convert/index.js","../webpack://build_update-branch-config/../node_modules/color-convert/node_modules/color-name/index.js","../webpack://build_update-branch-config/../node_modules/color-convert/route.js","../webpack://build_update-branch-config/../node_modules/color-name/index.js","../webpack://build_update-branch-config/../node_modules/color-string/index.js","../webpack://build_update-branch-config/../node_modules/color/index.js","../webpack://build_update-branch-config/../node_modules/colorspace/index.js","../webpack://build_update-branch-config/../node_modules/combined-stream/lib/combined_stream.js","../webpack://build_update-branch-config/../node_modules/cookiejar/cookiejar.js","../webpack://build_update-branch-config/../node_modules/debug/src/browser.js","../webpack://build_update-branch-config/../node_modules/debug/src/common.js","../webpack://build_update-branch-config/../node_modules/debug/src/index.js","../webpack://build_update-branch-config/../node_modules/debug/src/node.js","../webpack://build_update-branch-config/../node_modules/delayed-stream/lib/delayed_stream.js","../webpack://build_update-branch-config/../node_modules/dezalgo/dezalgo.js","../webpack://build_update-branch-config/../node_modules/enabled/index.js","../webpack://build_update-branch-config/../node_modules/fast-safe-stringify/index.js","../webpack://build_update-branch-config/../node_modules/fecha/lib/fecha.umd.js","../webpack://build_update-branch-config/../node_modules/fn.name/index.js","../webpack://build_update-branch-config/../node_modules/formidable/src/Formidable.js","../webpack://build_update-branch-config/../node_modules/formidable/src/FormidableError.js","../webpack://build_update-branch-config/../node_modules/formidable/src/PersistentFile.js","../webpack://build_update-branch-config/../node_modules/formidable/src/VolatileFile.js","../webpack://build_update-branch-config/../node_modules/formidable/src/index.js","../webpack://build_update-branch-config/../node_modules/formidable/src/parsers/Dummy.js","../webpack://build_update-branch-config/../node_modules/formidable/src/parsers/JSON.js","../webpack://build_update-branch-config/../node_modules/formidable/src/parsers/Multipart.js","../webpack://build_update-branch-config/../node_modules/formidable/src/parsers/OctetStream.js","../webpack://build_update-branch-config/../node_modules/formidable/src/parsers/Querystring.js","../webpack://build_update-branch-config/../node_modules/formidable/src/parsers/index.js","../webpack://build_update-branch-config/../node_modules/formidable/src/plugins/index.js","../webpack://build_update-branch-config/../node_modules/formidable/src/plugins/json.js","../webpack://build_update-branch-config/../node_modules/formidable/src/plugins/multipart.js","../webpack://build_update-branch-config/../node_modules/formidable/src/plugins/octetstream.js","../webpack://build_update-branch-config/../node_modules/formidable/src/plugins/querystring.js","../webpack://build_update-branch-config/../node_modules/function-bind/implementation.js","../webpack://build_update-branch-config/../node_modules/function-bind/index.js","../webpack://build_update-branch-config/../node_modules/get-intrinsic/index.js","../webpack://build_update-branch-config/../node_modules/has-flag/index.js","../webpack://build_update-branch-config/../node_modules/has-symbols/index.js","../webpack://build_update-branch-config/../node_modules/has-symbols/shams.js","../webpack://build_update-branch-config/../node_modules/has/src/index.js","../webpack://build_update-branch-config/../node_modules/hexoid/dist/index.js","../webpack://build_update-branch-config/../node_modules/inherits/inherits.js","../webpack://build_update-branch-config/../node_modules/inherits/inherits_browser.js","../webpack://build_update-branch-config/../node_modules/is-stream/index.js","../webpack://build_update-branch-config/../node_modules/kuler/index.js","../webpack://build_update-branch-config/../node_modules/logform/align.js","../webpack://build_update-branch-config/../node_modules/logform/cli.js","../webpack://build_update-branch-config/../node_modules/logform/colorize.js","../webpack://build_update-branch-config/../node_modules/logform/combine.js","../webpack://build_update-branch-config/../node_modules/logform/errors.js","../webpack://build_update-branch-config/../node_modules/logform/format.js","../webpack://build_update-branch-config/../node_modules/logform/index.js","../webpack://build_update-branch-config/../node_modules/logform/json.js","../webpack://build_update-branch-config/../node_modules/logform/label.js","../webpack://build_update-branch-config/../node_modules/logform/levels.js","../webpack://build_update-branch-config/../node_modules/logform/logstash.js","../webpack://build_update-branch-config/../node_modules/logform/metadata.js","../webpack://build_update-branch-config/../node_modules/logform/ms.js","../webpack://build_update-branch-config/../node_modules/logform/node_modules/ms/index.js","../webpack://build_update-branch-config/../node_modules/logform/pad-levels.js","../webpack://build_update-branch-config/../node_modules/logform/pretty-print.js","../webpack://build_update-branch-config/../node_modules/logform/printf.js","../webpack://build_update-branch-config/../node_modules/logform/simple.js","../webpack://build_update-branch-config/../node_modules/logform/splat.js","../webpack://build_update-branch-config/../node_modules/logform/timestamp.js","../webpack://build_update-branch-config/../node_modules/logform/uncolorize.js","../webpack://build_update-branch-config/../node_modules/lru-cache/index.js","../webpack://build_update-branch-config/../node_modules/methods/index.js","../webpack://build_update-branch-config/../node_modules/mime-db/index.js","../webpack://build_update-branch-config/../node_modules/mime-types/index.js","../webpack://build_update-branch-config/../node_modules/mime/Mime.js","../webpack://build_update-branch-config/../node_modules/mime/index.js","../webpack://build_update-branch-config/../node_modules/mime/types/other.js","../webpack://build_update-branch-config/../node_modules/mime/types/standard.js","../webpack://build_update-branch-config/../node_modules/ms/index.js","../webpack://build_update-branch-config/../node_modules/object-inspect/index.js","../webpack://build_update-branch-config/../node_modules/object-inspect/util.inspect.js","../webpack://build_update-branch-config/../node_modules/once/once.js","../webpack://build_update-branch-config/../node_modules/one-time/index.js","../webpack://build_update-branch-config/../node_modules/qs/lib/formats.js","../webpack://build_update-branch-config/../node_modules/qs/lib/index.js","../webpack://build_update-branch-config/../node_modules/qs/lib/parse.js","../webpack://build_update-branch-config/../node_modules/qs/lib/stringify.js","../webpack://build_update-branch-config/../node_modules/qs/lib/utils.js","../webpack://build_update-branch-config/../node_modules/readable-stream/errors.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/_stream_duplex.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/_stream_passthrough.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/_stream_readable.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/_stream_transform.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/_stream_writable.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/internal/streams/async_iterator.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/internal/streams/buffer_list.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/internal/streams/destroy.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/internal/streams/end-of-stream.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/internal/streams/from.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/internal/streams/pipeline.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/internal/streams/state.js","../webpack://build_update-branch-config/../node_modules/readable-stream/lib/internal/streams/stream.js","../webpack://build_update-branch-config/../node_modules/readable-stream/readable.js","../webpack://build_update-branch-config/../node_modules/safe-buffer/index.js","../webpack://build_update-branch-config/../node_modules/safe-stable-stringify/index.js","../webpack://build_update-branch-config/../node_modules/semver/classes/comparator.js","../webpack://build_update-branch-config/../node_modules/semver/classes/range.js","../webpack://build_update-branch-config/../node_modules/semver/classes/semver.js","../webpack://build_update-branch-config/../node_modules/semver/functions/clean.js","../webpack://build_update-branch-config/../node_modules/semver/functions/cmp.js","../webpack://build_update-branch-config/../node_modules/semver/functions/coerce.js","../webpack://build_update-branch-config/../node_modules/semver/functions/compare-build.js","../webpack://build_update-branch-config/../node_modules/semver/functions/compare-loose.js","../webpack://build_update-branch-config/../node_modules/semver/functions/compare.js","../webpack://build_update-branch-config/../node_modules/semver/functions/diff.js","../webpack://build_update-branch-config/../node_modules/semver/functions/eq.js","../webpack://build_update-branch-config/../node_modules/semver/functions/gt.js","../webpack://build_update-branch-config/../node_modules/semver/functions/gte.js","../webpack://build_update-branch-config/../node_modules/semver/functions/inc.js","../webpack://build_update-branch-config/../node_modules/semver/functions/lt.js","../webpack://build_update-branch-config/../node_modules/semver/functions/lte.js","../webpack://build_update-branch-config/../node_modules/semver/functions/major.js","../webpack://build_update-branch-config/../node_modules/semver/functions/minor.js","../webpack://build_update-branch-config/../node_modules/semver/functions/neq.js","../webpack://build_update-branch-config/../node_modules/semver/functions/parse.js","../webpack://build_update-branch-config/../node_modules/semver/functions/patch.js","../webpack://build_update-branch-config/../node_modules/semver/functions/prerelease.js","../webpack://build_update-branch-config/../node_modules/semver/functions/rcompare.js","../webpack://build_update-branch-config/../node_modules/semver/functions/rsort.js","../webpack://build_update-branch-config/../node_modules/semver/functions/satisfies.js","../webpack://build_update-branch-config/../node_modules/semver/functions/sort.js","../webpack://build_update-branch-config/../node_modules/semver/functions/valid.js","../webpack://build_update-branch-config/../node_modules/semver/index.js","../webpack://build_update-branch-config/../node_modules/semver/internal/constants.js","../webpack://build_update-branch-config/../node_modules/semver/internal/debug.js","../webpack://build_update-branch-config/../node_modules/semver/internal/identifiers.js","../webpack://build_update-branch-config/../node_modules/semver/internal/parse-options.js","../webpack://build_update-branch-config/../node_modules/semver/internal/re.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/gtr.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/intersects.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/ltr.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/max-satisfying.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/min-satisfying.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/min-version.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/outside.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/simplify.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/subset.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/to-comparators.js","../webpack://build_update-branch-config/../node_modules/semver/ranges/valid.js","../webpack://build_update-branch-config/../node_modules/side-channel/index.js","../webpack://build_update-branch-config/../node_modules/simple-swizzle/index.js","../webpack://build_update-branch-config/../node_modules/simple-swizzle/node_modules/is-arrayish/index.js","../webpack://build_update-branch-config/../node_modules/stack-trace/lib/stack-trace.js","../webpack://build_update-branch-config/../node_modules/string_decoder/lib/string_decoder.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/agent-base.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/node/agent.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/node/http2wrapper.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/node/index.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/node/parsers/image.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/node/parsers/index.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/node/parsers/json.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/node/parsers/text.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/node/parsers/urlencoded.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/node/response.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/node/unzip.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/request-base.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/response-base.js","../webpack://build_update-branch-config/../node_modules/superagent/lib/utils.js","../webpack://build_update-branch-config/../node_modules/superagent/node_modules/form-data/lib/form_data.js","../webpack://build_update-branch-config/../node_modules/superagent/node_modules/form-data/lib/populate.js","../webpack://build_update-branch-config/../node_modules/supports-color/index.js","../webpack://build_update-branch-config/../node_modules/text-hex/index.js","../webpack://build_update-branch-config/../node_modules/triple-beam/config/cli.js","../webpack://build_update-branch-config/../node_modules/triple-beam/config/index.js","../webpack://build_update-branch-config/../node_modules/triple-beam/config/npm.js","../webpack://build_update-branch-config/../node_modules/triple-beam/config/syslog.js","../webpack://build_update-branch-config/../node_modules/triple-beam/index.js","../webpack://build_update-branch-config/../node_modules/tunnel/index.js","../webpack://build_update-branch-config/../node_modules/tunnel/lib/tunnel.js","../webpack://build_update-branch-config/../node_modules/util-deprecate/node.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/index.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/md5.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/nil.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/parse.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/regex.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/rng.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/sha1.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/stringify.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/v1.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/v3.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/v35.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/v4.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/v5.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/validate.js","../webpack://build_update-branch-config/../node_modules/uuid/dist/version.js","../webpack://build_update-branch-config/../node_modules/winston-transport/index.js","../webpack://build_update-branch-config/../node_modules/winston-transport/legacy.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/common.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/config/index.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/container.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/create-logger.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/exception-handler.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/exception-stream.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/logger.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/profiler.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/rejection-handler.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/tail-file.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/transports/console.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/transports/file.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/transports/http.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/transports/index.js","../webpack://build_update-branch-config/../node_modules/winston/lib/winston/transports/stream.js","../webpack://build_update-branch-config/../node_modules/wrappy/wrappy.js","../webpack://build_update-branch-config/../node_modules/yallist/iterator.js","../webpack://build_update-branch-config/../node_modules/yallist/yallist.js","../webpack://build_update-branch-config/external node-commonjs \"assert\"","../webpack://build_update-branch-config/external node-commonjs \"buffer\"","../webpack://build_update-branch-config/external node-commonjs \"crypto\"","../webpack://build_update-branch-config/external node-commonjs \"domain\"","../webpack://build_update-branch-config/external node-commonjs \"events\"","../webpack://build_update-branch-config/external node-commonjs \"fs\"","../webpack://build_update-branch-config/external node-commonjs \"http\"","../webpack://build_update-branch-config/external node-commonjs \"http2\"","../webpack://build_update-branch-config/external node-commonjs \"https\"","../webpack://build_update-branch-config/external node-commonjs \"net\"","../webpack://build_update-branch-config/external node-commonjs \"os\"","../webpack://build_update-branch-config/external node-commonjs \"path\"","../webpack://build_update-branch-config/external node-commonjs \"process\"","../webpack://build_update-branch-config/external node-commonjs \"querystring\"","../webpack://build_update-branch-config/external node-commonjs \"stream\"","../webpack://build_update-branch-config/external node-commonjs \"string_decoder\"","../webpack://build_update-branch-config/external node-commonjs \"tls\"","../webpack://build_update-branch-config/external node-commonjs \"tty\"","../webpack://build_update-branch-config/external node-commonjs \"url\"","../webpack://build_update-branch-config/external node-commonjs \"util\"","../webpack://build_update-branch-config/external node-commonjs \"zlib\"","../webpack://build_update-branch-config/webpack/bootstrap","../webpack://build_update-branch-config/webpack/runtime/compat","../webpack://build_update-branch-config/webpack/before-startup","../webpack://build_update-branch-config/webpack/startup","../webpack://build_update-branch-config/webpack/after-startup"],"sourcesContent":["\"use strict\";\n// tslint:disable\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppCenter = void 0;\nconst request = __importStar(require(\"superagent\"));\n/**\n * Microsoft Visual Studio App Center API\n * @class AppCenter\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nclass AppCenter {\n    constructor(domain, logger) {\n        this.logger = logger;\n        this.domain = \"https://api.appcenter.ms\";\n        this.errorHandlers = [];\n        if (domain) {\n            this.domain = domain;\n        }\n    }\n    getDomain() {\n        return this.domain;\n    }\n    addErrorHandler(handler) {\n        this.errorHandlers.push(handler);\n    }\n    setRequestHeadersHandler(handler) {\n        this.requestHeadersHandler = handler;\n    }\n    setConfigureAgentHandler(handler) {\n        this.configureAgentHandler = handler;\n    }\n    setConfigureRequestHandler(handler) {\n        this.configureRequestHandler = handler;\n    }\n    request(method, url, body, headers, queryParameters, form, reject, resolve, opts) {\n        if (this.logger) {\n            this.logger.log(`Call ${method} ${url}`);\n        }\n        const agent = this.configureAgentHandler ?\n            this.configureAgentHandler(request.default) :\n            request.default;\n        let req = agent(method, url);\n        if (this.configureRequestHandler) {\n            req = this.configureRequestHandler(req);\n        }\n        req = req.query(queryParameters);\n        if (this.requestHeadersHandler) {\n            headers = this.requestHeadersHandler({\n                ...headers\n            });\n        }\n        req.set(headers);\n        if (body) {\n            req.send(body);\n            if (typeof (body) === 'object' && !(body.constructor.name === 'Buffer')) {\n                headers['content-type'] = 'application/json';\n            }\n        }\n        if (Object.keys(form).length > 0) {\n            req.type('form');\n            req.send(form);\n        }\n        if (opts.$retries && opts.$retries > 0) {\n            req.retry(opts.$retries);\n        }\n        if (opts.$timeout && opts.$timeout > 0 || opts.$deadline && opts.$deadline > 0) {\n            req.timeout({\n                deadline: opts.$deadline,\n                response: opts.$timeout\n            });\n        }\n        req.end((error, response) => {\n            // an error will also be emitted for a 4xx and 5xx status code\n            // the error object will then have error.status and error.response fields\n            // see superagent error handling: https://github.com/visionmedia/superagent/blob/master/docs/index.md#error-handling\n            if (error) {\n                reject(error);\n                this.errorHandlers.forEach(handler => handler(error));\n            }\n            else {\n                resolve(response);\n            }\n        });\n    }\n    convertParameterCollectionFormat(param, collectionFormat) {\n        if (Array.isArray(param) && param.length >= 2) {\n            switch (collectionFormat) {\n                case \"csv\":\n                    return param.join(\",\");\n                case \"ssv\":\n                    return param.join(\" \");\n                case \"tsv\":\n                    return param.join(\"\\t\");\n                case \"pipes\":\n                    return param.join(\"|\");\n                default:\n                    return param;\n            }\n        }\n        return param;\n    }\n    devices_registerUserForDeviceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/users/{user_id}/devices/register';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{user_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Registers a user for an existing device\n     * @method\n     * @name AppCenter#devices_registerUserForDevice\n     * @param {string} userId - The ID of the user\n     * @param {} body - The device info.\n     */\n    devices_registerUserForDevice(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/users/{user_id}/devices/register';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{user_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userId'], '').toString())}`);\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    notifications_getUserEmailSettingsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/notifications/emailSettings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get Default email notification settings for the user\n     * @method\n     * @name AppCenter#notifications_getUserEmailSettings\n     */\n    notifications_getUserEmailSettings(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/notifications/emailSettings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Users_getUserMetadataURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/metadata/optimizely';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#Users_getUserMetadata\n     */\n    Users_getUserMetadata(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/metadata/optimizely';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_rejectURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/orgs/{invitation_token}/reject';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Rejects a pending organization invitation\n     * @method\n     * @name AppCenter#orgInvitations_reject\n     * @param {string} invitationToken - The app invitation token that was sent to the user\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    orgInvitations_reject(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/orgs/{invitation_token}/reject';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n            if (parameters['invitationToken'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationToken'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_acceptURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/orgs/{invitation_token}/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Accepts a pending organization invitation for the specified user\n     * @method\n     * @name AppCenter#orgInvitations_accept\n     * @param {string} invitationToken - The app invitation token that was sent to the user\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    orgInvitations_accept(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/orgs/{invitation_token}/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n            if (parameters['invitationToken'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationToken'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroupInvitations_acceptAllURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/distribution_groups/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Accepts all pending invitations to distribution groups for the specified user\n     * @method\n     * @name AppCenter#distributionGroupInvitations_acceptAll\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    distributionGroupInvitations_acceptAll(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/distribution_groups/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_rejectURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/apps/{invitation_token}/reject';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Rejects a pending invitation for the specified user\n     * @method\n     * @name AppCenter#appInvitations_reject\n     * @param {string} invitationToken - The app invitation token that was sent to the user\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    appInvitations_reject(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/apps/{invitation_token}/reject';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n            if (parameters['invitationToken'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationToken'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_acceptURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/apps/{invitation_token}/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Accepts a pending invitation for the specified user\n     * @method\n     * @name AppCenter#appInvitations_accept\n     * @param {string} invitationToken - The app invitation token that was sent to the user\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    appInvitations_accept(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/invitations/apps/{invitation_token}/accept';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{invitation_token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['invitationToken'], '').toString())}`);\n            if (parameters['invitationToken'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationToken'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    sharedconnection_ConnectionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/export/serviceConnections';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets all service connections of the service type for GDPR export.\n     * @method\n     * @name AppCenter#sharedconnection_Connections\n     */\n    sharedconnection_Connections(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/export/serviceConnections';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_CancelExportRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export/{token}/cancel';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_CancelExportRequest\n     * @param {string} token - Unique request ID (GUID)\n     */\n    DataSubjectRight_CancelExportRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export/{token}/cancel';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n            if (parameters['token'] === undefined) {\n                reject(new Error('Missing required  parameter: token'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_ExportStatusRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export/{token}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_ExportStatusRequest\n     * @param {string} token - Unique request ID (GUID)\n     */\n    DataSubjectRight_ExportStatusRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export/{token}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n            if (parameters['token'] === undefined) {\n                reject(new Error('Missing required  parameter: token'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_ExportRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_ExportRequest\n     */\n    DataSubjectRight_ExportRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_CancelDeleteRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete/{token}/cancel';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_CancelDeleteRequest\n     * @param {string} token - Unique request ID (GUID)\n     * @param {} email - Microsoft Visual Studio App Center API\n     */\n    DataSubjectRight_CancelDeleteRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete/{token}/cancel';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n            if (parameters['token'] === undefined) {\n                reject(new Error('Missing required  parameter: token'));\n                return;\n            }\n            if (parameters['email'] !== undefined) {\n                body = parameters['email'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_DeleteStatusRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete/{token}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n        if (parameters['email'] !== undefined) {\n            queryParameters['email'] = this.convertParameterCollectionFormat(parameters['email'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_DeleteStatusRequest\n     * @param {string} token - Unique request ID (GUID)\n     * @param {string} email - Email used for delete with x-authz-bypass headers\n     */\n    DataSubjectRight_DeleteStatusRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete/{token}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{token}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['token'], '').toString())}`);\n            if (parameters['token'] === undefined) {\n                reject(new Error('Missing required  parameter: token'));\n                return;\n            }\n            if (parameters['email'] !== undefined) {\n                queryParameters['email'] = this.convertParameterCollectionFormat(parameters['email'], '');\n            }\n            if (parameters['email'] === undefined) {\n                reject(new Error('Missing required  parameter: email'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    DataSubjectRight_DeleteRequestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     *\n     * @method\n     * @name AppCenter#DataSubjectRight_DeleteRequest\n     */\n    DataSubjectRight_DeleteRequest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/dsr/delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_deviceDetailsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices/{device_udid}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{device_udid}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deviceUdid'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the device details.\n     * @method\n     * @name AppCenter#devices_deviceDetails\n     * @param {string} deviceUdid - The UDID of the device\n     */\n    devices_deviceDetails(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices/{device_udid}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{device_udid}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deviceUdid'], '').toString())}`);\n            if (parameters['deviceUdid'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceUdid'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_removeUserDeviceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices/{device_udid}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{device_udid}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deviceUdid'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes an existing device from a user\n     * @method\n     * @name AppCenter#devices_removeUserDevice\n     * @param {string} deviceUdid - The UDID of the device\n     */\n    devices_removeUserDevice(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices/{device_udid}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{device_udid}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deviceUdid'], '').toString())}`);\n            if (parameters['deviceUdid'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceUdid'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_userDevicesListURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns all devices associated with the given user.\n     * @method\n     * @name AppCenter#devices_userDevicesList\n     */\n    devices_userDevicesList(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user/devices';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the user profile data\n     * @method\n     * @name AppCenter#users_get\n     */\n    users_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates the user profile and returns the updated user data\n     * @method\n     * @name AppCenter#users_update\n     * @param {} user - The data for the created user\n     */\n    users_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/user';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['user'] !== undefined) {\n                body = parameters['user'];\n            }\n            if (parameters['user'] === undefined) {\n                reject(new Error('Missing required  parameter: user'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getLatestByHashURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/sdk/apps/{app_secret}/releases/{release_hash}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n        path = path.replace('{release_hash}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseHash'], '').toString())}`);\n        if (parameters['udid'] !== undefined) {\n            queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.\n     * @method\n     * @name AppCenter#releases_getLatestByHash\n     * @param {string} appSecret - The secret of the target application\n     * @param {string} releaseHash - The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user.\n     * @param {string} udid - When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.\n     */\n    releases_getLatestByHash(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/sdk/apps/{app_secret}/releases/{release_hash}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n            if (parameters['appSecret'] === undefined) {\n                reject(new Error('Missing required  parameter: appSecret'));\n                return;\n            }\n            path = path.replace('{release_hash}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseHash'], '').toString())}`);\n            if (parameters['releaseHash'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseHash'));\n                return;\n            }\n            if (parameters['udid'] !== undefined) {\n                queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getLatestPrivateReleaseURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/sdk/apps/{app_secret}/releases/private/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n        if (parameters['udid'] !== undefined) {\n            queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get the latest release distributed to a private group the given user is a member of for the given app.\n     * @method\n     * @name AppCenter#releases_getLatestPrivateRelease\n     * @param {string} appSecret - The secret of the target application\n     * @param {string} udid - When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.\n     */\n    releases_getLatestPrivateRelease(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/sdk/apps/{app_secret}/releases/private/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n            if (parameters['appSecret'] === undefined) {\n                reject(new Error('Missing required  parameter: appSecret'));\n                return;\n            }\n            if (parameters['udid'] !== undefined) {\n                queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getSparkleFeedURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sparkle/apps/{app_secret}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the sparkle feed of the releases that are distributed to all the public distribution groups.\n     * @method\n     * @name AppCenter#releases_getSparkleFeed\n     * @param {string} appSecret - The secret of the application.\n     */\n    releases_getSparkleFeed(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sparkle/apps/{app_secret}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n            if (parameters['appSecret'] === undefined) {\n                reject(new Error('Missing required  parameter: appSecret'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getPublicGroupsForReleaseByHashURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n        path = path.replace('{release_hash}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseHash'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get all public distribution groups that a given release has been distributed to\n     * @method\n     * @name AppCenter#releases_getPublicGroupsForReleaseByHash\n     * @param {string} appSecret - The secret of the target application\n     * @param {string} releaseHash - The hash of the release\n     */\n    releases_getPublicGroupsForReleaseByHash(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n            if (parameters['appSecret'] === undefined) {\n                reject(new Error('Missing required  parameter: appSecret'));\n                return;\n            }\n            path = path.replace('{release_hash}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseHash'], '').toString())}`);\n            if (parameters['releaseHash'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseHash'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getLatestByPublicDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n        path = path.replace('{distribution_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get a release with 'latest' for the given public group.\n     * @method\n     * @name AppCenter#releases_getLatestByPublicDistributionGroup\n     * @param {string} appSecret - The secret of the target application\n     * @param {string} distributionGroupId - the id for destination\n     */\n    releases_getLatestByPublicDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_secret}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appSecret'], '').toString())}`);\n            if (parameters['appSecret'] === undefined) {\n                reject(new Error('Missing required  parameter: appSecret'));\n                return;\n            }\n            path = path.replace('{distribution_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupId'], '').toString())}`);\n            if (parameters['distributionGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupId'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_webhookURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/hooks';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Public webhook sink\n     * @method\n     * @name AppCenter#builds_webhook\n     * @param {} payload - Microsoft Visual Studio App Center API\n     */\n    builds_webhook(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/hooks';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['payload'] !== undefined) {\n                body = parameters['payload'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushAcquisition_updateCheckURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/update_check';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['deploymentKey'] !== undefined) {\n            queryParameters['deployment_key'] = this.convertParameterCollectionFormat(parameters['deploymentKey'], '');\n        }\n        if (parameters['appVersion'] !== undefined) {\n            queryParameters['app_version'] = this.convertParameterCollectionFormat(parameters['appVersion'], '');\n        }\n        if (parameters['packageHash'] !== undefined) {\n            queryParameters['package_hash'] = this.convertParameterCollectionFormat(parameters['packageHash'], '');\n        }\n        if (parameters['label'] !== undefined) {\n            queryParameters['label'] = this.convertParameterCollectionFormat(parameters['label'], '');\n        }\n        if (parameters['clientUniqueId'] !== undefined) {\n            queryParameters['client_unique_id'] = this.convertParameterCollectionFormat(parameters['clientUniqueId'], '');\n        }\n        if (parameters['isCompanion'] !== undefined) {\n            queryParameters['is_companion'] = this.convertParameterCollectionFormat(parameters['isCompanion'], '');\n        }\n        if (parameters['previousLabelOrAppVersion'] !== undefined) {\n            queryParameters['previous_label_or_app_version'] = this.convertParameterCollectionFormat(parameters['previousLabelOrAppVersion'], '');\n        }\n        if (parameters['previousDeploymentKey'] !== undefined) {\n            queryParameters['previous_deployment_key'] = this.convertParameterCollectionFormat(parameters['previousDeploymentKey'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Check for updates\n     * @method\n     * @name AppCenter#codePushAcquisition_updateCheck\n     * @param {string} deploymentKey - Microsoft Visual Studio App Center API\n     * @param {string} appVersion - Microsoft Visual Studio App Center API\n     * @param {string} packageHash - Microsoft Visual Studio App Center API\n     * @param {string} label - Microsoft Visual Studio App Center API\n     * @param {string} clientUniqueId - Microsoft Visual Studio App Center API\n     * @param {boolean} isCompanion - Microsoft Visual Studio App Center API\n     * @param {string} previousLabelOrAppVersion - Microsoft Visual Studio App Center API\n     * @param {string} previousDeploymentKey - Microsoft Visual Studio App Center API\n     */\n    codePushAcquisition_updateCheck(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/update_check';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deploymentKey'] !== undefined) {\n                queryParameters['deployment_key'] = this.convertParameterCollectionFormat(parameters['deploymentKey'], '');\n            }\n            if (parameters['deploymentKey'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentKey'));\n                return;\n            }\n            if (parameters['appVersion'] !== undefined) {\n                queryParameters['app_version'] = this.convertParameterCollectionFormat(parameters['appVersion'], '');\n            }\n            if (parameters['appVersion'] === undefined) {\n                reject(new Error('Missing required  parameter: appVersion'));\n                return;\n            }\n            if (parameters['packageHash'] !== undefined) {\n                queryParameters['package_hash'] = this.convertParameterCollectionFormat(parameters['packageHash'], '');\n            }\n            if (parameters['label'] !== undefined) {\n                queryParameters['label'] = this.convertParameterCollectionFormat(parameters['label'], '');\n            }\n            if (parameters['clientUniqueId'] !== undefined) {\n                queryParameters['client_unique_id'] = this.convertParameterCollectionFormat(parameters['clientUniqueId'], '');\n            }\n            if (parameters['isCompanion'] !== undefined) {\n                queryParameters['is_companion'] = this.convertParameterCollectionFormat(parameters['isCompanion'], '');\n            }\n            if (parameters['previousLabelOrAppVersion'] !== undefined) {\n                queryParameters['previous_label_or_app_version'] = this.convertParameterCollectionFormat(parameters['previousLabelOrAppVersion'], '');\n            }\n            if (parameters['previousDeploymentKey'] !== undefined) {\n                queryParameters['previous_deployment_key'] = this.convertParameterCollectionFormat(parameters['previousDeploymentKey'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushAcquisition_getAcquisitionStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the acquisition service status to the caller\n     * @method\n     * @name AppCenter#codePushAcquisition_getAcquisitionStatus\n     */\n    codePushAcquisition_getAcquisitionStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushAcquisition_updateDownloadStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/report_status/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Report download of specified release\n     * @method\n     * @name AppCenter#codePushAcquisition_updateDownloadStatus\n     * @param {} releaseMetadata - Deployment status metric properties\n     */\n    codePushAcquisition_updateDownloadStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/report_status/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['releaseMetadata'] !== undefined) {\n                body = parameters['releaseMetadata'];\n            }\n            if (parameters['releaseMetadata'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseMetadata'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushAcquisition_updateDeployStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/report_status/deploy';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Report Deployment status metric\n     * @method\n     * @name AppCenter#codePushAcquisition_updateDeployStatus\n     * @param {} releaseMetadata - Deployment status metric properties\n     */\n    codePushAcquisition_updateDeployStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/codepush/report_status/deploy';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['releaseMetadata'] !== undefined) {\n                body = parameters['releaseMetadata'];\n            }\n            if (parameters['releaseMetadata'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseMetadata'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distibutionReleases_installAnalyticsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/apps/{owner_name}/{app_name}/install_analytics';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Notify download(s) for the provided distribution release(s).\n     * @method\n     * @name AppCenter#distibutionReleases_installAnalytics\n     * @param {string} ownerName - The name of the app owner\n     * @param {string} appName - The name of the app\n     * @param {} body - The install analytics request payload\n     */\n    distibutionReleases_installAnalytics(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/apps/{owner_name}/{app_name}/install_analytics';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getIosManifestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appId'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        if (parameters['token'] !== undefined) {\n            queryParameters['token'] = this.convertParameterCollectionFormat(parameters['token'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.\n     * @method\n     * @name AppCenter#releases_getIosManifest\n     * @param {string} appId - The ID of the application\n     * @param {integer} releaseId - The release_id\n     * @param {string} token - A hash that authorizes the download if it matches the release info.\n     */\n    releases_getIosManifest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appId'], '').toString())}`);\n            if (parameters['appId'] === undefined) {\n                reject(new Error('Missing required  parameter: appId'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['token'] !== undefined) {\n                queryParameters['token'] = this.convertParameterCollectionFormat(parameters['token'], '');\n            }\n            if (parameters['token'] === undefined) {\n                reject(new Error('Missing required  parameter: token'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_getForOrgUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get a user apps information from an organization by name\n     * @method\n     * @name AppCenter#apps_getForOrgUser\n     * @param {string} orgName - The organization's name\n     * @param {string} userName - The slug name of the user\n     */\n    apps_getForOrgUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_updateOrgRoleURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates the given organization user\n     * @method\n     * @name AppCenter#users_updateOrgRole\n     * @param {string} orgName - The organization's name\n     * @param {string} userName - The slug name of the user\n     * @param {} organizationUser - Microsoft Visual Studio App Center API\n     */\n    users_updateOrgRole(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n            if (parameters['organizationUser'] !== undefined) {\n                body = parameters['organizationUser'];\n            }\n            if (parameters['organizationUser'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationUser'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_removeFromOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes a user from an organization.\n     * @method\n     * @name AppCenter#users_removeFromOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} userName - The slug name of the user\n     */\n    users_removeFromOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_getForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission\n     * @method\n     * @name AppCenter#users_getForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} userName - The slug name of the user\n     */\n    users_getForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_listForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of users that belong to an organization\n     * @method\n     * @name AppCenter#users_listForOrg\n     * @param {string} orgName - The organization's name\n     */\n    users_listForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_listAllTestersForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a unique list of users including the whole organization members plus testers in any shared group of that org\n     * @method\n     * @name AppCenter#distributionGroups_listAllTestersForOrg\n     * @param {string} orgName - The organization's name\n     */\n    distributionGroups_listAllTestersForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_removeUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes a user from a team that is owned by an organization\n     * @method\n     * @name AppCenter#teams_removeUser\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {string} userName - The slug name of the user\n     */\n    teams_removeUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            path = path.replace('{user_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userName'], '').toString())}`);\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_getUsersURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the users of a team which is owned by an organization\n     * @method\n     * @name AppCenter#teams_getUsers\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     */\n    teams_getUsers(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_addUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Adds a new user to a team that is owned by an organization\n     * @method\n     * @name AppCenter#teams_addUser\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {} userEmail - The email of the user to add to the team\n     */\n    teams_addUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters['userEmail'] !== undefined) {\n                body = parameters['userEmail'];\n            }\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_updatePermissionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates the permissions the team has to the app\n     * @method\n     * @name AppCenter#teams_updatePermissions\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {string} appName - The name of the application\n     * @param {} team - Microsoft Visual Studio App Center API\n     */\n    teams_updatePermissions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['team'] !== undefined) {\n                body = parameters['team'];\n            }\n            if (parameters['team'] === undefined) {\n                reject(new Error('Missing required  parameter: team'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_removeAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes an app from a team\n     * @method\n     * @name AppCenter#teams_removeApp\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {string} appName - The name of the application\n     */\n    teams_removeApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_addAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Adds an app to a team\n     * @method\n     * @name AppCenter#teams_addApp\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {} app - The name of the app to be added to the team. The app has to be owned by the organization.\n     */\n    teams_addApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters['app'] !== undefined) {\n                body = parameters['app'];\n            }\n            if (parameters['app'] === undefined) {\n                reject(new Error('Missing required  parameter: app'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_listAppsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the apps a team has access to\n     * @method\n     * @name AppCenter#teams_listApps\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     */\n    teams_listApps(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_getTeamURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the details of a single team\n     * @method\n     * @name AppCenter#teams_getTeam\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     */\n    teams_getTeam(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a single team\n     * @method\n     * @name AppCenter#teams_delete\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     */\n    teams_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates a single team\n     * @method\n     * @name AppCenter#teams_update\n     * @param {string} orgName - The organization's name\n     * @param {string} teamName - The team's name\n     * @param {} team - The information used to update the team\n     */\n    teams_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams/{team_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{team_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['teamName'], '').toString())}`);\n            if (parameters['teamName'] === undefined) {\n                reject(new Error('Missing required  parameter: teamName'));\n                return;\n            }\n            if (parameters['team'] !== undefined) {\n                body = parameters['team'];\n            }\n            if (parameters['team'] === undefined) {\n                reject(new Error('Missing required  parameter: team'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_listAllURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the list of all teams in this org\n     * @method\n     * @name AppCenter#teams_listAll\n     * @param {string} orgName - The organization's name\n     */\n    teams_listAll(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    teams_createTeamURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a team and returns it\n     * @method\n     * @name AppCenter#teams_createTeam\n     * @param {string} orgName - The organization's name\n     * @param {} team - The information used to create the team\n     */\n    teams_createTeam(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['team'] !== undefined) {\n                body = parameters['team'];\n            }\n            if (parameters['team'] === undefined) {\n                reject(new Error('Missing required  parameter: team'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_URL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}/revoke';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes a user's invitation to an organization\n     * @method\n     * @name AppCenter#orgInvitations_\n     * @param {string} orgName - The organization's name\n     * @param {string} email - The email address of the user to send the password reset mail to.\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    orgInvitations_(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}/revoke';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n            if (parameters['email'] === undefined) {\n                reject(new Error('Missing required  parameter: email'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_sendNewInvitationURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}/resend';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Cancels an existing organization invitation for the user and sends a new one\n     * @method\n     * @name AppCenter#orgInvitations_sendNewInvitation\n     * @param {string} orgName - The organization's name\n     * @param {string} email - The email address of the user to send the password reset mail to.\n     * @param {} role - The role of the user to be added\n     */\n    orgInvitations_sendNewInvitation(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}/resend';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n            if (parameters['email'] === undefined) {\n                reject(new Error('Missing required  parameter: email'));\n                return;\n            }\n            if (parameters['role'] !== undefined) {\n                body = parameters['role'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Allows the role of an invited user to be changed\n     * @method\n     * @name AppCenter#orgInvitations_update\n     * @param {string} orgName - The organization's name\n     * @param {string} email - The email address of the user to send the password reset mail to.\n     * @param {} userRole - The new role of the user\n     */\n    orgInvitations_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations/{email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['email'], '').toString())}`);\n            if (parameters['email'] === undefined) {\n                reject(new Error('Missing required  parameter: email'));\n                return;\n            }\n            if (parameters['userRole'] !== undefined) {\n                body = parameters['userRole'];\n            }\n            if (parameters['userRole'] === undefined) {\n                reject(new Error('Missing required  parameter: userRole'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Invites a new or existing user to an organization\n     * @method\n     * @name AppCenter#orgInvitations_create\n     * @param {string} orgName - The organization's name\n     * @param {} userEmail - The email of the user to invite\n     */\n    orgInvitations_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['userEmail'] !== undefined) {\n                body = parameters['userEmail'];\n            }\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes a user's invitation to an organization\n     * @method\n     * @name AppCenter#orgInvitations_delete\n     * @param {string} orgName - The organization's name\n     * @param {} userEmail - The email of the user whose invitation should be removed\n     */\n    orgInvitations_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['userEmail'] !== undefined) {\n                body = parameters['userEmail'];\n            }\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    orgInvitations_listPendingURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the pending invitations for the organization\n     * @method\n     * @name AppCenter#orgInvitations_listPending\n     * @param {string} orgName - The organization's name\n     */\n    orgInvitations_listPending(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_detailsForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups_details';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters['appsLimit'] !== undefined) {\n            queryParameters['apps_limit'] = this.convertParameterCollectionFormat(parameters['appsLimit'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of distribution groups with details for an organization\n     * @method\n     * @name AppCenter#distributionGroups_detailsForOrg\n     * @param {string} orgName - The organization's name\n     * @param {number} appsLimit - The max number of apps to include in the response\n     */\n    distributionGroups_detailsForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups_details';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['appsLimit'] !== undefined) {\n                queryParameters['apps_limit'] = this.convertParameterCollectionFormat(parameters['appsLimit'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_resendSharedInviteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Resend shared distribution group invite notification to previously invited testers\n     * @method\n     * @name AppCenter#distributionGroups_resendSharedInvite\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} members - The list of members to add\n     */\n    distributionGroups_resendSharedInvite(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['members'] !== undefined) {\n                body = parameters['members'];\n            }\n            if (parameters['members'] === undefined) {\n                reject(new Error('Missing required  parameter: members'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_bulkDeleteUsersURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete testers from distribution group in an org\n     * @method\n     * @name AppCenter#distributionGroups_bulkDeleteUsers\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} members - The list of members to add\n     */\n    distributionGroups_bulkDeleteUsers(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['members'] !== undefined) {\n                body = parameters['members'];\n            }\n            if (parameters['members'] === undefined) {\n                reject(new Error('Missing required  parameter: members'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_listUsersForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of member in the distribution group specified\n     * @method\n     * @name AppCenter#distributionGroups_listUsersForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_listUsersForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_addUsersForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Accepts an array of user email addresses to get added to the specified group\n     * @method\n     * @name AppCenter#distributionGroups_addUsersForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} memberEmails - list of user email addresses that should get added as members to the specified group\n     */\n    distributionGroups_addUsersForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['memberEmails'] !== undefined) {\n                body = parameters['memberEmails'];\n            }\n            if (parameters['memberEmails'] === undefined) {\n                reject(new Error('Missing required  parameter: memberEmails'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_bulkDeleteAppsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete apps from distribution group in an org\n     * @method\n     * @name AppCenter#distributionGroups_bulkDeleteApps\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} apps - The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.\n     */\n    distributionGroups_bulkDeleteApps(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['apps'] !== undefined) {\n                body = parameters['apps'];\n            }\n            if (parameters['apps'] === undefined) {\n                reject(new Error('Missing required  parameter: apps'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_getAppsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get apps from a distribution group in an org\n     * @method\n     * @name AppCenter#distributionGroups_getApps\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_getApps(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_addAppsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Add apps to distribution group in an org\n     * @method\n     * @name AppCenter#distributionGroups_addApps\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} apps - The name of the apps to be added to the distribution group. The apps have to be owned by the organization.\n     */\n    distributionGroups_addApps(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['apps'] !== undefined) {\n                body = parameters['apps'];\n            }\n            if (parameters['apps'] === undefined) {\n                reject(new Error('Missing required  parameter: apps'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_getForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a single distribution group in org for a given distribution group name\n     * @method\n     * @name AppCenter#distributionGroups_getForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_getForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_patchForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update one given distribution group name in an org\n     * @method\n     * @name AppCenter#distributionGroups_patchForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} distributionGroupForOrg - The attributes to update for the distribution group\n     */\n    distributionGroups_patchForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['distributionGroupForOrg'] !== undefined) {\n                body = parameters['distributionGroupForOrg'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_deleteForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a single distribution group from an org with a given distribution group name\n     * @method\n     * @name AppCenter#distributionGroups_deleteForOrg\n     * @param {string} orgName - The organization's name\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_deleteForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_createForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a disribution goup which can be shared across apps under an organization\n     * @method\n     * @name AppCenter#distributionGroups_createForOrg\n     * @param {string} orgName - The organization's name\n     * @param {} distributionGroup - The attributes to update for the distribution group\n     */\n    distributionGroups_createForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['distributionGroup'] !== undefined) {\n                body = parameters['distributionGroup'];\n            }\n            if (parameters['distributionGroup'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroup'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_listForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of distribution groups in the org specified\n     * @method\n     * @name AppCenter#distributionGroups_listForOrg\n     * @param {string} orgName - The organization's name\n     */\n    distributionGroups_listForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    azureSubscription_listForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of azure subscriptions for the organization\n     * @method\n     * @name AppCenter#azureSubscription_listForOrg\n     * @param {string} orgName - The organization's name\n     */\n    azureSubscription_listForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organization_updateAvatarURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Sets the organization avatar\n     * @method\n     * @name AppCenter#organization_updateAvatar\n     * @param {string} orgName - The organization's name\n     * @param {file} avatar - The image for an Organization avatar to upload.\n     */\n    organization_updateAvatar(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'multipart/form-data';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['avatar'] !== undefined) {\n                form['avatar'] = parameters['avatar'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organization_deleteAvatarURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes the uploaded organization avatar\n     * @method\n     * @name AppCenter#organization_deleteAvatar\n     * @param {string} orgName - The organization's name\n     */\n    organization_deleteAvatar(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_createForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new app for the organization and returns it to the caller\n     * @method\n     * @name AppCenter#apps_createForOrg\n     * @param {string} orgName - The organization's name\n     * @param {} app - The data for the app\n     */\n    apps_createForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['app'] !== undefined) {\n                body = parameters['app'];\n            }\n            if (parameters['app'] === undefined) {\n                reject(new Error('Missing required  parameter: app'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_listForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of apps for the organization\n     * @method\n     * @name AppCenter#apps_listForOrg\n     * @param {string} orgName - The organization's name\n     */\n    apps_listForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the details of a single organization\n     * @method\n     * @name AppCenter#organizations_get\n     * @param {string} orgName - The organization's name\n     */\n    organizations_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of organizations the requesting user has access to\n     * @method\n     * @name AppCenter#organizations_update\n     * @param {string} orgName - The organization's name\n     * @param {} org - The data for the org\n     */\n    organizations_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['org'] !== undefined) {\n                body = parameters['org'];\n            }\n            if (parameters['org'] === undefined) {\n                reject(new Error('Missing required  parameter: org'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a single organization\n     * @method\n     * @name AppCenter#organizations_delete\n     * @param {string} orgName - The organization's name\n     */\n    organizations_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{org_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{org_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    billingAggregatedInformation_getForOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{orgName}/billing/aggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{orgName}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n        if (parameters['service'] !== undefined) {\n            queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n        }\n        if (parameters['period'] !== undefined) {\n            queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n        }\n        if (parameters['showOriginalPlans'] !== undefined) {\n            queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Aggregated Billing Information for a given Organization.\n     * @method\n     * @name AppCenter#billingAggregatedInformation_getForOrg\n     * @param {string} orgName - The name of the Organization\n     * @param {string} service - Type of service that should be included in the Billing Information\n     * @param {string} period - Type of period that should be included in the Billing Information\n     * @param {boolean} showOriginalPlans - Controls whether the API should show the original plan when Azure Subscription is not enabled\n     */\n    billingAggregatedInformation_getForOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs/{orgName}/billing/aggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{orgName}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['orgName'], '').toString())}`);\n            if (parameters['orgName'] === undefined) {\n                reject(new Error('Missing required  parameter: orgName'));\n                return;\n            }\n            if (parameters['service'] !== undefined) {\n                queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n            }\n            if (parameters['period'] !== undefined) {\n                queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n            }\n            if (parameters['showOriginalPlans'] !== undefined) {\n                queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_createOrUpdateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new organization and returns it to the caller\n     * @method\n     * @name AppCenter#organizations_createOrUpdate\n     * @param {} organization - The organization data\n     */\n    organizations_createOrUpdate(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['organization'] !== undefined) {\n                body = parameters['organization'];\n            }\n            if (parameters['organization'] === undefined) {\n                reject(new Error('Missing required  parameter: organization'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of organizations the requesting user has access to\n     * @method\n     * @name AppCenter#organizations_list\n     */\n    organizations_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/orgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    legacyCodePushAcquisition_updateCheckURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/updateCheck';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['deploymentKey'] !== undefined) {\n            queryParameters['deploymentKey'] = this.convertParameterCollectionFormat(parameters['deploymentKey'], '');\n        }\n        if (parameters['appVersion'] !== undefined) {\n            queryParameters['appVersion'] = this.convertParameterCollectionFormat(parameters['appVersion'], '');\n        }\n        if (parameters['packageHash'] !== undefined) {\n            queryParameters['packageHash'] = this.convertParameterCollectionFormat(parameters['packageHash'], '');\n        }\n        if (parameters['label'] !== undefined) {\n            queryParameters['label'] = this.convertParameterCollectionFormat(parameters['label'], '');\n        }\n        if (parameters['clientUniqueId'] !== undefined) {\n            queryParameters['clientUniqueId'] = this.convertParameterCollectionFormat(parameters['clientUniqueId'], '');\n        }\n        if (parameters['isCompanion'] !== undefined) {\n            queryParameters['isCompanion'] = this.convertParameterCollectionFormat(parameters['isCompanion'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Check for updates\n     * @method\n     * @name AppCenter#legacyCodePushAcquisition_updateCheck\n     * @param {string} deploymentKey - Microsoft Visual Studio App Center API\n     * @param {string} appVersion - Microsoft Visual Studio App Center API\n     * @param {string} packageHash - Microsoft Visual Studio App Center API\n     * @param {string} label - Microsoft Visual Studio App Center API\n     * @param {string} clientUniqueId - Microsoft Visual Studio App Center API\n     * @param {string} isCompanion - Microsoft Visual Studio App Center API\n     */\n    legacyCodePushAcquisition_updateCheck(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/updateCheck';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deploymentKey'] !== undefined) {\n                queryParameters['deploymentKey'] = this.convertParameterCollectionFormat(parameters['deploymentKey'], '');\n            }\n            if (parameters['appVersion'] !== undefined) {\n                queryParameters['appVersion'] = this.convertParameterCollectionFormat(parameters['appVersion'], '');\n            }\n            if (parameters['packageHash'] !== undefined) {\n                queryParameters['packageHash'] = this.convertParameterCollectionFormat(parameters['packageHash'], '');\n            }\n            if (parameters['label'] !== undefined) {\n                queryParameters['label'] = this.convertParameterCollectionFormat(parameters['label'], '');\n            }\n            if (parameters['clientUniqueId'] !== undefined) {\n                queryParameters['clientUniqueId'] = this.convertParameterCollectionFormat(parameters['clientUniqueId'], '');\n            }\n            if (parameters['isCompanion'] !== undefined) {\n                queryParameters['isCompanion'] = this.convertParameterCollectionFormat(parameters['isCompanion'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    legacyCodePushAcquisition_updateDownloadStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/reportStatus/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Report download of specified release\n     * @method\n     * @name AppCenter#legacyCodePushAcquisition_updateDownloadStatus\n     * @param {} releaseMetadata - Deployment status metric properties\n     */\n    legacyCodePushAcquisition_updateDownloadStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/reportStatus/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['releaseMetadata'] !== undefined) {\n                body = parameters['releaseMetadata'];\n            }\n            if (parameters['releaseMetadata'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseMetadata'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    legacyCodePushAcquisition_updateInstallsStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/reportStatus/deploy';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Report deploy of specified release\n     * @method\n     * @name AppCenter#legacyCodePushAcquisition_updateInstallsStatus\n     * @param {} releaseMetadata - Deployment status metric properties\n     */\n    legacyCodePushAcquisition_updateInstallsStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/legacy/reportStatus/deploy';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['releaseMetadata'] !== undefined) {\n                body = parameters['releaseMetadata'];\n            }\n            if (parameters['releaseMetadata'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseMetadata'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    invitations_sentURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/invitations/sent';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns all invitations sent by the caller\n     * @method\n     * @name AppCenter#invitations_sent\n     */\n    invitations_sent(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/invitations/sent';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    billingAggregatedInformation_getAllURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/billing/allAccountsAggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['service'] !== undefined) {\n            queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n        }\n        if (parameters['period'] !== undefined) {\n            queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n        }\n        if (parameters['showOriginalPlans'] !== undefined) {\n            queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.\n     * @method\n     * @name AppCenter#billingAggregatedInformation_getAll\n     * @param {string} service - Type of service that should be included in the Billing Information\n     * @param {string} period - Type of period that should be included in the Billing Information\n     * @param {boolean} showOriginalPlans - Controls whether the API should show the original plan when Azure Subscription is not enabled\n     */\n    billingAggregatedInformation_getAll(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/billing/allAccountsAggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['service'] !== undefined) {\n                queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n            }\n            if (parameters['period'] !== undefined) {\n                queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n            }\n            if (parameters['showOriginalPlans'] !== undefined) {\n                queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    azureSubscription_listForUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of azure subscriptions for the user\n     * @method\n     * @name AppCenter#azureSubscription_listForUser\n     */\n    azureSubscription_listForUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    webhooks_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/webhooks';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get web hooks configured for a particular app\n     * @method\n     * @name AppCenter#webhooks_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    webhooks_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/webhooks';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_removeUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes the user from the app\n     * @method\n     * @name AppCenter#apps_removeUser\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} userEmail - The user email of the user to delete\n     */\n    apps_removeUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_updateUserPermissionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update user permission for the app\n     * @method\n     * @name AppCenter#apps_updateUserPermissions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} userEmail - The user email of the user to patch\n     * @param {} userAppPermissionsData - The value to update the user permission for the app.\n     */\n    apps_updateUserPermissions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters['userAppPermissionsData'] !== undefined) {\n                body = parameters['userAppPermissionsData'];\n            }\n            if (parameters['userAppPermissionsData'] === undefined) {\n                reject(new Error('Missing required  parameter: userAppPermissionsData'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    users_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the users associated with the app specified with the given app name which belongs to the given owner.\n     * @method\n     * @name AppCenter#users_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    users_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/users';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getDeviceSetOfUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets a device set belonging to the user\n     * @method\n     * @name AppCenter#test_getDeviceSetOfUser\n     * @param {string} id - The UUID of the device set\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getDeviceSetOfUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_updateDeviceSetOfUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates a device set belonging to the user\n     * @method\n     * @name AppCenter#test_updateDeviceSetOfUser\n     * @param {string} id - The UUID of the device set\n     * @param {} deviceSet - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_updateDeviceSetOfUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            if (parameters['deviceSet'] !== undefined) {\n                body = parameters['deviceSet'];\n            }\n            if (parameters['deviceSet'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceSet'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_deleteDeviceSetOfUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a device set belonging to the user\n     * @method\n     * @name AppCenter#test_deleteDeviceSetOfUser\n     * @param {string} id - The UUID of the device set\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_deleteDeviceSetOfUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_listDeviceSetsOfUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists device sets belonging to the user\n     * @method\n     * @name AppCenter#test_listDeviceSetsOfUser\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_listDeviceSetsOfUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createDeviceSetOfUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a device set belonging to the user\n     * @method\n     * @name AppCenter#test_createDeviceSetOfUser\n     * @param {} deviceSet - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createDeviceSetOfUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/user/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deviceSet'] !== undefined) {\n                body = parameters['deviceSet'];\n            }\n            if (parameters['deviceSet'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceSet'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getReleaseUploadStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['uploadId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get the current status of the release upload.\n     * @method\n     * @name AppCenter#releases_getReleaseUploadStatus\n     * @param {string} uploadId - The ID of the release upload\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_getReleaseUploadStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['uploadId'], '').toString())}`);\n            if (parameters['uploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: uploadId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_updateReleaseUploadStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['uploadId'], '').toString())}`);\n        if (parameters['extract'] !== undefined) {\n            queryParameters['extract'] = this.convertParameterCollectionFormat(parameters['extract'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update the current status of the release upload.\n     * @method\n     * @name AppCenter#releases_updateReleaseUploadStatus\n     * @param {string} uploadId - The ID of the release upload\n     * @param {} body - The release upload status information.\n     * @param {boolean} extract - A flag that indicates to extract release or not, true by default\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_updateReleaseUploadStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['uploadId'], '').toString())}`);\n            if (parameters['uploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: uploadId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            if (parameters['extract'] !== undefined) {\n                queryParameters['extract'] = this.convertParameterCollectionFormat(parameters['extract'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_createReleaseUploadURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Initiate a new release upload. This API is part of multi-step upload process.\n     * @method\n     * @name AppCenter#releases_createReleaseUpload\n     * @param {} body - Optional parameters to create releases with user defined metadata\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_createReleaseUpload(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/uploads/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_transferToOrgURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/transfer_to_org';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Transfers ownership of an app to a new organization\n     * @method\n     * @name AppCenter#apps_transferToOrg\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     */\n    apps_transferToOrg(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/transfer_to_org';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_transferOwnershipURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{destination_owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['destinationOwnerName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Transfers ownership of an app to a different user or organization\n     * @method\n     * @name AppCenter#apps_transferOwnership\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} emptyBody - allow empty body for custom http-client lib\n     * @param {string} destinationOwnerName - The name of the owner (user or organization) to which the app is being transferred\n     */\n    apps_transferOwnership(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['emptyBody'] !== undefined) {\n                body = parameters['emptyBody'];\n            }\n            path = path.replace('{destination_owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['destinationOwnerName'], '').toString())}`);\n            if (parameters['destinationOwnerName'] === undefined) {\n                reject(new Error('Missing required  parameter: destinationOwnerName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_listToolsetsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/toolsets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['tools'] !== undefined) {\n            queryParameters['tools'] = this.convertParameterCollectionFormat(parameters['tools'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns available toolsets for application\n     * @method\n     * @name AppCenter#builds_listToolsets\n     * @param {string} tools - Toolset name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_listToolsets(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/toolsets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['tools'] !== undefined) {\n                queryParameters['tools'] = this.convertParameterCollectionFormat(parameters['tools'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteTesterFromDestinationsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the given tester from the all releases\n     * @method\n     * @name AppCenter#releases_deleteTesterFromDestinations\n     * @param {string} testerId - The id of the tester\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_deleteTesterFromDestinations(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n            if (parameters['testerId'] === undefined) {\n                reject(new Error('Missing required  parameter: testerId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_listTestersURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the testers associated with the app specified with the given app name which belongs to the given owner.\n     * @method\n     * @name AppCenter#apps_listTesters\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    apps_listTesters(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getAllTestRunsForSeriesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns list of all test runs for a given test series\n     * @method\n     * @name AppCenter#test_getAllTestRunsForSeries\n     * @param {string} testSeriesSlug - The slug of the test series\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getAllTestRunsForSeries(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n            if (parameters['testSeriesSlug'] === undefined) {\n                reject(new Error('Missing required  parameter: testSeriesSlug'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_deleteTestSeriesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a single test series\n     * @method\n     * @name AppCenter#test_deleteTestSeries\n     * @param {string} testSeriesSlug - The slug of the test series\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_deleteTestSeries(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n            if (parameters['testSeriesSlug'] === undefined) {\n                reject(new Error('Missing required  parameter: testSeriesSlug'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_patchTestSeriesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates name and slug of a test series\n     * @method\n     * @name AppCenter#test_patchTestSeries\n     * @param {string} testSeriesSlug - The slug of the test series\n     * @param {} name - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_patchTestSeries(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_series_slug}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testSeriesSlug'], '').toString())}`);\n            if (parameters['testSeriesSlug'] === undefined) {\n                reject(new Error('Missing required  parameter: testSeriesSlug'));\n                return;\n            }\n            if (parameters['name'] !== undefined) {\n                body = parameters['name'];\n            }\n            if (parameters['name'] === undefined) {\n                reject(new Error('Missing required  parameter: name'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getAllTestSeriesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['query'] !== undefined) {\n            queryParameters['query'] = this.convertParameterCollectionFormat(parameters['query'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns list of all test series for an application\n     * @method\n     * @name AppCenter#test_getAllTestSeries\n     * @param {string} query - A query string to filter test series\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getAllTestSeries(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['query'] !== undefined) {\n                queryParameters['query'] = this.convertParameterCollectionFormat(parameters['query'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createTestSeriesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates new test series for an application\n     * @method\n     * @name AppCenter#test_createTestSeries\n     * @param {} testSeriesName - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createTestSeries(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_series';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['testSeriesName'] !== undefined) {\n                body = parameters['testSeriesName'];\n            }\n            if (parameters['testSeriesName'] === undefined) {\n                reject(new Error('Missing required  parameter: testSeriesName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_stopTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Stop a test run execution\n     * @method\n     * @name AppCenter#test_stopTestRun\n     * @param {string} testRunId - The ID of the test run to be stopped\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_stopTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getTestRunStateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets state of the test run\n     * @method\n     * @name AppCenter#test_getTestRunState\n     * @param {string} testRunId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getTestRunState(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_startTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Starts test run\n     * @method\n     * @name AppCenter#test_startTestRun\n     * @param {string} testRunId - The ID of the test run\n     * @param {} startOptions - Option required to start the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_startTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            if (parameters['startOptions'] !== undefined) {\n                body = parameters['startOptions'];\n            }\n            if (parameters['startOptions'] === undefined) {\n                reject(new Error('Missing required  parameter: startOptions'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getTestReportURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a single test report\n     * @method\n     * @name AppCenter#test_getTestReport\n     * @param {string} testRunId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getTestReport(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_uploadHashesBatchURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Adds file with the given hash to a test run\n     * @method\n     * @name AppCenter#test_uploadHashesBatch\n     * @param {string} testRunId - The ID of the test run\n     * @param {} fileInfo - File hash information\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_uploadHashesBatch(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            if (parameters['fileInfo'] !== undefined) {\n                body = parameters['fileInfo'];\n            }\n            if (parameters['fileInfo'] === undefined) {\n                reject(new Error('Missing required  parameter: fileInfo'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_uploadHashURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Adds file with the given hash to a test run\n     * @method\n     * @name AppCenter#test_uploadHash\n     * @param {string} testRunId - The ID of the test run\n     * @param {} fileInfo - File hash information\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_uploadHash(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            if (parameters['fileInfo'] !== undefined) {\n                body = parameters['fileInfo'];\n            }\n            if (parameters['fileInfo'] === undefined) {\n                reject(new Error('Missing required  parameter: fileInfo'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_startUploadingFileURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Uploads file for a test run\n     * @method\n     * @name AppCenter#test_startUploadingFile\n     * @param {string} testRunId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_startUploadingFile(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a single test runs\n     * @method\n     * @name AppCenter#test_getTestRun\n     * @param {string} testRunId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_archiveTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Logically deletes a test run\n     * @method\n     * @name AppCenter#test_archiveTestRun\n     * @param {string} testRunId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_archiveTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{test_run_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testRunId'], '').toString())}`);\n            if (parameters['testRunId'] === undefined) {\n                reject(new Error('Missing required  parameter: testRunId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getTestRunsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of test runs\n     * @method\n     * @name AppCenter#test_getTestRuns\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getTestRuns(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new test run\n     * @method\n     * @name AppCenter#test_createTestRun\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test_runs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportTestRunURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists test run data\n     * @method\n     * @name AppCenter#test_gdprExportTestRun\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportTestRun(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportPipelineTestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists pipeline test data\n     * @method\n     * @name AppCenter#test_gdprExportPipelineTest\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportPipelineTest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportHashFileURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists hash file data\n     * @method\n     * @name AppCenter#test_gdprExportHashFile\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportHashFile(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportFileSetFileURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists file set file data\n     * @method\n     * @name AppCenter#test_gdprExportFileSetFile\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportFileSetFile(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists app data\n     * @method\n     * @name AppCenter#test_gdprExportApp\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportAppsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists all the endpoints available for Test apps data\n     * @method\n     * @name AppCenter#test_gdprExportApps\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_gdprExportApps(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/test/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_getTeamsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the details of all teams that have access to the app.\n     * @method\n     * @name AppCenter#apps_getTeams\n     * @param {string} appName - The name of the application\n     * @param {string} ownerName - The name of the owner\n     */\n    apps_getTeams(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/teams';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbols_getStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a particular symbol by id (uuid) for the provided application\n     * @method\n     * @name AppCenter#symbols_getStatus\n     * @param {string} symbolId - The ID of the symbol (uuid of the symbol)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbols_getStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n            if (parameters['symbolId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbols_getLocationURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the URL to download the symbol\n     * @method\n     * @name AppCenter#symbols_getLocation\n     * @param {string} symbolId - The ID of the symbol (uuid of the symbol)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbols_getLocation(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n            if (parameters['symbolId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbols_ignoreURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Marks a symbol by id (uuid) as ignored\n     * @method\n     * @name AppCenter#symbols_ignore\n     * @param {string} symbolId - The ID of the symbol (uuid of the symbol)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbols_ignore(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n            if (parameters['symbolId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbols_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a particular symbol by id (uuid) for the provided application\n     * @method\n     * @name AppCenter#symbols_get\n     * @param {string} symbolId - The ID of the symbol (uuid of the symbol)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbols_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolId'], '').toString())}`);\n            if (parameters['symbolId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbols_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the list of all symbols for the provided application\n     * @method\n     * @name AppCenter#symbols_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbols_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbols';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_getLocationURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the URL to download the symbol upload\n     * @method\n     * @name AppCenter#symbolUploads_getLocation\n     * @param {string} symbolUploadId - The ID of the symbol upload\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbolUploads_getLocation(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n            if (parameters['symbolUploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolUploadId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets a symbol upload by id for the specified application\n     * @method\n     * @name AppCenter#symbolUploads_get\n     * @param {string} symbolUploadId - The ID of the symbol upload\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbolUploads_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n            if (parameters['symbolUploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolUploadId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_completeURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Commits or aborts the symbol upload process for a new set of symbols for the specified application\n     * @method\n     * @name AppCenter#symbolUploads_complete\n     * @param {string} symbolUploadId - The ID of the symbol upload\n     * @param {} body - The symbol information\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbolUploads_complete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n            if (parameters['symbolUploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolUploadId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a symbol upload by id for the specified application\n     * @method\n     * @name AppCenter#symbolUploads_delete\n     * @param {string} symbolUploadId - The ID of the symbol upload\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbolUploads_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_upload_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolUploadId'], '').toString())}`);\n            if (parameters['symbolUploadId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolUploadId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['status'] !== undefined) {\n            queryParameters['status'] = this.convertParameterCollectionFormat(parameters['status'], '');\n        }\n        if (parameters['symbolType'] !== undefined) {\n            queryParameters['symbol_type'] = this.convertParameterCollectionFormat(parameters['symbolType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n    * Gets a list of all uploads for the specified application\n    * @method\n    * @name AppCenter#symbolUploads_list\n         * @param {integer} top - The maximum number of results to return.\n         * @param {string} status - Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.\n\n         * @param {string} symbolType - The type of symbols\n         * @param {string} ownerName - The name of the owner\n         * @param {string} appName - The name of the application\n    */\n    symbolUploads_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['top'] !== undefined) {\n                queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['status'] !== undefined) {\n                queryParameters['status'] = this.convertParameterCollectionFormat(parameters['status'], '');\n            }\n            if (parameters['symbolType'] !== undefined) {\n                queryParameters['symbol_type'] = this.convertParameterCollectionFormat(parameters['symbolType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    symbolUploads_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Begins the symbol upload process for a new set of symbols for the specified application\n     * @method\n     * @name AppCenter#symbolUploads_create\n     * @param {} body - The symbol information\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    symbolUploads_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getSubscriptionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get information about the currently active subscriptions, if any\n     * @method\n     * @name AppCenter#test_getSubscriptions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getSubscriptions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createSubscriptionURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Accept a free trial subscription\n     * @method\n     * @name AppCenter#test_createSubscription\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createSubscription(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeNotifications_getNotificationByAppIdURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/store_service_status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Application specific store service status\n     * @method\n     * @name AppCenter#storeNotifications_getNotificationByAppId\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeNotifications_getNotificationByAppId(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/store_service_status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    repositories_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{source_host}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['sourceHost'], '').toString())}`);\n        if (parameters['vstsAccountName'] !== undefined) {\n            queryParameters['vstsAccountName'] = this.convertParameterCollectionFormat(parameters['vstsAccountName'], '');\n        }\n        if (parameters['vstsProjectId'] !== undefined) {\n            queryParameters['vstsProjectId'] = this.convertParameterCollectionFormat(parameters['vstsProjectId'], '');\n        }\n        if (parameters['serviceConnectionId'] !== undefined) {\n            queryParameters['service_connection_id'] = this.convertParameterCollectionFormat(parameters['serviceConnectionId'], '');\n        }\n        if (parameters['form'] !== undefined) {\n            queryParameters['form'] = this.convertParameterCollectionFormat(parameters['form'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the repositories available from the source code host\n     * @method\n     * @name AppCenter#repositories_list\n     * @param {string} sourceHost - The source host\n     * @param {string} vstsAccountName - Filter repositories only for specified account and project, \"vstsProjectId\" is required\n     * @param {string} vstsProjectId - Filter repositories only for specified account and project, \"vstsAccountName\" is required\n     * @param {string} serviceConnectionId - The id of the service connection (private). Required for GitLab self-hosted repositories\n     * @param {string} form - The selected form of the object\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    repositories_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{source_host}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['sourceHost'], '').toString())}`);\n            if (parameters['sourceHost'] === undefined) {\n                reject(new Error('Missing required  parameter: sourceHost'));\n                return;\n            }\n            if (parameters['vstsAccountName'] !== undefined) {\n                queryParameters['vstsAccountName'] = this.convertParameterCollectionFormat(parameters['vstsAccountName'], '');\n            }\n            if (parameters['vstsProjectId'] !== undefined) {\n                queryParameters['vstsProjectId'] = this.convertParameterCollectionFormat(parameters['vstsProjectId'], '');\n            }\n            if (parameters['serviceConnectionId'] !== undefined) {\n                queryParameters['service_connection_id'] = this.convertParameterCollectionFormat(parameters['serviceConnectionId'], '');\n            }\n            if (parameters['form'] !== undefined) {\n                queryParameters['form'] = this.convertParameterCollectionFormat(parameters['form'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    repositoryConfigurations_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['includeInactive'] !== undefined) {\n            queryParameters['includeInactive'] = this.convertParameterCollectionFormat(parameters['includeInactive'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the repository build configuration status of the app\n     * @method\n     * @name AppCenter#repositoryConfigurations_list\n     * @param {boolean} includeInactive - Include inactive configurations if none are active\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    repositoryConfigurations_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['includeInactive'] !== undefined) {\n                queryParameters['includeInactive'] = this.convertParameterCollectionFormat(parameters['includeInactive'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    repositoryConfigurations_createOrUpdateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Configures the repository for build\n     * @method\n     * @name AppCenter#repositoryConfigurations_createOrUpdate\n     * @param {} repo - The repository information\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    repositoryConfigurations_createOrUpdate(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['repo'] !== undefined) {\n                body = parameters['repo'];\n            }\n            if (parameters['repo'] === undefined) {\n                reject(new Error('Missing required  parameter: repo'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    repositoryConfigurations_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes the configuration for the repository\n     * @method\n     * @name AppCenter#repositoryConfigurations_delete\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    repositoryConfigurations_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/repo_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_getReleaseUpdateDevicesStatusURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{resign_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['resignId'], '').toString())}`);\n        if (parameters['includeProvisioningProfile'] !== undefined) {\n            queryParameters['include_provisioning_profile'] = this.convertParameterCollectionFormat(parameters['includeProvisioningProfile'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the resign status to the caller\n     * @method\n     * @name AppCenter#devices_getReleaseUpdateDevicesStatus\n     * @param {string} releaseId - The ID of the release.\n     * @param {string} resignId - The ID of the resign operation.\n     * @param {boolean} includeProvisioningProfile - A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    devices_getReleaseUpdateDevicesStatus(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{resign_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['resignId'], '').toString())}`);\n            if (parameters['resignId'] === undefined) {\n                reject(new Error('Missing required  parameter: resignId'));\n                return;\n            }\n            if (parameters['includeProvisioningProfile'] !== undefined) {\n                queryParameters['include_provisioning_profile'] = this.convertParameterCollectionFormat(parameters['includeProvisioningProfile'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_putDistributionTesterURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update details about the specified tester associated with the release\n     * @method\n     * @name AppCenter#releases_putDistributionTester\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} testerId - The id of the tester\n     * @param {} destinationTesterUpdateDetails - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_putDistributionTester(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n            if (parameters['testerId'] === undefined) {\n                reject(new Error('Missing required  parameter: testerId'));\n                return;\n            }\n            if (parameters['destinationTesterUpdateDetails'] !== undefined) {\n                body = parameters['destinationTesterUpdateDetails'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteDistributionTesterURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the given tester from the release\n     * @method\n     * @name AppCenter#releases_deleteDistributionTester\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} testerId - The id of the tester\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_deleteDistributionTester(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{tester_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['testerId'], '').toString())}`);\n            if (parameters['testerId'] === undefined) {\n                reject(new Error('Missing required  parameter: testerId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_addTestersURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Distributes a release to a user\n     * @method\n     * @name AppCenter#releases_addTesters\n     * @param {integer} releaseId - The ID of the release\n     * @param {} body - The release information.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_addTesters(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteDistributionStoreURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{store_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the given distribution store from the release\n     * @method\n     * @name AppCenter#releases_deleteDistributionStore\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} storeId - The id of the distribution store\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_deleteDistributionStore(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{store_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeId'], '').toString())}`);\n            if (parameters['storeId'] === undefined) {\n                reject(new Error('Missing required  parameter: storeId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_addStoreURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Distributes a release to a store\n     * @method\n     * @name AppCenter#releases_addStore\n     * @param {integer} releaseId - The ID of the release\n     * @param {} body - The release information.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_addStore(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    provisioning_profileURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return information about the provisioning profile. Only available for iOS.\n     * @method\n     * @name AppCenter#provisioning_profile\n     * @param {integer} releaseId - The release_id\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    provisioning_profile(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_putDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['groupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update details about the specified distribution group associated with the release\n     * @method\n     * @name AppCenter#releases_putDistributionGroup\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} groupId - The id of the releases destination\n     * @param {} destinationGroupUpdateDetails - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_putDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['groupId'], '').toString())}`);\n            if (parameters['groupId'] === undefined) {\n                reject(new Error('Missing required  parameter: groupId'));\n                return;\n            }\n            if (parameters['destinationGroupUpdateDetails'] !== undefined) {\n                body = parameters['destinationGroupUpdateDetails'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['groupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the given distribution group from the release\n     * @method\n     * @name AppCenter#releases_deleteDistributionGroup\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} groupId - The id of the distribution group\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_deleteDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['groupId'], '').toString())}`);\n            if (parameters['groupId'] === undefined) {\n                reject(new Error('Missing required  parameter: groupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_addDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Distributes a release to a group\n     * @method\n     * @name AppCenter#releases_addDistributionGroup\n     * @param {integer} releaseId - The ID of the release\n     * @param {} body - The release information.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_addDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getLatestByUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        if (parameters['udid'] !== undefined) {\n            queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n        }\n        if (parameters['isInstallPage'] !== undefined) {\n            queryParameters['is_install_page'] = this.convertParameterCollectionFormat(parameters['isInstallPage'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).\n     * @method\n     * @name AppCenter#releases_getLatestByUser\n     * @param {string} releaseId - The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user.\n     * @param {string} udid - when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.\n     * @param {boolean} isInstallPage - The check if the request is from Install page\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_getLatestByUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['udid'] !== undefined) {\n                queryParameters['udid'] = this.convertParameterCollectionFormat(parameters['udid'], '');\n            }\n            if (parameters['isInstallPage'] !== undefined) {\n                queryParameters['is_install_page'] = this.convertParameterCollectionFormat(parameters['isInstallPage'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_updateDetailsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update details of a release.\n     * @method\n     * @name AppCenter#releases_updateDetails\n     * @param {integer} releaseId - The ID of the release\n     * @param {} body - The release information.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_updateDetails(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates a release.\n     * @method\n     * @name AppCenter#releases_update\n     * @param {integer} releaseId - The ID of the release\n     * @param {} body - The release information.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'text/plain';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a release.\n     * @method\n     * @name AppCenter#releases_delete\n     * @param {integer} releaseId - The ID of the release\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['publishedOnly'] !== undefined) {\n            queryParameters['published_only'] = this.convertParameterCollectionFormat(parameters['publishedOnly'], '');\n        }\n        if (parameters['scope'] !== undefined) {\n            queryParameters['scope'] = this.convertParameterCollectionFormat(parameters['scope'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['releaseId'] !== undefined) {\n            queryParameters['releaseId'] = this.convertParameterCollectionFormat(parameters['releaseId'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return basic information about releases.\n     * @method\n     * @name AppCenter#releases_list\n     * @param {boolean} publishedOnly - When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.\n     * @param {string} scope - When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.\n     * @param {number} top - The number of releases to return\n     * @param {number} releaseId - The id of a release\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['publishedOnly'] !== undefined) {\n                queryParameters['published_only'] = this.convertParameterCollectionFormat(parameters['publishedOnly'], '');\n            }\n            if (parameters['scope'] !== undefined) {\n                queryParameters['scope'] = this.convertParameterCollectionFormat(parameters['scope'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['releaseId'] !== undefined) {\n                queryParameters['releaseId'] = this.convertParameterCollectionFormat(parameters['releaseId'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_listLatestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/recent_releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get the latest release from every distribution group associated with an application.\n     * @method\n     * @name AppCenter#releases_listLatest\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_listLatest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/recent_releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getDeviceSetOfOwnerURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets a device set belonging to the owner\n     * @method\n     * @name AppCenter#test_getDeviceSetOfOwner\n     * @param {string} id - The UUID of the device set\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getDeviceSetOfOwner(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_updateDeviceSetOfOwnerURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates a device set belonging to the owner\n     * @method\n     * @name AppCenter#test_updateDeviceSetOfOwner\n     * @param {string} id - The UUID of the device set\n     * @param {} deviceSet - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_updateDeviceSetOfOwner(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            if (parameters['deviceSet'] !== undefined) {\n                body = parameters['deviceSet'];\n            }\n            if (parameters['deviceSet'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceSet'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_deleteDeviceSetOfOwnerURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a device set belonging to the owner\n     * @method\n     * @name AppCenter#test_deleteDeviceSetOfOwner\n     * @param {string} id - The UUID of the device set\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_deleteDeviceSetOfOwner(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['id'], '').toString())}`);\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_listDeviceSetsOfOwnerURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists device sets belonging to the owner\n     * @method\n     * @name AppCenter#test_listDeviceSetsOfOwner\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_listDeviceSetsOfOwner(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createDeviceSetOfOwnerURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a device set belonging to the owner\n     * @method\n     * @name AppCenter#test_createDeviceSetOfOwner\n     * @param {} deviceSet - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createDeviceSetOfOwner(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deviceSet'] !== undefined) {\n                body = parameters['deviceSet'];\n            }\n            if (parameters['deviceSet'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceSet'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    notifications_getAppEmailSettingsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get Email notification settings of user for a particular app\n     * @method\n     * @name AppCenter#notifications_getAppEmailSettings\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    notifications_getAppEmailSettings(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_updatePermissionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update pending invitation permission\n     * @method\n     * @name AppCenter#appInvitations_updatePermissions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} userEmail - The email of the user to invite\n     * @param {} userInvitationPermissionsData - The value to update the user permission in the invite.\n     */\n    appInvitations_updatePermissions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters['userInvitationPermissionsData'] !== undefined) {\n                body = parameters['userInvitationPermissionsData'];\n            }\n            if (parameters['userInvitationPermissionsData'] === undefined) {\n                reject(new Error('Missing required  parameter: userInvitationPermissionsData'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Removes a user's invitation to an app\n     * @method\n     * @name AppCenter#appInvitations_delete\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} userEmail - The email of the user to invite\n     */\n    appInvitations_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{user_email}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['userEmail'], '').toString())}`);\n            if (parameters['userEmail'] === undefined) {\n                reject(new Error('Missing required  parameter: userEmail'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Invites a new or existing user to an app\n     * @method\n     * @name AppCenter#appInvitations_create\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} userEmail - The email of the user to invite\n     */\n    appInvitations_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['userEmail'] !== undefined) {\n                body = parameters['userEmail'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appInvitations_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the pending invitations for the app\n     * @method\n     * @name AppCenter#appInvitations_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    appInvitations_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/invitations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    fileAssets_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/file_asset';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a new asset to upload a file\n     * @method\n     * @name AppCenter#fileAssets_create\n     * @param {} payload - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    fileAssets_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/file_asset';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['payload'] !== undefined) {\n                body = parameters['payload'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_EnableURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Enable export configuration.\n     * @method\n     * @name AppCenter#ExportConfigurations_Enable\n     * @param {string} exportConfigurationId - The id of the export configuration.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_Enable(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n            if (parameters['exportConfigurationId'] === undefined) {\n                reject(new Error('Missing required  parameter: exportConfigurationId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_DisableURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Disable export configuration.\n     * @method\n     * @name AppCenter#ExportConfigurations_Disable\n     * @param {string} exportConfigurationId - The id of the export configuration.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_Disable(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n            if (parameters['exportConfigurationId'] === undefined) {\n                reject(new Error('Missing required  parameter: exportConfigurationId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_GetURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get export configuration.\n     * @method\n     * @name AppCenter#ExportConfigurations_Get\n     * @param {string} exportConfigurationId - The id of the export configuration.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_Get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n            if (parameters['exportConfigurationId'] === undefined) {\n                reject(new Error('Missing required  parameter: exportConfigurationId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_PartialUpdateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Partially update export configuration.\n     * @method\n     * @name AppCenter#ExportConfigurations_PartialUpdate\n     * @param {string} exportConfigurationId - The id of the export configuration.\n     * @param {} properties - Export configurations.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_PartialUpdate(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n            if (parameters['exportConfigurationId'] === undefined) {\n                reject(new Error('Missing required  parameter: exportConfigurationId'));\n                return;\n            }\n            if (parameters['properties'] !== undefined) {\n                body = parameters['properties'];\n            }\n            if (parameters['properties'] === undefined) {\n                reject(new Error('Missing required  parameter: properties'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_DeleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete export configuration.\n     * @method\n     * @name AppCenter#ExportConfigurations_Delete\n     * @param {string} exportConfigurationId - The id of the export configuration.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_Delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{export_configuration_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['exportConfigurationId'], '').toString())}`);\n            if (parameters['exportConfigurationId'] === undefined) {\n                reject(new Error('Missing required  parameter: exportConfigurationId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_ListURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * List export configurations.\n     * @method\n     * @name AppCenter#ExportConfigurations_List\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_List(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    ExportConfigurations_CreateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create new export configuration\n     * @method\n     * @name AppCenter#ExportConfigurations_Create\n     * @param {} properties - Export configurations.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    ExportConfigurations_Create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/export_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['properties'] !== undefined) {\n                body = parameters['properties'];\n            }\n            if (parameters['properties'] === undefined) {\n                reject(new Error('Missing required  parameter: properties'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ListSessionLogsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        if (parameters['date'] !== undefined) {\n            queryParameters['date'] = this.convertParameterCollectionFormat(parameters['date'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get session logs by error ID\n     * @method\n     * @name AppCenter#Errors_ListSessionLogs\n     * @param {string} errorId - The id of the error\n     * @param {string} date - Date of data requested\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ListSessionLogs(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            if (parameters['date'] !== undefined) {\n                queryParameters['date'] = this.convertParameterCollectionFormat(parameters['date'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorAttachmentTextURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{attachmentId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['attachmentId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error attachment text.\n     * @method\n     * @name AppCenter#Errors_ErrorAttachmentText\n     * @param {string} errorId - The id of the error\n     * @param {string} attachmentId - Error attachment id.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorAttachmentText(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{attachmentId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['attachmentId'], '').toString())}`);\n            if (parameters['attachmentId'] === undefined) {\n                reject(new Error('Missing required  parameter: attachmentId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorAttachmentLocationURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{attachmentId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['attachmentId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error attachment location.\n     * @method\n     * @name AppCenter#Errors_ErrorAttachmentLocation\n     * @param {string} errorId - The id of the error\n     * @param {string} attachmentId - Error attachment id.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorAttachmentLocation(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{attachmentId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['attachmentId'], '').toString())}`);\n            if (parameters['attachmentId'] === undefined) {\n                reject(new Error('Missing required  parameter: attachmentId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorAttachmentsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * List error attachments.\n     * @method\n     * @name AppCenter#Errors_ErrorAttachments\n     * @param {string} errorId - The id of the error\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorAttachments(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorSearchURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/search';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['filter'] !== undefined) {\n            queryParameters['filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n        }\n        if (parameters['q'] !== undefined) {\n            queryParameters['q'] = this.convertParameterCollectionFormat(parameters['q'], '');\n        }\n        if (parameters['order'] !== undefined) {\n            queryParameters['order'] = this.convertParameterCollectionFormat(parameters['order'], '');\n        }\n        if (parameters['sort'] !== undefined) {\n            queryParameters['sort'] = this.convertParameterCollectionFormat(parameters['sort'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['skip'] !== undefined) {\n            queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Errors list based on search parameters\n     * @method\n     * @name AppCenter#Errors_ErrorSearch\n     * @param {string} filter - A filter as specified in OData notation\n     * @param {string} q - A query string\n     * @param {string} order - It controls the order of sorting\n     * @param {string} sort - It controls the sort based on specified field\n     * @param {integer} top - The maximum number of results to return\n     * @param {integer} skip - The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorSearch(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/search';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['filter'] !== undefined) {\n                queryParameters['filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n            }\n            if (parameters['q'] !== undefined) {\n                queryParameters['q'] = this.convertParameterCollectionFormat(parameters['q'], '');\n            }\n            if (parameters['order'] !== undefined) {\n                queryParameters['order'] = this.convertParameterCollectionFormat(parameters['order'], '');\n            }\n            if (parameters['sort'] !== undefined) {\n                queryParameters['sort'] = this.convertParameterCollectionFormat(parameters['sort'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['skip'] !== undefined) {\n                queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    errors_getRetentionSettingsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * gets the retention settings in days\n     * @method\n     * @name AppCenter#errors_getRetentionSettings\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    errors_getRetentionSettings(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorFreeDevicePercentagesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        if (parameters['appBuild'] !== undefined) {\n            queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n        }\n        if (parameters['errorType'] !== undefined) {\n            queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices\n     * @method\n     * @name AppCenter#Errors_ErrorFreeDevicePercentages\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {array} versions - Microsoft Visual Studio App Center API\n     * @param {string} appBuild - app build\n     * @param {string} errorType - Type of error (handled vs unhandled), excluding All\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorFreeDevicePercentages(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            if (parameters['appBuild'] !== undefined) {\n                queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n            }\n            if (parameters['errorType'] !== undefined) {\n                queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupErrorStackTraceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the stack trace for the error group.\n     * @method\n     * @name AppCenter#Errors_GroupErrorStackTrace\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupErrorStackTrace(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupOperatingSystemCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Top OSes of the selected error group.\n     * @method\n     * @name AppCenter#Errors_GroupOperatingSystemCounts\n     * @param {string} errorGroupId - The id of the error group\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupOperatingSystemCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupModelCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Top models of the selected error group.\n     * @method\n     * @name AppCenter#Errors_GroupModelCounts\n     * @param {string} errorGroupId - The id of the error group\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupModelCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorStackTraceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error Stacktrace details.\n     * @method\n     * @name AppCenter#Errors_ErrorStackTrace\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} errorId - The id of the error\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorStackTrace(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorLocationURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error location.\n     * @method\n     * @name AppCenter#Errors_ErrorLocation\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} errorId - The id of the error\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorLocation(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorDownloadURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        if (parameters['format'] !== undefined) {\n            queryParameters['format'] = this.convertParameterCollectionFormat(parameters['format'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Download details for a specific error.\n     * @method\n     * @name AppCenter#Errors_ErrorDownload\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} errorId - The id of the error\n     * @param {string} format - the format of the crash log\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorDownload(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            if (parameters['format'] !== undefined) {\n                queryParameters['format'] = this.convertParameterCollectionFormat(parameters['format'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GetErrorDetailsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error details.\n     * @method\n     * @name AppCenter#Errors_GetErrorDetails\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} errorId - The id of the error\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GetErrorDetails(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_DeleteErrorURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.\n     * @method\n     * @name AppCenter#Errors_DeleteError\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} errorId - The id of the error\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_DeleteError(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{errorId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorId'], '').toString())}`);\n            if (parameters['errorId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_LatestErrorDetailsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Latest error details.\n     * @method\n     * @name AppCenter#Errors_LatestErrorDetails\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_LatestErrorDetails(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ListForGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['model'] !== undefined) {\n            queryParameters['model'] = this.convertParameterCollectionFormat(parameters['model'], '');\n        }\n        if (parameters['os'] !== undefined) {\n            queryParameters['os'] = this.convertParameterCollectionFormat(parameters['os'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get all errors for group\n     * @method\n     * @name AppCenter#Errors_ListForGroup\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {string} model - Microsoft Visual Studio App Center API\n     * @param {string} os - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ListForGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['model'] !== undefined) {\n                queryParameters['model'] = this.convertParameterCollectionFormat(parameters['model'], '');\n            }\n            if (parameters['os'] !== undefined) {\n                queryParameters['os'] = this.convertParameterCollectionFormat(parameters['os'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupErrorFreeDevicePercentagesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices\n     * @method\n     * @name AppCenter#Errors_GroupErrorFreeDevicePercentages\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupErrorFreeDevicePercentages(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupCountsPerDayURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        if (parameters['version'] !== undefined) {\n            queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of errors by day in the time range of the selected error group with selected version\n     * @method\n     * @name AppCenter#Errors_GroupCountsPerDay\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} version - Microsoft Visual Studio App Center API\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupCountsPerDay(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['version'] !== undefined) {\n                queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupDetailsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error group details\n     * @method\n     * @name AppCenter#Errors_GroupDetails\n     * @param {string} errorGroupId - The id of the error group\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupDetails(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_UpdateStateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update error group state\n     * @method\n     * @name AppCenter#Errors_UpdateState\n     * @param {string} errorGroupId - The id of the error group\n     * @param {} errorGroupState - The state of the error group\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_UpdateState(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{errorGroupId}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['errorGroupId'], '').toString())}`);\n            if (parameters['errorGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupId'));\n                return;\n            }\n            if (parameters['errorGroupState'] !== undefined) {\n                body = parameters['errorGroupState'];\n            }\n            if (parameters['errorGroupState'] === undefined) {\n                reject(new Error('Missing required  parameter: errorGroupState'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_ErrorGroupsSearchURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['filter'] !== undefined) {\n            queryParameters['filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n        }\n        if (parameters['q'] !== undefined) {\n            queryParameters['q'] = this.convertParameterCollectionFormat(parameters['q'], '');\n        }\n        if (parameters['order'] !== undefined) {\n            queryParameters['order'] = this.convertParameterCollectionFormat(parameters['order'], '');\n        }\n        if (parameters['sort'] !== undefined) {\n            queryParameters['sort'] = this.convertParameterCollectionFormat(parameters['sort'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['skip'] !== undefined) {\n            queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Error groups list based on search parameters\n     * @method\n     * @name AppCenter#Errors_ErrorGroupsSearch\n     * @param {string} filter - A filter as specified in OData notation\n     * @param {string} q - A query string\n     * @param {string} order - It controls the order of sorting\n     * @param {string} sort - It controls the sort based on specified field\n     * @param {integer} top - The maximum number of results to return\n     * @param {integer} skip - The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_ErrorGroupsSearch(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['filter'] !== undefined) {\n                queryParameters['filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n            }\n            if (parameters['q'] !== undefined) {\n                queryParameters['q'] = this.convertParameterCollectionFormat(parameters['q'], '');\n            }\n            if (parameters['order'] !== undefined) {\n                queryParameters['order'] = this.convertParameterCollectionFormat(parameters['order'], '');\n            }\n            if (parameters['sort'] !== undefined) {\n                queryParameters['sort'] = this.convertParameterCollectionFormat(parameters['sort'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['skip'] !== undefined) {\n                queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_GroupListURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['version'] !== undefined) {\n            queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n        }\n        if (parameters['appBuild'] !== undefined) {\n            queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n        }\n        if (parameters['groupState'] !== undefined) {\n            queryParameters['groupState'] = this.convertParameterCollectionFormat(parameters['groupState'], '');\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['orderby'] !== undefined) {\n            queryParameters['$orderby'] = this.convertParameterCollectionFormat(parameters['orderby'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['errorType'] !== undefined) {\n            queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * List of error groups\n     * @method\n     * @name AppCenter#Errors_GroupList\n     * @param {string} version - Microsoft Visual Studio App Center API\n     * @param {string} appBuild - app build\n     * @param {string} groupState - Microsoft Visual Studio App Center API\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {string} orderby - controls the sorting order and sorting based on which column\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {string} errorType - Type of error (handled vs unhandled), including All\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_GroupList(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['version'] !== undefined) {\n                queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n            }\n            if (parameters['appBuild'] !== undefined) {\n                queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n            }\n            if (parameters['groupState'] !== undefined) {\n                queryParameters['groupState'] = this.convertParameterCollectionFormat(parameters['groupState'], '');\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['orderby'] !== undefined) {\n                queryParameters['$orderby'] = this.convertParameterCollectionFormat(parameters['orderby'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['errorType'] !== undefined) {\n                queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_CountsPerDayURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['version'] !== undefined) {\n            queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['appBuild'] !== undefined) {\n            queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n        }\n        if (parameters['errorType'] !== undefined) {\n            queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.\n     * @method\n     * @name AppCenter#Errors_CountsPerDay\n     * @param {string} version - Microsoft Visual Studio App Center API\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {string} appBuild - app build\n     * @param {string} errorType - Type of error (handled vs unhandled), excluding All\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_CountsPerDay(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['version'] !== undefined) {\n                queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['appBuild'] !== undefined) {\n                queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n            }\n            if (parameters['errorType'] !== undefined) {\n                queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_AvailableVersionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/available_versions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['skip'] !== undefined) {\n            queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n        }\n        if (parameters['filter'] !== undefined) {\n            queryParameters['$filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n        }\n        if (parameters['inlinecount'] !== undefined) {\n            queryParameters['$inlinecount'] = this.convertParameterCollectionFormat(parameters['inlinecount'], '');\n        }\n        if (parameters['errorType'] !== undefined) {\n            queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get all available versions in the time range.\n     * @method\n     * @name AppCenter#Errors_AvailableVersions\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {integer} skip - The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.\n     * @param {string} filter - A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.\n     * @param {string} inlinecount - Controls whether or not to include a count of all the items across all pages.\n     * @param {string} errorType - Type of error (handled vs unhandled), including All\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_AvailableVersions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/available_versions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['skip'] !== undefined) {\n                queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n            }\n            if (parameters['filter'] !== undefined) {\n                queryParameters['$filter'] = this.convertParameterCollectionFormat(parameters['filter'], '');\n            }\n            if (parameters['inlinecount'] !== undefined) {\n                queryParameters['$inlinecount'] = this.convertParameterCollectionFormat(parameters['inlinecount'], '');\n            }\n            if (parameters['errorType'] !== undefined) {\n                queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Errors_AppBuildsListURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['version'] !== undefined) {\n            queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['errorType'] !== undefined) {\n            queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * List of app builds\n     * @method\n     * @name AppCenter#Errors_AppBuildsList\n     * @param {string} version - Microsoft Visual Studio App Center API\n     * @param {string} start - Start date time in data in ISO 8601 date time format\n     * @param {string} end - Last date time in data in ISO 8601 date time format\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results till the max number.)\n     * @param {string} errorType - Type of error (handled vs unhandled), including All\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Errors_AppBuildsList(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['version'] !== undefined) {\n                queryParameters['version'] = this.convertParameterCollectionFormat(parameters['version'], '');\n            }\n            if (parameters['version'] === undefined) {\n                reject(new Error('Missing required  parameter: version'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['errorType'] !== undefined) {\n                queryParameters['errorType'] = this.convertParameterCollectionFormat(parameters['errorType'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_getRealTimeStatusByReleaseIdURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return the Real time Status publishing of release from store.\n     * @method\n     * @name AppCenter#storeReleases_getRealTimeStatusByReleaseId\n     * @param {string} storeName - The name of the store\n     * @param {number} releaseId - The id of the release\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_getRealTimeStatusByReleaseId(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleasePublishLogs_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns publish logs for a particular release published to a particular store\n     * @method\n     * @name AppCenter#storeReleasePublishLogs_get\n     * @param {string} storeName - The name of the store\n     * @param {string} releaseId - The ID of the realease\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleasePublishLogs_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_getPublishErrorURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return the Error Details of release which failed in publishing.\n     * @method\n     * @name AppCenter#storeReleases_getPublishError\n     * @param {string} storeName - The name of the store\n     * @param {number} releaseId - The id of the release\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_getPublishError(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return releases published in a store for releaseId and storeId\n     * @method\n     * @name AppCenter#storeReleases_get\n     * @param {string} storeName - The name of the store\n     * @param {string} releaseId - The name of the store\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * delete the release with release Id\n     * @method\n     * @name AppCenter#storeReleases_delete\n     * @param {string} storeName - The name of the store\n     * @param {string} releaseId - The id of the release\n     * @param {} body - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return all releases published  in a store\n     * @method\n     * @name AppCenter#storeReleases_list\n     * @param {string} storeName - The name of the store\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    storeReleases_getLatestURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the latest release published in a store.\n     * @method\n     * @name AppCenter#storeReleases_getLatest\n     * @param {string} storeName - The name of the store\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    storeReleases_getLatest(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    stores_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return the store details for specified store name.\n     * @method\n     * @name AppCenter#stores_get\n     * @param {string} storeName - The name of the store\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    stores_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    stores_patchURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Update the store.\n     * @method\n     * @name AppCenter#stores_patch\n     * @param {string} storeName - The name of the store\n     * @param {} body - Store update request\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    stores_patch(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    stores_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * delete the store based on specific store name.\n     * @method\n     * @name AppCenter#stores_delete\n     * @param {string} storeName - The name of the store\n     * @param {} body - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    stores_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{store_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['storeName'], '').toString())}`);\n            if (parameters['storeName'] === undefined) {\n                reject(new Error('Missing required  parameter: storeName'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    stores_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a new external store for the specified application.\n     * @method\n     * @name AppCenter#stores_create\n     * @param {} body - The store request\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    stores_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    stores_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get all the store details from Storage store table for a particular application.\n     * @method\n     * @name AppCenter#stores_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    stores_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_stores';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_resendInviteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Resend distribution group app invite notification to previously invited testers\n     * @method\n     * @name AppCenter#distributionGroups_resendInvite\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} members - The list of members to add\n     */\n    distributionGroups_resendInvite(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['members'] !== undefined) {\n                body = parameters['members'];\n            }\n            if (parameters['members'] === undefined) {\n                reject(new Error('Missing required  parameter: members'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_getLatestByDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return detailed information about a distributed release in a given distribution group.\n     * @method\n     * @name AppCenter#releases_getLatestByDistributionGroup\n     * @param {string} ownerName - The name of the app owner\n     * @param {string} appName - The name of the app\n     * @param {string} distributionGroupName - The name of the distribution group.\n     * @param {string} releaseId - Also supports the constant `latest`, which will return the latest release in the distribution group.\n     */\n    releases_getLatestByDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_deleteWithDistributionGroupIdURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a release with id 'release_id' in a given distribution group.\n     * @method\n     * @name AppCenter#releases_deleteWithDistributionGroupId\n     * @param {string} ownerName - The name of the app owner\n     * @param {string} appName - The name of the app\n     * @param {string} distributionGroupName - The name of the distribution group.\n     * @param {integer} releaseId - The ID identifying the unique release.\n     */\n    releases_deleteWithDistributionGroupId(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            path = path.replace('{release_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseId'], '').toString())}`);\n            if (parameters['releaseId'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseId'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    releases_listByDistributionGroupURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return basic information about distributed releases in a given distribution group.\n     * @method\n     * @name AppCenter#releases_listByDistributionGroup\n     * @param {string} distributionGroupName - The name of the distribution group.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    releases_listByDistributionGroup(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_removeUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Remove the users from the distribution group\n     * @method\n     * @name AppCenter#distributionGroups_removeUser\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} members - The list of members to add\n     */\n    distributionGroups_removeUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['members'] !== undefined) {\n                body = parameters['members'];\n            }\n            if (parameters['members'] === undefined) {\n                reject(new Error('Missing required  parameter: members'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_listUsersURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters['excludePendingInvitations'] !== undefined) {\n            queryParameters['exclude_pending_invitations'] = this.convertParameterCollectionFormat(parameters['excludePendingInvitations'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of member details in the distribution group specified\n     * @method\n     * @name AppCenter#distributionGroups_listUsers\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {boolean} excludePendingInvitations - Whether to exclude pending invitations in the response\n     */\n    distributionGroups_listUsers(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['excludePendingInvitations'] !== undefined) {\n                queryParameters['exclude_pending_invitations'] = this.convertParameterCollectionFormat(parameters['excludePendingInvitations'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_addUserURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Adds the members to the specified distribution group\n     * @method\n     * @name AppCenter#distributionGroups_addUser\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} members - The list of members to add\n     */\n    distributionGroups_addUser(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['members'] !== undefined) {\n                body = parameters['members'];\n            }\n            if (parameters['members'] === undefined) {\n                reject(new Error('Missing required  parameter: members'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_listCsvFormatURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters['unprovisionedOnly'] !== undefined) {\n            queryParameters['unprovisioned_only'] = this.convertParameterCollectionFormat(parameters['unprovisionedOnly'], '');\n        }\n        if (parameters['udids'] !== undefined) {\n            queryParameters['udids'] = this.convertParameterCollectionFormat(parameters['udids'], 'csv');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns all devices associated with the given distribution group.\n     * @method\n     * @name AppCenter#devices_listCsvFormat\n     * @param {string} distributionGroupName - The name of the distribution group.\n     * @param {boolean} unprovisionedOnly - when true, filters out provisioned devices\n     * @param {array} udids - multiple UDIDs which should be part of the resulting CSV.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    devices_listCsvFormat(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'text/csv';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['unprovisionedOnly'] !== undefined) {\n                queryParameters['unprovisioned_only'] = this.convertParameterCollectionFormat(parameters['unprovisionedOnly'], '');\n            }\n            if (parameters['udids'] !== undefined) {\n                queryParameters['udids'] = this.convertParameterCollectionFormat(parameters['udids'], 'csv');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    devices_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters['releaseId'] !== undefined) {\n            queryParameters['release_id'] = this.convertParameterCollectionFormat(parameters['releaseId'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns all devices associated with the given distribution group\n     * @method\n     * @name AppCenter#devices_list\n     * @param {string} distributionGroupName - The name of the distribution group.\n     * @param {number} releaseId - when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    devices_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['releaseId'] !== undefined) {\n                queryParameters['release_id'] = this.convertParameterCollectionFormat(parameters['releaseId'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a single distribution group for a given distribution group name\n     * @method\n     * @name AppCenter#distributionGroups_get\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Updates the attributes of distribution group\n     * @method\n     * @name AppCenter#distributionGroups_update\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} distributionGroupName - The name of the distribution group\n     * @param {} distributionGroup - The attributes to update for the distribution group\n     */\n    distributionGroups_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters['distributionGroup'] !== undefined) {\n                body = parameters['distributionGroup'];\n            }\n            if (parameters['distributionGroup'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroup'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a distribution group\n     * @method\n     * @name AppCenter#distributionGroups_delete\n     * @param {string} appName - The name of the application\n     * @param {string} ownerName - The name of the owner\n     * @param {string} distributionGroupName - The name of the distribution group\n     */\n    distributionGroups_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{distribution_group_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['distributionGroupName'], '').toString())}`);\n            if (parameters['distributionGroupName'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroupName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of distribution groups in the app specified\n     * @method\n     * @name AppCenter#distributionGroups_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    distributionGroups_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    distributionGroups_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new distribution group and returns it to the caller\n     * @method\n     * @name AppCenter#distributionGroups_create\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} distributionGroup - The attributes to update for the distribution group\n     */\n    distributionGroups_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/distribution_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['distributionGroup'] !== undefined) {\n                body = parameters['distributionGroup'];\n            }\n            if (parameters['distributionGroup'] === undefined) {\n                reject(new Error('Missing required  parameter: distributionGroup'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    missingSymbolGroups_infoURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets application level statistics for all missing symbol groups\n     * @method\n     * @name AppCenter#missingSymbolGroups_info\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    missingSymbolGroups_info(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    missingSymbolGroups_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{symbol_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets missing symbol crash group by its id\n     * @method\n     * @name AppCenter#missingSymbolGroups_get\n     * @param {string} symbolGroupId - missing symbol crash group id\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    missingSymbolGroups_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{symbol_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['symbolGroupId'], '').toString())}`);\n            if (parameters['symbolGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: symbolGroupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    missingSymbolGroups_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets top N (ordered by crash count) of crash groups by missing symbol\n     * @method\n     * @name AppCenter#missingSymbolGroups_list\n     * @param {integer} top - top N elements\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    missingSymbolGroups_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['top'] !== undefined) {\n                queryParameters['top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['top'] === undefined) {\n                reject(new Error('Missing required  parameter: top'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Devices_BlockLogsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{install_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['installId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n    * **Warning, this operation is not reversible.**\n\n A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user.\n\n    * @method\n    * @name AppCenter#Devices_BlockLogs\n         * @param {string} installId - The id of the device\n         * @param {string} ownerName - The name of the owner\n         * @param {string} appName - The name of the application\n    */\n    Devices_BlockLogs(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{install_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['installId'], '').toString())}`);\n            if (parameters['installId'] === undefined) {\n                reject(new Error('Missing required  parameter: installId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    App_BlockLogsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n    * **Warning, this operation is not reversible.**\n\nA successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id.\n\n    * @method\n    * @name AppCenter#App_BlockLogs\n         * @param {string} ownerName - The name of the owner\n         * @param {string} appName - The name of the application\n    */\n    App_BlockLogs(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_createDeviceSelectionURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/device_selection';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a short ID for a list of devices\n     * @method\n     * @name AppCenter#test_createDeviceSelection\n     * @param {} deviceList - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_createDeviceSelection(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/device_selection';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deviceList'] !== undefined) {\n                body = parameters['deviceList'];\n            }\n            if (parameters['deviceList'] === undefined) {\n                reject(new Error('Missing required  parameter: deviceList'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_getDeviceConfigurationsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/device_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['appUploadId'] !== undefined) {\n            queryParameters['app_upload_id'] = this.convertParameterCollectionFormat(parameters['appUploadId'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of available devices\n     * @method\n     * @name AppCenter#test_getDeviceConfigurations\n     * @param {string} appUploadId - The ID of the test run\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    test_getDeviceConfigurations(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/device_configurations';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['appUploadId'] !== undefined) {\n                queryParameters['app_upload_id'] = this.convertParameterCollectionFormat(parameters['appUploadId'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentUpload_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a new CodePush release upload for the specified deployment\n     * @method\n     * @name AppCenter#codePushDeploymentUpload_create\n     * @param {string} deploymentName - deployment name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentUpload_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentRelease_rollbackURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Rollback the latest or a specific release for an app deployment\n     * @method\n     * @name AppCenter#codePushDeploymentRelease_rollback\n     * @param {string} deploymentName - deployment name\n     * @param {} releaseLabel - The specific release label that you want to rollback to\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentRelease_rollback(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            if (parameters['releaseLabel'] !== undefined) {\n                body = parameters['releaseLabel'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    deploymentReleases_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{release_label}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseLabel'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Modifies a CodePush release metadata under the given Deployment\n     * @method\n     * @name AppCenter#deploymentReleases_update\n     * @param {string} deploymentName - deployment name\n     * @param {string} releaseLabel - release label\n     * @param {} release - Release modification. All fields are optional and only provided fields will get updated.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    deploymentReleases_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{release_label}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['releaseLabel'], '').toString())}`);\n            if (parameters['releaseLabel'] === undefined) {\n                reject(new Error('Missing required  parameter: releaseLabel'));\n                return;\n            }\n            if (parameters['release'] !== undefined) {\n                body = parameters['release'];\n            }\n            if (parameters['release'] === undefined) {\n                reject(new Error('Missing required  parameter: release'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentReleases_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Clears a Deployment of releases\n     * @method\n     * @name AppCenter#codePushDeploymentReleases_delete\n     * @param {string} deploymentName - deployment name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentReleases_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentReleases_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the history of releases on a Deployment\n     * @method\n     * @name AppCenter#codePushDeploymentReleases_get\n     * @param {string} deploymentName - deployment name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentReleases_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentReleases_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a new CodePush release for the specified deployment\n     * @method\n     * @name AppCenter#codePushDeploymentReleases_create\n     * @param {string} deploymentName - deployment name\n     * @param {} uploadedRelease - The necessary information required to download the bundle and being the release process.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentReleases_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            if (parameters['uploadedRelease'] !== undefined) {\n                body = parameters['uploadedRelease'];\n            }\n            if (parameters['uploadedRelease'] === undefined) {\n                reject(new Error('Missing required  parameter: uploadedRelease'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_promoteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{promote_deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['promoteDeploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Promote one release (default latest one) from one deployment to another\n     * @method\n     * @name AppCenter#codePushDeployments_promote\n     * @param {string} deploymentName - deployment name\n     * @param {string} promoteDeploymentName - deployment name\n     * @param {} release - Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_promote(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{promote_deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['promoteDeploymentName'], '').toString())}`);\n            if (parameters['promoteDeploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: promoteDeploymentName'));\n                return;\n            }\n            if (parameters['release'] !== undefined) {\n                body = parameters['release'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeploymentMetrics_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets all releases metrics for specified Deployment\n     * @method\n     * @name AppCenter#codePushDeploymentMetrics_get\n     * @param {string} deploymentName - deployment name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeploymentMetrics_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes a CodePush Deployment for the given app\n     * @method\n     * @name AppCenter#codePushDeployments_delete\n     * @param {string} deploymentName - deployment name\n     * @param {} body - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets a CodePush Deployment for the given app\n     * @method\n     * @name AppCenter#codePushDeployments_get\n     * @param {string} deploymentName - deployment name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Modifies a CodePush Deployment for the given app\n     * @method\n     * @name AppCenter#codePushDeployments_update\n     * @param {string} deploymentName - deployment name\n     * @param {} deployment - Deployment modification. All fields are optional and only provided fields will get updated.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{deployment_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['deploymentName'], '').toString())}`);\n            if (parameters['deploymentName'] === undefined) {\n                reject(new Error('Missing required  parameter: deploymentName'));\n                return;\n            }\n            if (parameters['deployment'] !== undefined) {\n                body = parameters['deployment'];\n            }\n            if (parameters['deployment'] === undefined) {\n                reject(new Error('Missing required  parameter: deployment'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets a list of CodePush deployments for the given app\n     * @method\n     * @name AppCenter#codePushDeployments_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    codePushDeployments_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a CodePush Deployment for the given app\n     * @method\n     * @name AppCenter#codePushDeployments_create\n     * @param {} deployment - Deployment to be created\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    codePushDeployments_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/deployments';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['deployment'] !== undefined) {\n                body = parameters['deployment'];\n            }\n            if (parameters['deployment'] === undefined) {\n                reject(new Error('Missing required  parameter: deployment'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Crashes_ListSessionLogsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{crash_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['crashId'], '').toString())}`);\n        if (parameters['date'] !== undefined) {\n            queryParameters['date'] = this.convertParameterCollectionFormat(parameters['date'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get session logs by crash ID\n     * @method\n     * @name AppCenter#Crashes_ListSessionLogs\n     * @param {string} crashId - The id of the a crash\n     * @param {string} date - Date of data requested\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Crashes_ListSessionLogs(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{crash_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['crashId'], '').toString())}`);\n            if (parameters['crashId'] === undefined) {\n                reject(new Error('Missing required  parameter: crashId'));\n                return;\n            }\n            if (parameters['date'] !== undefined) {\n                queryParameters['date'] = this.convertParameterCollectionFormat(parameters['date'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    commits_listByShaListURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/commits/batch';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['hashes'] !== undefined) {\n            queryParameters['hashes'] = this.convertParameterCollectionFormat(parameters['hashes'], 'csv');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns commit information for a batch of shas\n     * @method\n     * @name AppCenter#commits_listByShaList\n     * @param {array} hashes - A collection of commit SHAs comma-delimited\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    commits_listByShaList(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/commits/batch';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['hashes'] !== undefined) {\n                queryParameters['hashes'] = this.convertParameterCollectionFormat(parameters['hashes'], 'csv');\n            }\n            if (parameters['hashes'] === undefined) {\n                reject(new Error('Missing required  parameter: hashes'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_getLogURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get the build log\n     * @method\n     * @name AppCenter#builds_getLog\n     * @param {integer} buildId - The build ID\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_getLog(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n            if (parameters['buildId'] === undefined) {\n                reject(new Error('Missing required  parameter: buildId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_getDownloadUriURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n        path = path.replace('{download_type}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['downloadType'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the download URI\n     * @method\n     * @name AppCenter#builds_getDownloadUri\n     * @param {integer} buildId - The build ID\n     * @param {string} downloadType - The download type\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_getDownloadUri(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n            if (parameters['buildId'] === undefined) {\n                reject(new Error('Missing required  parameter: buildId'));\n                return;\n            }\n            path = path.replace('{download_type}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['downloadType'], '').toString())}`);\n            if (parameters['downloadType'] === undefined) {\n                reject(new Error('Missing required  parameter: downloadType'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_distributeURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Distribute a build\n     * @method\n     * @name AppCenter#builds_distribute\n     * @param {integer} buildId - The build ID\n     * @param {} distributeInfo - The distribution details\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_distribute(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n            if (parameters['buildId'] === undefined) {\n                reject(new Error('Missing required  parameter: buildId'));\n                return;\n            }\n            if (parameters['distributeInfo'] !== undefined) {\n                body = parameters['distributeInfo'];\n            }\n            if (parameters['distributeInfo'] === undefined) {\n                reject(new Error('Missing required  parameter: distributeInfo'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the build detail for the given build ID\n     * @method\n     * @name AppCenter#builds_get\n     * @param {integer} buildId - The build ID\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n            if (parameters['buildId'] === undefined) {\n                reject(new Error('Missing required  parameter: buildId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Cancels a build\n     * @method\n     * @name AppCenter#builds_update\n     * @param {integer} buildId - The build ID\n     * @param {} properties - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{build_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['buildId'], '').toString())}`);\n            if (parameters['buildId'] === undefined) {\n                reject(new Error('Missing required  parameter: buildId'));\n                return;\n            }\n            if (parameters['properties'] !== undefined) {\n                body = parameters['properties'];\n            }\n            if (parameters['properties'] === undefined) {\n                reject(new Error('Missing required  parameter: properties'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_getStatusByAppIdURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/build_service_status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Application specific build service status\n     * @method\n     * @name AppCenter#builds_getStatusByAppId\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_getStatusByAppId(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/build_service_status';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    bugTracker_getRepoIssueFromCrashURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{crash_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['crashGroupId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get project issue related to a crash group\n     * @method\n     * @name AppCenter#bugTracker_getRepoIssueFromCrash\n     * @param {string} crashGroupId - CrashGroup Id\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    bugTracker_getRepoIssueFromCrash(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{crash_group_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['crashGroupId'], '').toString())}`);\n            if (parameters['crashGroupId'] === undefined) {\n                reject(new Error('Missing required  parameter: crashGroupId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    bugtracker_getSettingsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/bugtracker';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get bug tracker settings for a particular app\n     * @method\n     * @name AppCenter#bugtracker_getSettings\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    bugtracker_getSettings(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/bugtracker';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_listToolsetProjectsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        if (parameters['os'] !== undefined) {\n            queryParameters['os'] = this.convertParameterCollectionFormat(parameters['os'], '');\n        }\n        if (parameters['platform'] !== undefined) {\n            queryParameters['platform'] = this.convertParameterCollectionFormat(parameters['platform'], '');\n        }\n        if (parameters['maxSearchDepth'] !== undefined) {\n            queryParameters['maxSearchDepth'] = this.convertParameterCollectionFormat(parameters['maxSearchDepth'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the projects in the repository for the branch, for all toolsets\n     * @method\n     * @name AppCenter#builds_listToolsetProjects\n     * @param {string} branch - The branch name\n     * @param {string} os - The desired OS for the project scan; normally the same as the app OS\n     * @param {string} platform - The desired platform for the project scan\n     * @param {integer} maxSearchDepth - The depth of the repository to search for project files\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_listToolsetProjects(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['os'] !== undefined) {\n                queryParameters['os'] = this.convertParameterCollectionFormat(parameters['os'], '');\n            }\n            if (parameters['os'] === undefined) {\n                reject(new Error('Missing required  parameter: os'));\n                return;\n            }\n            if (parameters['platform'] !== undefined) {\n                queryParameters['platform'] = this.convertParameterCollectionFormat(parameters['platform'], '');\n            }\n            if (parameters['platform'] === undefined) {\n                reject(new Error('Missing required  parameter: platform'));\n                return;\n            }\n            if (parameters['maxSearchDepth'] !== undefined) {\n                queryParameters['maxSearchDepth'] = this.convertParameterCollectionFormat(parameters['maxSearchDepth'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    buildConfigurations_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/export_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        if (parameters['format'] !== undefined) {\n            queryParameters['format'] = this.convertParameterCollectionFormat(parameters['format'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the build configuration in Azure pipeline YAML format\n     * @method\n     * @name AppCenter#buildConfigurations_get\n     * @param {string} branch - The branch name\n     * @param {string} format - Configuration format\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    buildConfigurations_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/export_config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['format'] !== undefined) {\n                queryParameters['format'] = this.convertParameterCollectionFormat(parameters['format'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    branchConfigurations_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets the branch configuration\n     * @method\n     * @name AppCenter#branchConfigurations_get\n     * @param {string} branch - The branch name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    branchConfigurations_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    branchConfigurations_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Configures the branch for build\n     * @method\n     * @name AppCenter#branchConfigurations_create\n     * @param {string} branch - The branch name\n     * @param {} params - Parameters of the configuration\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    branchConfigurations_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['params'] !== undefined) {\n                body = parameters['params'];\n            }\n            if (parameters['params'] === undefined) {\n                reject(new Error('Missing required  parameter: params'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    branchConfigurations_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Reconfigures the branch for build\n     * @method\n     * @name AppCenter#branchConfigurations_update\n     * @param {string} branch - The branch name\n     * @param {} params - Parameters of the configuration\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    branchConfigurations_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['params'] !== undefined) {\n                body = parameters['params'];\n            }\n            if (parameters['params'] === undefined) {\n                reject(new Error('Missing required  parameter: params'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    branchConfigurations_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes the branch build configuration\n     * @method\n     * @name AppCenter#branchConfigurations_delete\n     * @param {string} branch - The branch name\n     * @param {} payload - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    branchConfigurations_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['payload'] !== undefined) {\n                body = parameters['payload'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_listByBranchURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the list of builds for the branch\n     * @method\n     * @name AppCenter#builds_listByBranch\n     * @param {string} branch - The branch name\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_listByBranch(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a build\n     * @method\n     * @name AppCenter#builds_create\n     * @param {string} branch - The branch name\n     * @param {} params - Parameters of the build\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{branch}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['branch'], '').toString())}`);\n            if (parameters['branch'] === undefined) {\n                reject(new Error('Missing required  parameter: branch'));\n                return;\n            }\n            if (parameters['params'] !== undefined) {\n                body = parameters['params'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    builds_listBranchesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns the list of Git branches for this application\n     * @method\n     * @name AppCenter#builds_listBranches\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    builds_listBranches(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/branches';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    billingAggregatedInformation_getByAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/billing/aggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['service'] !== undefined) {\n            queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n        }\n        if (parameters['period'] !== undefined) {\n            queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n        }\n        if (parameters['showOriginalPlans'] !== undefined) {\n            queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Aggregated Billing Information for owner of a given app.\n     * @method\n     * @name AppCenter#billingAggregatedInformation_getByApp\n     * @param {string} service - Type of service that should be included in the Billing Information\n     * @param {string} period - Type of period that should be included in the Billing Information\n     * @param {boolean} showOriginalPlans - Controls whether the API should show the original plan when Azure Subscription is not enabled\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    billingAggregatedInformation_getByApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/billing/aggregated';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['service'] !== undefined) {\n                queryParameters['service'] = this.convertParameterCollectionFormat(parameters['service'], '');\n            }\n            if (parameters['period'] !== undefined) {\n                queryParameters['period'] = this.convertParameterCollectionFormat(parameters['period'], '');\n            }\n            if (parameters['showOriginalPlans'] !== undefined) {\n                queryParameters['showOriginalPlans'] = this.convertParameterCollectionFormat(parameters['showOriginalPlans'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    azureSubscription_deleteForAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{azure_subscription_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['azureSubscriptionId'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the azure subscriptions for the app\n     * @method\n     * @name AppCenter#azureSubscription_deleteForApp\n     * @param {string} azureSubscriptionId - The unique ID (UUID) of the azure subscription\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    azureSubscription_deleteForApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{azure_subscription_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['azureSubscriptionId'], '').toString())}`);\n            if (parameters['azureSubscriptionId'] === undefined) {\n                reject(new Error('Missing required  parameter: azureSubscriptionId'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    azureSubscription_listForAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of azure subscriptions for the app\n     * @method\n     * @name AppCenter#azureSubscription_listForApp\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    azureSubscription_listForApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    azureSubscription_linkForAppURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Link azure subscription to an app\n     * @method\n     * @name AppCenter#azureSubscription_linkForApp\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} azureSubscriptionToAppData - The azure subscription data needed to be link to the app.\n     */\n    azureSubscription_linkForApp(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['azureSubscriptionToAppData'] !== undefined) {\n                body = parameters['azureSubscriptionToAppData'];\n            }\n            if (parameters['azureSubscriptionToAppData'] === undefined) {\n                reject(new Error('Missing required  parameter: azureSubscriptionToAppData'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_updateAvatarURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Sets the app avatar\n     * @method\n     * @name AppCenter#apps_updateAvatar\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {file} avatar - The image for an app avatar to upload.\n     */\n    apps_updateAvatar(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'multipart/form-data';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['avatar'] !== undefined) {\n                form['avatar'] = parameters['avatar'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_deleteAvatarURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes the uploaded app avatar\n     * @method\n     * @name AppCenter#apps_deleteAvatar\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    apps_deleteAvatar(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/avatar';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appleMapping_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get mapping of apple app to an existing app in apple store.\n     * @method\n     * @name AppCenter#appleMapping_get\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    appleMapping_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appleMapping_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete mapping of apple app to an existing app in apple store.\n     * @method\n     * @name AppCenter#appleMapping_delete\n     * @param {} body - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    appleMapping_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appleMapping_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Create a mapping for an existing app in apple store for the specified application.\n     * @method\n     * @name AppCenter#appleMapping_create\n     * @param {} body - The apple app mapping object\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    appleMapping_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/apple_mapping';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['body'] !== undefined) {\n                body = parameters['body'];\n            }\n            if (parameters['body'] === undefined) {\n                reject(new Error('Missing required  parameter: body'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appApiTokens_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{api_token_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['apiTokenId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the App Api Token object with the specific ID\n     * @method\n     * @name AppCenter#appApiTokens_delete\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {string} apiTokenId - The unique ID (UUID) of the api token\n     */\n    appApiTokens_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{api_token_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['apiTokenId'], '').toString())}`);\n            if (parameters['apiTokenId'] === undefined) {\n                reject(new Error('Missing required  parameter: apiTokenId'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appApiTokens_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns App API tokens for the app\n     * @method\n     * @name AppCenter#appApiTokens_list\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    appApiTokens_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    appApiTokens_newURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new App API token\n     * @method\n     * @name AppCenter#appApiTokens_new\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     * @param {} description - Description of the token\n     */\n    appApiTokens_new(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters['description'] !== undefined) {\n                body = parameters['description'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_VersionsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/versions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of active versions in the time range ordered by version.\n     * @method\n     * @name AppCenter#Analytics_Versions\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_Versions(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/versions';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_PerDeviceCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of sessions per device in the time range.\n     * @method\n     * @name AppCenter#Analytics_PerDeviceCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_PerDeviceCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_SessionDurationsDistributionURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets session duration.\n     * @method\n     * @name AppCenter#Analytics_SessionDurationsDistribution\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_SessionDurationsDistribution(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_SessionCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of sessions in the time range.\n     * @method\n     * @name AppCenter#Analytics_SessionCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_SessionCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_PlaceCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/places';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Places in the time range.\n     * @method\n     * @name AppCenter#Analytics_PlaceCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_PlaceCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/places';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_OperatingSystemCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/oses';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * OSes in the time range.\n     * @method\n     * @name AppCenter#Analytics_OperatingSystemCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_OperatingSystemCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/oses';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_ModelCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/models';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Models in the time range.\n     * @method\n     * @name AppCenter#Analytics_ModelCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_ModelCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/models';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_LogFlowURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.\n     * @method\n     * @name AppCenter#Analytics_LogFlow\n     * @param {string} start - Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_LogFlow(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_LanguageCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/languages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Languages in the time range.\n     * @method\n     * @name AppCenter#Analytics_LanguageCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_LanguageCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/languages';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_GenericLogFlowURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.\n     * @method\n     * @name AppCenter#Analytics_GenericLogFlow\n     * @param {string} start - Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_GenericLogFlow(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventPropertyCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        path = path.replace('{event_property_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventPropertyName'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Event properties value counts during the time range in descending order.\n     * @method\n     * @name AppCenter#Analytics_EventPropertyCounts\n     * @param {string} eventName - The id of the event.\n     * @param {string} eventPropertyName - The id of the event property.\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {integer} top - The number of property values to return. Set to 0 in order to fetch all results available.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventPropertyCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            path = path.replace('{event_property_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventPropertyName'], '').toString())}`);\n            if (parameters['eventPropertyName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventPropertyName'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventPropertiesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Event properties.\n     * @method\n     * @name AppCenter#Analytics_EventProperties\n     * @param {string} eventName - The id of the event.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventProperties(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventCountURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of events by interval in the time range.\n     * @method\n     * @name AppCenter#Analytics_EventCount\n     * @param {string} eventName - The id of the event.\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventCount(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventDeviceCountURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of devices for an event by interval in the time range.\n     * @method\n     * @name AppCenter#Analytics_EventDeviceCount\n     * @param {string} eventName - The id of the event.\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventDeviceCount(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventPerSessionCountURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of events per session by interval in the time range.\n     * @method\n     * @name AppCenter#Analytics_EventPerSessionCount\n     * @param {string} eventName - The id of the event.\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventPerSessionCount(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventPerDeviceCountURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of events per device by interval in the time range.\n     * @method\n     * @name AppCenter#Analytics_EventPerDeviceCount\n     * @param {string} eventName - The id of the event.\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventPerDeviceCount(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventsDeleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the set of Events with the specified event names.\n     * @method\n     * @name AppCenter#Analytics_EventsDelete\n     * @param {string} eventName - The id of the event.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventsDelete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        if (parameters['eventName'] !== undefined) {\n            queryParameters['event_name'] = this.convertParameterCollectionFormat(parameters['eventName'], 'pipes');\n        }\n        if (parameters['top'] !== undefined) {\n            queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n        }\n        if (parameters['skip'] !== undefined) {\n            queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n        }\n        if (parameters['inlinecount'] !== undefined) {\n            queryParameters['$inlinecount'] = this.convertParameterCollectionFormat(parameters['inlinecount'], '');\n        }\n        if (parameters['orderby'] !== undefined) {\n            queryParameters['$orderby'] = this.convertParameterCollectionFormat(parameters['orderby'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of active events in the time range ordered by event.\n     * @method\n     * @name AppCenter#Analytics_Events\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {array} eventName - To select the specific events.\n     * @param {integer} top - The maximum number of results to return. (0 will fetch all results)\n     * @param {integer} skip - The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.\n     * @param {string} inlinecount - Controls whether or not to include a count of all the items across all pages.\n     * @param {string} orderby - controls the sorting order and sorting based on which column\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_Events(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/events';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            if (parameters['eventName'] !== undefined) {\n                queryParameters['event_name'] = this.convertParameterCollectionFormat(parameters['eventName'], 'pipes');\n            }\n            if (parameters['top'] !== undefined) {\n                queryParameters['$top'] = this.convertParameterCollectionFormat(parameters['top'], '');\n            }\n            if (parameters['skip'] !== undefined) {\n                queryParameters['$skip'] = this.convertParameterCollectionFormat(parameters['skip'], '');\n            }\n            if (parameters['inlinecount'] !== undefined) {\n                queryParameters['$inlinecount'] = this.convertParameterCollectionFormat(parameters['inlinecount'], '');\n            }\n            if (parameters['orderby'] !== undefined) {\n                queryParameters['$orderby'] = this.convertParameterCollectionFormat(parameters['orderby'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_EventsDeleteLogsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the set of Events with the specified event names.\n     * @method\n     * @name AppCenter#Analytics_EventsDeleteLogs\n     * @param {string} eventName - The id of the event.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_EventsDeleteLogs(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{event_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['eventName'], '').toString())}`);\n            if (parameters['eventName'] === undefined) {\n                reject(new Error('Missing required  parameter: eventName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_DistributionReleaseCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of total downloads for the provided distribution releases.\n     * @method\n     * @name AppCenter#Analytics_DistributionReleaseCounts\n     * @param {} releases - The releases to retrieve.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_DistributionReleaseCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['releases'] !== undefined) {\n                body = parameters['releases'];\n            }\n            if (parameters['releases'] === undefined) {\n                reject(new Error('Missing required  parameter: releases'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_CrashGroupsTotalsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Overall crashes and affected users count of the selected crash groups with selected versions.\n     * @method\n     * @name AppCenter#Analytics_CrashGroupsTotals\n     * @param {} crashGroups - Microsoft Visual Studio App Center API\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_CrashGroupsTotals(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['crashGroups'] !== undefined) {\n                body = parameters['crashGroups'];\n            }\n            if (parameters['crashGroups'] === undefined) {\n                reject(new Error('Missing required  parameter: crashGroups'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_AudienceNameExistsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns whether audience definition exists.\n     * @method\n     * @name AppCenter#Analytics_AudienceNameExists\n     * @param {string} audienceName - The name of the audience\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_AudienceNameExists(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n            if (parameters['audienceName'] === undefined) {\n                reject(new Error('Missing required  parameter: audienceName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_DeleteAudienceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Deletes audience definition.\n     * @method\n     * @name AppCenter#Analytics_DeleteAudience\n     * @param {string} audienceName - The name of the audience\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_DeleteAudience(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n            if (parameters['audienceName'] === undefined) {\n                reject(new Error('Missing required  parameter: audienceName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_GetAudienceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Gets audience definition.\n     * @method\n     * @name AppCenter#Analytics_GetAudience\n     * @param {string} audienceName - The name of the audience\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_GetAudience(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n            if (parameters['audienceName'] === undefined) {\n                reject(new Error('Missing required  parameter: audienceName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_CreateOrUpdateAudienceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates or updates audience definition.\n     * @method\n     * @name AppCenter#Analytics_CreateOrUpdateAudience\n     * @param {string} audienceName - The name of the audience\n     * @param {} audience - Audience definition\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_CreateOrUpdateAudience(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{audience_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['audienceName'], '').toString())}`);\n            if (parameters['audienceName'] === undefined) {\n                reject(new Error('Missing required  parameter: audienceName'));\n                return;\n            }\n            if (parameters['audience'] !== undefined) {\n                body = parameters['audience'];\n            }\n            if (parameters['audience'] === undefined) {\n                reject(new Error('Missing required  parameter: audience'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_ListDevicePropertyValuesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{property_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['propertyName'], '').toString())}`);\n        if (parameters['contains'] !== undefined) {\n            queryParameters['contains'] = this.convertParameterCollectionFormat(parameters['contains'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get list of device property values.\n     * @method\n     * @name AppCenter#Analytics_ListDevicePropertyValues\n     * @param {string} propertyName - Device property\n     * @param {string} contains - Contains string\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_ListDevicePropertyValues(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{property_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['propertyName'], '').toString())}`);\n            if (parameters['propertyName'] === undefined) {\n                reject(new Error('Missing required  parameter: propertyName'));\n                return;\n            }\n            if (parameters['contains'] !== undefined) {\n                queryParameters['contains'] = this.convertParameterCollectionFormat(parameters['contains'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_ListDevicePropertiesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get list of device properties.\n     * @method\n     * @name AppCenter#Analytics_ListDeviceProperties\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_ListDeviceProperties(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_ListCustomPropertiesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get list of custom properties.\n     * @method\n     * @name AppCenter#Analytics_ListCustomProperties\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_ListCustomProperties(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_TestAudienceURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Tests audience definition.\n     * @method\n     * @name AppCenter#Analytics_TestAudience\n     * @param {} audience - Audience definition\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_TestAudience(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['audience'] !== undefined) {\n                body = parameters['audience'];\n            }\n            if (parameters['audience'] === undefined) {\n                reject(new Error('Missing required  parameter: audience'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_ListAudiencesURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['includeDisabled'] !== undefined) {\n            queryParameters['include_disabled'] = this.convertParameterCollectionFormat(parameters['includeDisabled'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Get list of audiences.\n     * @method\n     * @name AppCenter#Analytics_ListAudiences\n     * @param {boolean} includeDisabled - Include disabled audience definitions\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_ListAudiences(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['includeDisabled'] !== undefined) {\n                queryParameters['include_disabled'] = this.convertParameterCollectionFormat(parameters['includeDisabled'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    Analytics_DeviceCountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['start'] !== undefined) {\n            queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n        }\n        if (parameters['end'] !== undefined) {\n            queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n        }\n        if (parameters['versions'] !== undefined) {\n            queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n        }\n        if (parameters['appBuild'] !== undefined) {\n            queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Count of active devices by interval in the time range.\n     * @method\n     * @name AppCenter#Analytics_DeviceCounts\n     * @param {string} start - Start date time in data in ISO 8601 date time format.\n     * @param {string} end - Last date time in data in ISO 8601 date time format.\n     * @param {array} versions - To select specific application versions\n     * @param {string} appBuild - Application build number. If build number is specified than multiple versions are not allowed.\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    Analytics_DeviceCounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['start'] !== undefined) {\n                queryParameters['start'] = this.convertParameterCollectionFormat(parameters['start'], '');\n            }\n            if (parameters['start'] === undefined) {\n                reject(new Error('Missing required  parameter: start'));\n                return;\n            }\n            if (parameters['end'] !== undefined) {\n                queryParameters['end'] = this.convertParameterCollectionFormat(parameters['end'], '');\n            }\n            if (parameters['versions'] !== undefined) {\n                queryParameters['versions'] = this.convertParameterCollectionFormat(parameters['versions'], 'pipes');\n            }\n            if (parameters['appBuild'] !== undefined) {\n                queryParameters['app_build'] = this.convertParameterCollectionFormat(parameters['appBuild'], '');\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_getURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Return a specific app with the given app name which belongs to the given owner.\n     * @method\n     * @name AppCenter#apps_get\n     * @param {string} ownerName - The name of the owner\n     * @param {string} appName - The name of the application\n     */\n    apps_get(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_updateURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Partially updates a single app\n     * @method\n     * @name AppCenter#apps_update\n     * @param {string} appName - The name of the application\n     * @param {string} ownerName - The name of the owner\n     * @param {} app - The partial data for the app\n     */\n    apps_update(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            if (parameters['app'] !== undefined) {\n                body = parameters['app'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n        path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete an app\n     * @method\n     * @name AppCenter#apps_delete\n     * @param {string} appName - The name of the application\n     * @param {string} ownerName - The name of the owner\n     */\n    apps_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps/{owner_name}/{app_name}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{app_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['appName'], '').toString())}`);\n            if (parameters['appName'] === undefined) {\n                reject(new Error('Missing required  parameter: appName'));\n                return;\n            }\n            path = path.replace('{owner_name}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['ownerName'], '').toString())}`);\n            if (parameters['ownerName'] === undefined) {\n                reject(new Error('Missing required  parameter: ownerName'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_createURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new app and returns it to the caller\n     * @method\n     * @name AppCenter#apps_create\n     * @param {} app - The data for the app\n     */\n    apps_create(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['app'] !== undefined) {\n                body = parameters['app'];\n            }\n            if (parameters['app'] === undefined) {\n                reject(new Error('Missing required  parameter: app'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    apps_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters['orderBy'] !== undefined) {\n            queryParameters['$orderBy'] = this.convertParameterCollectionFormat(parameters['orderBy'], '');\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list of apps\n     * @method\n     * @name AppCenter#apps_list\n     * @param {string} orderBy - The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.\n     */\n    apps_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/apps';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['orderBy'] !== undefined) {\n                queryParameters['$orderBy'] = this.convertParameterCollectionFormat(parameters['orderBy'], '');\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    userApiTokens_deleteURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens/{api_token_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        path = path.replace('{api_token_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['apiTokenId'], '').toString())}`);\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Delete the user api_token object with the specific id\n     * @method\n     * @name AppCenter#userApiTokens_delete\n     * @param {string} apiTokenId - The unique ID (UUID) of the api token\n     */\n    userApiTokens_delete(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens/{api_token_id}';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            path = path.replace('{api_token_id}', `${encodeURIComponent(this.convertParameterCollectionFormat(parameters['apiTokenId'], '').toString())}`);\n            if (parameters['apiTokenId'] === undefined) {\n                reject(new Error('Missing required  parameter: apiTokenId'));\n                return;\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    userApiTokens_listURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns api tokens for the authenticated user\n     * @method\n     * @name AppCenter#userApiTokens_list\n     */\n    userApiTokens_list(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    userApiTokens_newURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        queryParameters = {};\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Creates a new User API token\n     * @method\n     * @name AppCenter#userApiTokens_new\n     * @param {} description - Description of the token\n     */\n    userApiTokens_new(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/api_tokens';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters['description'] !== undefined) {\n                body = parameters['description'];\n            }\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            form = queryParameters;\n            queryParameters = {};\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    organizations_listAdministeredURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/administeredOrgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Returns a list organizations in which the requesting user is an admin\n     * @method\n     * @name AppCenter#organizations_listAdministered\n     */\n    organizations_listAdministered(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/administeredOrgs';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportFeatureFlagURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export/featureFlags';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists feature flag data\n     * @method\n     * @name AppCenter#test_gdprExportFeatureFlag\n     */\n    test_gdprExportFeatureFlag(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export/featureFlags';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportAccountURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export/accounts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists account data\n     * @method\n     * @name AppCenter#test_gdprExportAccount\n     */\n    test_gdprExportAccount(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export/accounts';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n    test_gdprExportAccountsURL(parameters) {\n        let queryParameters = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        if (parameters.$queryParameters) {\n            queryParameters = {\n                ...queryParameters,\n                ...parameters.$queryParameters\n            };\n        }\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n    /**\n     * Lists all the endpoints available for Test accounts data\n     * @method\n     * @name AppCenter#test_gdprExportAccounts\n     */\n    test_gdprExportAccounts(parameters) {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/v0.1/account/test/export';\n        if (parameters.$path) {\n            path = (typeof (parameters.$path) === 'function') ? parameters.$path(path) : parameters.$path;\n        }\n        let body;\n        let queryParameters = {};\n        let headers = {};\n        let form = {};\n        return new Promise((resolve, reject) => {\n            headers['accept'] = 'application/json';\n            headers['content-type'] = 'application/json';\n            if (parameters.$queryParameters) {\n                queryParameters = {\n                    ...queryParameters,\n                    ...parameters.$queryParameters\n                };\n            }\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve, parameters);\n        });\n    }\n}\nexports.AppCenter = AppCenter;\nexports.default = AppCenter;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst app_center_1 = __importDefault(require(\"./generated/app-center\"));\nclass AppCenterWithAuth extends app_center_1.default {\n    constructor(apiToken, domain, logger) {\n        super(domain, logger);\n        if (apiToken) {\n            this.setRequestHeadersHandler(headers => ({ 'X-API-Token': apiToken, ...headers }));\n        }\n    }\n}\nexports.default = AppCenterWithAuth;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core = __importStar(require(\"@actions/core\"));\nconst run_1 = require(\"./run\");\nconst main = async () => {\n    await (0, run_1.run)({\n        apiToken: core.getInput('API_TOKEN', { required: true }),\n        ownerName: core.getInput('OWNER_NAME', { required: true }),\n        appName: core.getInput('APP_NAME', { required: true }),\n        branch: core.getInput('BRANCH', { required: true }),\n        configPath: core.getInput('CONFIG_PATH', { required: true }),\n    });\n};\nmain().catch((e) => core.setFailed(e instanceof Error ? e : String(e)));\n",null,"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst winston_1 = __importDefault(require(\"winston\"));\nconst logger = winston_1.default.createLogger({\n    level: \"debug\",\n    transports: [\n        new winston_1.default.transports.Console({\n            format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.timestamp(), winston_1.default.format.printf(({ level, message, timestamp, ...args }) => {\n                return `${timestamp} ${level}: ${message} ${Object.keys(args).length ? JSON.stringify(args, null, 2) : ''}`;\n            }))\n        })\n    ]\n});\nexports.default = logger;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));\n    }\n    command_1.issueCommand('set-env', { name }, convertedVal);\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueFileCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    if (options && options.trimWhitespace === false) {\n        return inputs;\n    }\n    return inputs.map(input => input.trim());\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    const filePath = process.env['GITHUB_OUTPUT'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));\n    }\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    const filePath = process.env['GITHUB_STATE'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));\n    }\n    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n/**\n * Summary exports\n */\nvar summary_1 = require(\"./summary\");\nObject.defineProperty(exports, \"summary\", { enumerable: true, get: function () { return summary_1.summary; } });\n/**\n * @deprecated use core.summary\n */\nvar summary_2 = require(\"./summary\");\nObject.defineProperty(exports, \"markdownSummary\", { enumerable: true, get: function () { return summary_2.markdownSummary; } });\n/**\n * Path exports\n */\nvar path_utils_1 = require(\"./path-utils\");\nObject.defineProperty(exports, \"toPosixPath\", { enumerable: true, get: function () { return path_utils_1.toPosixPath; } });\nObject.defineProperty(exports, \"toWin32Path\", { enumerable: true, get: function () { return path_utils_1.toWin32Path; } });\nObject.defineProperty(exports, \"toPlatformPath\", { enumerable: true, get: function () { return path_utils_1.toPlatformPath; } });\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareKeyValueMessage = exports.issueFileCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst uuid_1 = require(\"uuid\");\nconst utils_1 = require(\"./utils\");\nfunction issueFileCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueFileCommand = issueFileCommand;\nfunction prepareKeyValueMessage(key, value) {\n    const delimiter = `ghadelimiter_${uuid_1.v4()}`;\n    const convertedValue = utils_1.toCommandValue(value);\n    // These should realistically never happen, but just in case someone finds a\n    // way to exploit uuid generation let's not allow keys or values that contain\n    // the delimiter.\n    if (key.includes(delimiter)) {\n        throw new Error(`Unexpected input: name should not contain the delimiter \"${delimiter}\"`);\n    }\n    if (convertedValue.includes(delimiter)) {\n        throw new Error(`Unexpected input: value should not contain the delimiter \"${delimiter}\"`);\n    }\n    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;\n}\nexports.prepareKeyValueMessage = prepareKeyValueMessage;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/lib/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.result.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                core_1.debug(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                core_1.setSecret(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;\nconst path = __importStar(require(\"path\"));\n/**\n * toPosixPath converts the given path to the posix form. On Windows, \\\\ will be\n * replaced with /.\n *\n * @param pth. Path to transform.\n * @return string Posix path.\n */\nfunction toPosixPath(pth) {\n    return pth.replace(/[\\\\]/g, '/');\n}\nexports.toPosixPath = toPosixPath;\n/**\n * toWin32Path converts the given path to the win32 form. On Linux, / will be\n * replaced with \\\\.\n *\n * @param pth. Path to transform.\n * @return string Win32 path.\n */\nfunction toWin32Path(pth) {\n    return pth.replace(/[/]/g, '\\\\');\n}\nexports.toWin32Path = toWin32Path;\n/**\n * toPlatformPath converts the given path to a platform-specific path. It does\n * this by replacing instances of / and \\ with the platform-specific path\n * separator.\n *\n * @param pth The path to platformize.\n * @return string The platform-specific path.\n */\nfunction toPlatformPath(pth) {\n    return pth.replace(/[/\\\\]/g, path.sep);\n}\nexports.toPlatformPath = toPlatformPath;\n//# sourceMappingURL=path-utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;\nconst os_1 = require(\"os\");\nconst fs_1 = require(\"fs\");\nconst { access, appendFile, writeFile } = fs_1.promises;\nexports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';\nexports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';\nclass Summary {\n    constructor() {\n        this._buffer = '';\n    }\n    /**\n     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist\n     * Also checks r/w permissions.\n     *\n     * @returns step summary file path\n     */\n    filePath() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._filePath) {\n                return this._filePath;\n            }\n            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];\n            if (!pathFromEnv) {\n                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);\n            }\n            try {\n                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);\n            }\n            catch (_a) {\n                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);\n            }\n            this._filePath = pathFromEnv;\n            return this._filePath;\n        });\n    }\n    /**\n     * Wraps content in an HTML tag, adding any HTML attributes\n     *\n     * @param {string} tag HTML tag to wrap\n     * @param {string | null} content content within the tag\n     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add\n     *\n     * @returns {string} content wrapped in HTML element\n     */\n    wrap(tag, content, attrs = {}) {\n        const htmlAttrs = Object.entries(attrs)\n            .map(([key, value]) => ` ${key}=\"${value}\"`)\n            .join('');\n        if (!content) {\n            return `<${tag}${htmlAttrs}>`;\n        }\n        return `<${tag}${htmlAttrs}>${content}</${tag}>`;\n    }\n    /**\n     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.\n     *\n     * @param {SummaryWriteOptions} [options] (optional) options for write operation\n     *\n     * @returns {Promise<Summary>} summary instance\n     */\n    write(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);\n            const filePath = yield this.filePath();\n            const writeFunc = overwrite ? writeFile : appendFile;\n            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });\n            return this.emptyBuffer();\n        });\n    }\n    /**\n     * Clears the summary buffer and wipes the summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.emptyBuffer().write({ overwrite: true });\n        });\n    }\n    /**\n     * Returns the current summary buffer as a string\n     *\n     * @returns {string} string of summary buffer\n     */\n    stringify() {\n        return this._buffer;\n    }\n    /**\n     * If the summary buffer is empty\n     *\n     * @returns {boolen} true if the buffer is empty\n     */\n    isEmptyBuffer() {\n        return this._buffer.length === 0;\n    }\n    /**\n     * Resets the summary buffer without writing to summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    emptyBuffer() {\n        this._buffer = '';\n        return this;\n    }\n    /**\n     * Adds raw text to the summary buffer\n     *\n     * @param {string} text content to add\n     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addRaw(text, addEOL = false) {\n        this._buffer += text;\n        return addEOL ? this.addEOL() : this;\n    }\n    /**\n     * Adds the operating system-specific end-of-line marker to the buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addEOL() {\n        return this.addRaw(os_1.EOL);\n    }\n    /**\n     * Adds an HTML codeblock to the summary buffer\n     *\n     * @param {string} code content to render within fenced code block\n     * @param {string} lang (optional) language to syntax highlight code\n     *\n     * @returns {Summary} summary instance\n     */\n    addCodeBlock(code, lang) {\n        const attrs = Object.assign({}, (lang && { lang }));\n        const element = this.wrap('pre', this.wrap('code', code), attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML list to the summary buffer\n     *\n     * @param {string[]} items list of items to render\n     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addList(items, ordered = false) {\n        const tag = ordered ? 'ol' : 'ul';\n        const listItems = items.map(item => this.wrap('li', item)).join('');\n        const element = this.wrap(tag, listItems);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML table to the summary buffer\n     *\n     * @param {SummaryTableCell[]} rows table rows\n     *\n     * @returns {Summary} summary instance\n     */\n    addTable(rows) {\n        const tableBody = rows\n            .map(row => {\n            const cells = row\n                .map(cell => {\n                if (typeof cell === 'string') {\n                    return this.wrap('td', cell);\n                }\n                const { header, data, colspan, rowspan } = cell;\n                const tag = header ? 'th' : 'td';\n                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));\n                return this.wrap(tag, data, attrs);\n            })\n                .join('');\n            return this.wrap('tr', cells);\n        })\n            .join('');\n        const element = this.wrap('table', tableBody);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds a collapsable HTML details element to the summary buffer\n     *\n     * @param {string} label text for the closed state\n     * @param {string} content collapsable content\n     *\n     * @returns {Summary} summary instance\n     */\n    addDetails(label, content) {\n        const element = this.wrap('details', this.wrap('summary', label) + content);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML image tag to the summary buffer\n     *\n     * @param {string} src path to the image you to embed\n     * @param {string} alt text description of the image\n     * @param {SummaryImageOptions} options (optional) addition image attributes\n     *\n     * @returns {Summary} summary instance\n     */\n    addImage(src, alt, options) {\n        const { width, height } = options || {};\n        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));\n        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML section heading element\n     *\n     * @param {string} text heading text\n     * @param {number | string} [level=1] (optional) the heading level, default: 1\n     *\n     * @returns {Summary} summary instance\n     */\n    addHeading(text, level) {\n        const tag = `h${level}`;\n        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)\n            ? tag\n            : 'h1';\n        const element = this.wrap(allowedTag, text);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML thematic break (<hr>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addSeparator() {\n        const element = this.wrap('hr', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML line break (<br>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addBreak() {\n        const element = this.wrap('br', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML blockquote to the summary buffer\n     *\n     * @param {string} text quote text\n     * @param {string} cite (optional) citation url\n     *\n     * @returns {Summary} summary instance\n     */\n    addQuote(text, cite) {\n        const attrs = Object.assign({}, (cite && { cite }));\n        const element = this.wrap('blockquote', text, attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML anchor tag to the summary buffer\n     *\n     * @param {string} text link text/content\n     * @param {string} href hyperlink\n     *\n     * @returns {Summary} summary instance\n     */\n    addLink(text, href) {\n        const element = this.wrap('a', text, { href });\n        return this.addRaw(element).addEOL();\n    }\n}\nconst _summary = new Summary();\n/**\n * @deprecated use `core.summary`\n */\nexports.markdownSummary = _summary;\nexports.summary = _summary;\n//# sourceMappingURL=summary.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n//# sourceMappingURL=auth.js.map","\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst pm = __importStar(require(\"./proxy\"));\nconst tunnel = __importStar(require(\"tunnel\"));\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                let output = Buffer.alloc(0);\n                this.message.on('data', (chunk) => {\n                    output = Buffer.concat([output, chunk]);\n                });\n                this.message.on('end', () => {\n                    resolve(output.toString());\n                });\n            }));\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    const parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    get(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('GET', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    del(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('POST', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PUT', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    head(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request(verb, requestUrl, stream, additionalHeaders);\n        });\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    getJson(requestUrl, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            const res = yield this.get(requestUrl, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    postJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.post(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    putJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.put(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    patchJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.patch(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    request(verb, requestUrl, data, headers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                throw new Error('Client has already been disposed.');\n            }\n            const parsedUrl = new URL(requestUrl);\n            let info = this._prepareRequest(verb, parsedUrl, headers);\n            // Only perform retries on reads since writes may not be idempotent.\n            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)\n                ? this._maxRetries + 1\n                : 1;\n            let numTries = 0;\n            let response;\n            do {\n                response = yield this.requestRaw(info, data);\n                // Check if it's an authentication challenge\n                if (response &&\n                    response.message &&\n                    response.message.statusCode === HttpCodes.Unauthorized) {\n                    let authenticationHandler;\n                    for (const handler of this.handlers) {\n                        if (handler.canHandleAuthentication(response)) {\n                            authenticationHandler = handler;\n                            break;\n                        }\n                    }\n                    if (authenticationHandler) {\n                        return authenticationHandler.handleAuthentication(this, info, data);\n                    }\n                    else {\n                        // We have received an unauthorized response but have no handlers to handle it.\n                        // Let the response return to the caller.\n                        return response;\n                    }\n                }\n                let redirectsRemaining = this._maxRedirects;\n                while (response.message.statusCode &&\n                    HttpRedirectCodes.includes(response.message.statusCode) &&\n                    this._allowRedirects &&\n                    redirectsRemaining > 0) {\n                    const redirectUrl = response.message.headers['location'];\n                    if (!redirectUrl) {\n                        // if there's no location to redirect to, we won't\n                        break;\n                    }\n                    const parsedRedirectUrl = new URL(redirectUrl);\n                    if (parsedUrl.protocol === 'https:' &&\n                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&\n                        !this._allowRedirectDowngrade) {\n                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                    }\n                    // we need to finish reading the response before reassigning response\n                    // which will leak the open socket.\n                    yield response.readBody();\n                    // strip authorization header if redirected to a different hostname\n                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                        for (const header in headers) {\n                            // header names are case insensitive\n                            if (header.toLowerCase() === 'authorization') {\n                                delete headers[header];\n                            }\n                        }\n                    }\n                    // let's make the request with the new redirectUrl\n                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                    response = yield this.requestRaw(info, data);\n                    redirectsRemaining--;\n                }\n                if (!response.message.statusCode ||\n                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {\n                    // If not a retry code, return immediately instead of retrying\n                    return response;\n                }\n                numTries += 1;\n                if (numTries < maxTries) {\n                    yield response.readBody();\n                    yield this._performExponentialBackoff(numTries);\n                }\n            } while (numTries < maxTries);\n            return response;\n        });\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function callbackForResult(err, res) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else if (!res) {\n                        // If `err` is not passed, then `res` must be passed.\n                        reject(new Error('Unknown error'));\n                    }\n                    else {\n                        resolve(res);\n                    }\n                }\n                this.requestRawWithCallback(info, data, callbackForResult);\n            });\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        if (typeof data === 'string') {\n            if (!info.options.headers) {\n                info.options.headers = {};\n            }\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        function handleResult(err, res) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        }\n        const req = info.httpModule.request(info.options, (msg) => {\n            const res = new HttpClientResponse(msg);\n            handleResult(undefined, res);\n        });\n        let socket;\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error(`Request timeout: ${info.options.path}`));\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        const parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            for (const handler of this.handlers) {\n                handler.prepareRequest(info.options);\n            }\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        const proxyUrl = pm.getProxyUrl(parsedUrl);\n        const useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.\n        if (proxyUrl && proxyUrl.hostname) {\n            const agentOptions = {\n                maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {\n                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                })), { host: proxyUrl.hostname, port: proxyUrl.port })\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        return __awaiter(this, void 0, void 0, function* () {\n            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n            return new Promise(resolve => setTimeout(() => resolve(), ms));\n        });\n    }\n    _processResponse(res, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                const statusCode = res.message.statusCode || 0;\n                const response = {\n                    statusCode,\n                    result: null,\n                    headers: {}\n                };\n                // not found leads to null obj returned\n                if (statusCode === HttpCodes.NotFound) {\n                    resolve(response);\n                }\n                // get the result from the body\n                function dateTimeDeserializer(key, value) {\n                    if (typeof value === 'string') {\n                        const a = new Date(value);\n                        if (!isNaN(a.valueOf())) {\n                            return a;\n                        }\n                    }\n                    return value;\n                }\n                let obj;\n                let contents;\n                try {\n                    contents = yield res.readBody();\n                    if (contents && contents.length > 0) {\n                        if (options && options.deserializeDates) {\n                            obj = JSON.parse(contents, dateTimeDeserializer);\n                        }\n                        else {\n                            obj = JSON.parse(contents);\n                        }\n                        response.result = obj;\n                    }\n                    response.headers = res.message.headers;\n                }\n                catch (err) {\n                    // Invalid resource (contents not json);  leaving result obj null\n                }\n                // note that 3xx redirects are handled by the http layer.\n                if (statusCode > 299) {\n                    let msg;\n                    // if exception/error in body, attempt to get better error\n                    if (obj && obj.message) {\n                        msg = obj.message;\n                    }\n                    else if (contents && contents.length > 0) {\n                        // it may be the case that the exception is in the body message as string\n                        msg = contents;\n                    }\n                    else {\n                        msg = `Failed request: (${statusCode})`;\n                    }\n                    const err = new HttpClientError(msg, statusCode);\n                    err.result = response.result;\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }));\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nconst lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBypass = exports.getProxyUrl = void 0;\nfunction getProxyUrl(reqUrl) {\n    const usingSsl = reqUrl.protocol === 'https:';\n    if (checkBypass(reqUrl)) {\n        return undefined;\n    }\n    const proxyVar = (() => {\n        if (usingSsl) {\n            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n        }\n        else {\n            return process.env['http_proxy'] || process.env['HTTP_PROXY'];\n        }\n    })();\n    if (proxyVar) {\n        return new URL(proxyVar);\n    }\n    else {\n        return undefined;\n    }\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    const upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (const upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperReqHosts.some(x => x === upperNoProxyItem)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\n//# sourceMappingURL=proxy.js.map","/*\n\nThe MIT License (MIT)\n\nOriginal Library\n  - Copyright (c) Marak Squires\n\nAdditional functionality\n - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\nvar colors = {};\nmodule['exports'] = colors;\n\ncolors.themes = {};\n\nvar util = require('util');\nvar ansiStyles = colors.styles = require('./styles');\nvar defineProps = Object.defineProperties;\nvar newLineRegex = new RegExp(/[\\r\\n]+/g);\n\ncolors.supportsColor = require('./system/supports-colors').supportsColor;\n\nif (typeof colors.enabled === 'undefined') {\n  colors.enabled = colors.supportsColor() !== false;\n}\n\ncolors.enable = function() {\n  colors.enabled = true;\n};\n\ncolors.disable = function() {\n  colors.enabled = false;\n};\n\ncolors.stripColors = colors.strip = function(str) {\n  return ('' + str).replace(/\\x1B\\[\\d+m/g, '');\n};\n\n// eslint-disable-next-line no-unused-vars\nvar stylize = colors.stylize = function stylize(str, style) {\n  if (!colors.enabled) {\n    return str+'';\n  }\n\n  var styleMap = ansiStyles[style];\n\n  // Stylize should work for non-ANSI styles, too\n  if (!styleMap && style in colors) {\n    // Style maps like trap operate as functions on strings;\n    // they don't have properties like open or close.\n    return colors[style](str);\n  }\n\n  return styleMap.open + str + styleMap.close;\n};\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\nvar escapeStringRegexp = function(str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  return str.replace(matchOperatorsRe, '\\\\$&');\n};\n\nfunction build(_styles) {\n  var builder = function builder() {\n    return applyStyle.apply(builder, arguments);\n  };\n  builder._styles = _styles;\n  // __proto__ is used because we must return a function, but there is\n  // no way to create a function with a different prototype.\n  builder.__proto__ = proto;\n  return builder;\n}\n\nvar styles = (function() {\n  var ret = {};\n  ansiStyles.grey = ansiStyles.gray;\n  Object.keys(ansiStyles).forEach(function(key) {\n    ansiStyles[key].closeRe =\n      new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n    ret[key] = {\n      get: function() {\n        return build(this._styles.concat(key));\n      },\n    };\n  });\n  return ret;\n})();\n\nvar proto = defineProps(function colors() {}, styles);\n\nfunction applyStyle() {\n  var args = Array.prototype.slice.call(arguments);\n\n  var str = args.map(function(arg) {\n    // Use weak equality check so we can colorize null/undefined in safe mode\n    if (arg != null && arg.constructor === String) {\n      return arg;\n    } else {\n      return util.inspect(arg);\n    }\n  }).join(' ');\n\n  if (!colors.enabled || !str) {\n    return str;\n  }\n\n  var newLinesPresent = str.indexOf('\\n') != -1;\n\n  var nestedStyles = this._styles;\n\n  var i = nestedStyles.length;\n  while (i--) {\n    var code = ansiStyles[nestedStyles[i]];\n    str = code.open + str.replace(code.closeRe, code.open) + code.close;\n    if (newLinesPresent) {\n      str = str.replace(newLineRegex, function(match) {\n        return code.close + match + code.open;\n      });\n    }\n  }\n\n  return str;\n}\n\ncolors.setTheme = function(theme) {\n  if (typeof theme === 'string') {\n    console.log('colors.setTheme now only accepts an object, not a string.  ' +\n      'If you are trying to set a theme from a file, it is now your (the ' +\n      'caller\\'s) responsibility to require the file.  The old syntax ' +\n      'looked like colors.setTheme(__dirname + ' +\n      '\\'/../themes/generic-logging.js\\'); The new syntax looks like '+\n      'colors.setTheme(require(__dirname + ' +\n      '\\'/../themes/generic-logging.js\\'));');\n    return;\n  }\n  for (var style in theme) {\n    (function(style) {\n      colors[style] = function(str) {\n        if (typeof theme[style] === 'object') {\n          var out = str;\n          for (var i in theme[style]) {\n            out = colors[theme[style][i]](out);\n          }\n          return out;\n        }\n        return colors[theme[style]](str);\n      };\n    })(style);\n  }\n};\n\nfunction init() {\n  var ret = {};\n  Object.keys(styles).forEach(function(name) {\n    ret[name] = {\n      get: function() {\n        return build([name]);\n      },\n    };\n  });\n  return ret;\n}\n\nvar sequencer = function sequencer(map, str) {\n  var exploded = str.split('');\n  exploded = exploded.map(map);\n  return exploded.join('');\n};\n\n// custom formatter methods\ncolors.trap = require('./custom/trap');\ncolors.zalgo = require('./custom/zalgo');\n\n// maps\ncolors.maps = {};\ncolors.maps.america = require('./maps/america')(colors);\ncolors.maps.zebra = require('./maps/zebra')(colors);\ncolors.maps.rainbow = require('./maps/rainbow')(colors);\ncolors.maps.random = require('./maps/random')(colors);\n\nfor (var map in colors.maps) {\n  (function(map) {\n    colors[map] = function(str) {\n      return sequencer(colors.maps[map], str);\n    };\n  })(map);\n}\n\ndefineProps(colors, init());\n","module['exports'] = function runTheTrap(text, options) {\n  var result = '';\n  text = text || 'Run the trap, drop the bass';\n  text = text.split('');\n  var trap = {\n    a: ['\\u0040', '\\u0104', '\\u023a', '\\u0245', '\\u0394', '\\u039b', '\\u0414'],\n    b: ['\\u00df', '\\u0181', '\\u0243', '\\u026e', '\\u03b2', '\\u0e3f'],\n    c: ['\\u00a9', '\\u023b', '\\u03fe'],\n    d: ['\\u00d0', '\\u018a', '\\u0500', '\\u0501', '\\u0502', '\\u0503'],\n    e: ['\\u00cb', '\\u0115', '\\u018e', '\\u0258', '\\u03a3', '\\u03be', '\\u04bc',\n      '\\u0a6c'],\n    f: ['\\u04fa'],\n    g: ['\\u0262'],\n    h: ['\\u0126', '\\u0195', '\\u04a2', '\\u04ba', '\\u04c7', '\\u050a'],\n    i: ['\\u0f0f'],\n    j: ['\\u0134'],\n    k: ['\\u0138', '\\u04a0', '\\u04c3', '\\u051e'],\n    l: ['\\u0139'],\n    m: ['\\u028d', '\\u04cd', '\\u04ce', '\\u0520', '\\u0521', '\\u0d69'],\n    n: ['\\u00d1', '\\u014b', '\\u019d', '\\u0376', '\\u03a0', '\\u048a'],\n    o: ['\\u00d8', '\\u00f5', '\\u00f8', '\\u01fe', '\\u0298', '\\u047a', '\\u05dd',\n      '\\u06dd', '\\u0e4f'],\n    p: ['\\u01f7', '\\u048e'],\n    q: ['\\u09cd'],\n    r: ['\\u00ae', '\\u01a6', '\\u0210', '\\u024c', '\\u0280', '\\u042f'],\n    s: ['\\u00a7', '\\u03de', '\\u03df', '\\u03e8'],\n    t: ['\\u0141', '\\u0166', '\\u0373'],\n    u: ['\\u01b1', '\\u054d'],\n    v: ['\\u05d8'],\n    w: ['\\u0428', '\\u0460', '\\u047c', '\\u0d70'],\n    x: ['\\u04b2', '\\u04fe', '\\u04fc', '\\u04fd'],\n    y: ['\\u00a5', '\\u04b0', '\\u04cb'],\n    z: ['\\u01b5', '\\u0240'],\n  };\n  text.forEach(function(c) {\n    c = c.toLowerCase();\n    var chars = trap[c] || [' '];\n    var rand = Math.floor(Math.random() * chars.length);\n    if (typeof trap[c] !== 'undefined') {\n      result += trap[c][rand];\n    } else {\n      result += c;\n    }\n  });\n  return result;\n};\n","// please no\nmodule['exports'] = function zalgo(text, options) {\n  text = text || '   he is here   ';\n  var soul = {\n    'up': [\n      '̍', '̎', '̄', '̅',\n      '̿', '̑', '̆', '̐',\n      '͒', '͗', '͑', '̇',\n      '̈', '̊', '͂', '̓',\n      '̈', '͊', '͋', '͌',\n      '̃', '̂', '̌', '͐',\n      '̀', '́', '̋', '̏',\n      '̒', '̓', '̔', '̽',\n      '̉', 'ͣ', 'ͤ', 'ͥ',\n      'ͦ', 'ͧ', 'ͨ', 'ͩ',\n      'ͪ', 'ͫ', 'ͬ', 'ͭ',\n      'ͮ', 'ͯ', '̾', '͛',\n      '͆', '̚',\n    ],\n    'down': [\n      '̖', '̗', '̘', '̙',\n      '̜', '̝', '̞', '̟',\n      '̠', '̤', '̥', '̦',\n      '̩', '̪', '̫', '̬',\n      '̭', '̮', '̯', '̰',\n      '̱', '̲', '̳', '̹',\n      '̺', '̻', '̼', 'ͅ',\n      '͇', '͈', '͉', '͍',\n      '͎', '͓', '͔', '͕',\n      '͖', '͙', '͚', '̣',\n    ],\n    'mid': [\n      '̕', '̛', '̀', '́',\n      '͘', '̡', '̢', '̧',\n      '̨', '̴', '̵', '̶',\n      '͜', '͝', '͞',\n      '͟', '͠', '͢', '̸',\n      '̷', '͡', ' ҉',\n    ],\n  };\n  var all = [].concat(soul.up, soul.down, soul.mid);\n\n  function randomNumber(range) {\n    var r = Math.floor(Math.random() * range);\n    return r;\n  }\n\n  function isChar(character) {\n    var bool = false;\n    all.filter(function(i) {\n      bool = (i === character);\n    });\n    return bool;\n  }\n\n\n  function heComes(text, options) {\n    var result = '';\n    var counts;\n    var l;\n    options = options || {};\n    options['up'] =\n      typeof options['up'] !== 'undefined' ? options['up'] : true;\n    options['mid'] =\n      typeof options['mid'] !== 'undefined' ? options['mid'] : true;\n    options['down'] =\n      typeof options['down'] !== 'undefined' ? options['down'] : true;\n    options['size'] =\n      typeof options['size'] !== 'undefined' ? options['size'] : 'maxi';\n    text = text.split('');\n    for (l in text) {\n      if (isChar(l)) {\n        continue;\n      }\n      result = result + text[l];\n      counts = {'up': 0, 'down': 0, 'mid': 0};\n      switch (options.size) {\n        case 'mini':\n          counts.up = randomNumber(8);\n          counts.mid = randomNumber(2);\n          counts.down = randomNumber(8);\n          break;\n        case 'maxi':\n          counts.up = randomNumber(16) + 3;\n          counts.mid = randomNumber(4) + 1;\n          counts.down = randomNumber(64) + 3;\n          break;\n        default:\n          counts.up = randomNumber(8) + 1;\n          counts.mid = randomNumber(6) / 2;\n          counts.down = randomNumber(8) + 1;\n          break;\n      }\n\n      var arr = ['up', 'mid', 'down'];\n      for (var d in arr) {\n        var index = arr[d];\n        for (var i = 0; i <= counts[index]; i++) {\n          if (options[index]) {\n            result = result + soul[index][randomNumber(soul[index].length)];\n          }\n        }\n      }\n    }\n    return result;\n  }\n  // don't summon him\n  return heComes(text, options);\n};\n\n","module['exports'] = function(colors) {\n  return function(letter, i, exploded) {\n    if (letter === ' ') return letter;\n    switch (i%3) {\n      case 0: return colors.red(letter);\n      case 1: return colors.white(letter);\n      case 2: return colors.blue(letter);\n    }\n  };\n};\n","module['exports'] = function(colors) {\n  // RoY G BiV\n  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta'];\n  return function(letter, i, exploded) {\n    if (letter === ' ') {\n      return letter;\n    } else {\n      return colors[rainbowColors[i++ % rainbowColors.length]](letter);\n    }\n  };\n};\n\n","module['exports'] = function(colors) {\n  var available = ['underline', 'inverse', 'grey', 'yellow', 'red', 'green',\n    'blue', 'white', 'cyan', 'magenta', 'brightYellow', 'brightRed',\n    'brightGreen', 'brightBlue', 'brightWhite', 'brightCyan', 'brightMagenta'];\n  return function(letter, i, exploded) {\n    return letter === ' ' ? letter :\n      colors[\n          available[Math.round(Math.random() * (available.length - 2))]\n      ](letter);\n  };\n};\n","module['exports'] = function(colors) {\n  return function(letter, i, exploded) {\n    return i % 2 === 0 ? letter : colors.inverse(letter);\n  };\n};\n","/*\nThe MIT License (MIT)\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\nvar styles = {};\nmodule['exports'] = styles;\n\nvar codes = {\n  reset: [0, 0],\n\n  bold: [1, 22],\n  dim: [2, 22],\n  italic: [3, 23],\n  underline: [4, 24],\n  inverse: [7, 27],\n  hidden: [8, 28],\n  strikethrough: [9, 29],\n\n  black: [30, 39],\n  red: [31, 39],\n  green: [32, 39],\n  yellow: [33, 39],\n  blue: [34, 39],\n  magenta: [35, 39],\n  cyan: [36, 39],\n  white: [37, 39],\n  gray: [90, 39],\n  grey: [90, 39],\n\n  brightRed: [91, 39],\n  brightGreen: [92, 39],\n  brightYellow: [93, 39],\n  brightBlue: [94, 39],\n  brightMagenta: [95, 39],\n  brightCyan: [96, 39],\n  brightWhite: [97, 39],\n\n  bgBlack: [40, 49],\n  bgRed: [41, 49],\n  bgGreen: [42, 49],\n  bgYellow: [43, 49],\n  bgBlue: [44, 49],\n  bgMagenta: [45, 49],\n  bgCyan: [46, 49],\n  bgWhite: [47, 49],\n  bgGray: [100, 49],\n  bgGrey: [100, 49],\n\n  bgBrightRed: [101, 49],\n  bgBrightGreen: [102, 49],\n  bgBrightYellow: [103, 49],\n  bgBrightBlue: [104, 49],\n  bgBrightMagenta: [105, 49],\n  bgBrightCyan: [106, 49],\n  bgBrightWhite: [107, 49],\n\n  // legacy styles for colors pre v1.0.0\n  blackBG: [40, 49],\n  redBG: [41, 49],\n  greenBG: [42, 49],\n  yellowBG: [43, 49],\n  blueBG: [44, 49],\n  magentaBG: [45, 49],\n  cyanBG: [46, 49],\n  whiteBG: [47, 49],\n\n};\n\nObject.keys(codes).forEach(function(key) {\n  var val = codes[key];\n  var style = styles[key] = [];\n  style.open = '\\u001b[' + val[0] + 'm';\n  style.close = '\\u001b[' + val[1] + 'm';\n});\n","/*\nMIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n'use strict';\n\nmodule.exports = function(flag, argv) {\n  argv = argv || process.argv;\n\n  var terminatorPos = argv.indexOf('--');\n  var prefix = /^-{1,2}/.test(flag) ? '' : '--';\n  var pos = argv.indexOf(prefix + flag);\n\n  return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);\n};\n","/*\nThe MIT License (MIT)\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n'use strict';\n\nvar os = require('os');\nvar hasFlag = require('./has-flag.js');\n\nvar env = process.env;\n\nvar forceColor = void 0;\nif (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {\n  forceColor = false;\n} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true')\n           || hasFlag('color=always')) {\n  forceColor = true;\n}\nif ('FORCE_COLOR' in env) {\n  forceColor = env.FORCE_COLOR.length === 0\n    || parseInt(env.FORCE_COLOR, 10) !== 0;\n}\n\nfunction translateLevel(level) {\n  if (level === 0) {\n    return false;\n  }\n\n  return {\n    level: level,\n    hasBasic: true,\n    has256: level >= 2,\n    has16m: level >= 3,\n  };\n}\n\nfunction supportsColor(stream) {\n  if (forceColor === false) {\n    return 0;\n  }\n\n  if (hasFlag('color=16m') || hasFlag('color=full')\n      || hasFlag('color=truecolor')) {\n    return 3;\n  }\n\n  if (hasFlag('color=256')) {\n    return 2;\n  }\n\n  if (stream && !stream.isTTY && forceColor !== true) {\n    return 0;\n  }\n\n  var min = forceColor ? 1 : 0;\n\n  if (process.platform === 'win32') {\n    // Node.js 7.5.0 is the first version of Node.js to include a patch to\n    // libuv that enables 256 color output on Windows. Anything earlier and it\n    // won't work. However, here we target Node.js 8 at minimum as it is an LTS\n    // release, and Node.js 7 is not. Windows 10 build 10586 is the first\n    // Windows release that supports 256 colors. Windows 10 build 14931 is the\n    // first release that supports 16m/TrueColor.\n    var osRelease = os.release().split('.');\n    if (Number(process.versions.node.split('.')[0]) >= 8\n        && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {\n      return Number(osRelease[2]) >= 14931 ? 3 : 2;\n    }\n\n    return 1;\n  }\n\n  if ('CI' in env) {\n    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(function(sign) {\n      return sign in env;\n    }) || env.CI_NAME === 'codeship') {\n      return 1;\n    }\n\n    return min;\n  }\n\n  if ('TEAMCITY_VERSION' in env) {\n    return (/^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0\n    );\n  }\n\n  if ('TERM_PROGRAM' in env) {\n    var version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n    switch (env.TERM_PROGRAM) {\n      case 'iTerm.app':\n        return version >= 3 ? 3 : 2;\n      case 'Hyper':\n        return 3;\n      case 'Apple_Terminal':\n        return 2;\n      // No default\n    }\n  }\n\n  if (/-256(color)?$/i.test(env.TERM)) {\n    return 2;\n  }\n\n  if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n    return 1;\n  }\n\n  if ('COLORTERM' in env) {\n    return 1;\n  }\n\n  if (env.TERM === 'dumb') {\n    return min;\n  }\n\n  return min;\n}\n\nfunction getSupportLevel(stream) {\n  var level = supportsColor(stream);\n  return translateLevel(level);\n}\n\nmodule.exports = {\n  supportsColor: getSupportLevel,\n  stdout: getSupportLevel(process.stdout),\n  stderr: getSupportLevel(process.stderr),\n};\n","//\n// Remark: Requiring this file will use the \"safe\" colors API,\n// which will not touch String.prototype.\n//\n//   var colors = require('colors/safe');\n//   colors.red(\"foo\")\n//\n//\nvar colors = require('./lib/colors');\nmodule['exports'] = colors;\n","var enabled = require('enabled');\n\n/**\n * Creates a new Adapter.\n *\n * @param {Function} fn Function that returns the value.\n * @returns {Function} The adapter logic.\n * @public\n */\nmodule.exports = function create(fn) {\n  return function adapter(namespace) {\n    try {\n      return enabled(namespace, fn());\n    } catch (e) { /* Any failure means that we found nothing */ }\n\n    return false;\n  };\n}\n","var adapter = require('./');\n\n/**\n * Extracts the values from process.env.\n *\n * @type {Function}\n * @public\n */\nmodule.exports = adapter(function processenv() {\n  return process.env.DEBUG || process.env.DIAGNOSTICS;\n});\n","/**\n * Contains all configured adapters for the given environment.\n *\n * @type {Array}\n * @public\n */\nvar adapters = [];\n\n/**\n * Contains all modifier functions.\n *\n * @typs {Array}\n * @public\n */\nvar modifiers = [];\n\n/**\n * Our default logger.\n *\n * @public\n */\nvar logger = function devnull() {};\n\n/**\n * Register a new adapter that will used to find environments.\n *\n * @param {Function} adapter A function that will return the possible env.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\nfunction use(adapter) {\n  if (~adapters.indexOf(adapter)) return false;\n\n  adapters.push(adapter);\n  return true;\n}\n\n/**\n * Assign a new log method.\n *\n * @param {Function} custom The log method.\n * @public\n */\nfunction set(custom) {\n  logger = custom;\n}\n\n/**\n * Check if the namespace is allowed by any of our adapters.\n *\n * @param {String} namespace The namespace that needs to be enabled\n * @returns {Boolean|Promise} Indication if the namespace is enabled by our adapters.\n * @public\n */\nfunction enabled(namespace) {\n  var async = [];\n\n  for (var i = 0; i < adapters.length; i++) {\n    if (adapters[i].async) {\n      async.push(adapters[i]);\n      continue;\n    }\n\n    if (adapters[i](namespace)) return true;\n  }\n\n  if (!async.length) return false;\n\n  //\n  // Now that we know that we Async functions, we know we run in an ES6\n  // environment and can use all the API's that they offer, in this case\n  // we want to return a Promise so that we can `await` in React-Native\n  // for an async adapter.\n  //\n  return new Promise(function pinky(resolve) {\n    Promise.all(\n      async.map(function prebind(fn) {\n        return fn(namespace);\n      })\n    ).then(function resolved(values) {\n      resolve(values.some(Boolean));\n    });\n  });\n}\n\n/**\n * Add a new message modifier to the debugger.\n *\n * @param {Function} fn Modification function.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\nfunction modify(fn) {\n  if (~modifiers.indexOf(fn)) return false;\n\n  modifiers.push(fn);\n  return true;\n}\n\n/**\n * Write data to the supplied logger.\n *\n * @param {Object} meta Meta information about the log.\n * @param {Array} args Arguments for console.log.\n * @public\n */\nfunction write() {\n  logger.apply(logger, arguments);\n}\n\n/**\n * Process the message with the modifiers.\n *\n * @param {Mixed} message The message to be transformed by modifers.\n * @returns {String} Transformed message.\n * @public\n */\nfunction process(message) {\n  for (var i = 0; i < modifiers.length; i++) {\n    message = modifiers[i].apply(modifiers[i], arguments);\n  }\n\n  return message;\n}\n\n/**\n * Introduce options to the logger function.\n *\n * @param {Function} fn Calback function.\n * @param {Object} options Properties to introduce on fn.\n * @returns {Function} The passed function\n * @public\n */\nfunction introduce(fn, options) {\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var key in options) {\n    if (has.call(options, key)) {\n      fn[key] = options[key];\n    }\n  }\n\n  return fn;\n}\n\n/**\n * Nope, we're not allowed to write messages.\n *\n * @returns {Boolean} false\n * @public\n */\nfunction nope(options) {\n  options.enabled = false;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n\n  return introduce(function diagnopes() {\n    return false;\n  }, options);\n}\n\n/**\n * Yep, we're allowed to write debug messages.\n *\n * @param {Object} options The options for the process.\n * @returns {Function} The function that does the logging.\n * @public\n */\nfunction yep(options) {\n  /**\n   * The function that receives the actual debug information.\n   *\n   * @returns {Boolean} indication that we're logging.\n   * @public\n   */\n  function diagnostics() {\n    var args = Array.prototype.slice.call(arguments, 0);\n\n    write.call(write, options, process(args, options));\n    return true;\n  }\n\n  options.enabled = true;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n\n  return introduce(diagnostics, options);\n}\n\n/**\n * Simple helper function to introduce various of helper methods to our given\n * diagnostics function.\n *\n * @param {Function} diagnostics The diagnostics function.\n * @returns {Function} diagnostics\n * @public\n */\nmodule.exports = function create(diagnostics) {\n  diagnostics.introduce = introduce;\n  diagnostics.enabled = enabled;\n  diagnostics.process = process;\n  diagnostics.modify = modify;\n  diagnostics.write = write;\n  diagnostics.nope = nope;\n  diagnostics.yep = yep;\n  diagnostics.set = set;\n  diagnostics.use = use;\n\n  return diagnostics;\n}\n","/**\n * An idiot proof logger to be used as default. We've wrapped it in a try/catch\n * statement to ensure the environments without the `console` API do not crash\n * as well as an additional fix for ancient browsers like IE8 where the\n * `console.log` API doesn't have an `apply`, so we need to use the Function's\n * apply functionality to apply the arguments.\n *\n * @param {Object} meta Options of the logger.\n * @param {Array} messages The actuall message that needs to be logged.\n * @public\n */\nmodule.exports = function (meta, messages) {\n  //\n  // So yea. IE8 doesn't have an apply so we need a work around to puke the\n  // arguments in place.\n  //\n  try { Function.prototype.apply.call(console.log, console, messages); }\n  catch (e) {}\n}\n","var colorspace = require('colorspace');\nvar kuler = require('kuler');\n\n/**\n * Prefix the messages with a colored namespace.\n *\n * @param {Array} args The messages array that is getting written.\n * @param {Object} options Options for diagnostics.\n * @returns {Array} Altered messages array.\n * @public\n */\nmodule.exports = function ansiModifier(args, options) {\n  var namespace = options.namespace;\n  var ansi = options.colors !== false\n  ? kuler(namespace +':', colorspace(namespace))\n  : namespace +':';\n\n  args[0] = ansi +' '+ args[0];\n  return args;\n};\n","var create = require('../diagnostics');\nvar tty = require('tty').isatty(1);\n\n/**\n * Create a new diagnostics logger.\n *\n * @param {String} namespace The namespace it should enable.\n * @param {Object} options Additional options.\n * @returns {Function} The logger.\n * @public\n */\nvar diagnostics = create(function dev(namespace, options) {\n  options = options || {};\n  options.colors = 'colors' in options ? options.colors : tty;\n  options.namespace = namespace;\n  options.prod = false;\n  options.dev = true;\n\n  if (!dev.enabled(namespace) && !(options.force || dev.force)) {\n    return dev.nope(options);\n  }\n  \n  return dev.yep(options);\n});\n\n//\n// Configure the logger for the given environment.\n//\ndiagnostics.modify(require('../modifiers/namespace-ansi'));\ndiagnostics.use(require('../adapters/process.env'));\ndiagnostics.set(require('../logger/console'));\n\n//\n// Expose the diagnostics logger.\n//\nmodule.exports = diagnostics;\n","//\n// Select the correct build version depending on the environment.\n//\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./production.js');\n} else {\n  module.exports = require('./development.js');\n}\n","var create = require('../diagnostics');\n\n/**\n * Create a new diagnostics logger.\n *\n * @param {String} namespace The namespace it should enable.\n * @param {Object} options Additional options.\n * @returns {Function} The logger.\n * @public\n */\nvar diagnostics = create(function prod(namespace, options) {\n  options = options || {};\n  options.namespace = namespace;\n  options.prod = true;\n  options.dev = false;\n\n  if (!(options.force || prod.force)) return prod.nope(options);\n  return prod.yep(options);\n});\n\n//\n// Expose the diagnostics logger.\n//\nmodule.exports = diagnostics;\n","\"use strict\";\n\nvar rawAsap = require(\"./raw\");\nvar freeTasks = [];\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with\n * priority over IO events. An exception thrown in a task can be handled by\n * `process.on(\"uncaughtException\") or `domain.on(\"error\")`, but will otherwise\n * crash the process. If the error is handled, all subsequent tasks will\n * resume.\n *\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawTask.domain = process.domain;\n    rawAsap(rawTask);\n}\n\nfunction RawTask() {\n    this.task = null;\n    this.domain = null;\n}\n\nRawTask.prototype.call = function () {\n    if (this.domain) {\n        this.domain.enter();\n    }\n    var threw = true;\n    try {\n        this.task.call();\n        threw = false;\n        // If the task throws an exception (presumably) Node.js restores the\n        // domain stack for the next event.\n        if (this.domain) {\n            this.domain.exit();\n        }\n    } finally {\n        // We use try/finally and a threw flag to avoid messing up stack traces\n        // when we catch and release errors.\n        if (threw) {\n            // In Node.js, uncaught exceptions are considered fatal errors.\n            // Re-throw them to interrupt flushing!\n            // Ensure that flushing continues if an uncaught exception is\n            // suppressed listening process.on(\"uncaughtException\") or\n            // domain.on(\"error\").\n            rawAsap.requestFlush();\n        }\n        // If the task threw an error, we do not want to exit the domain here.\n        // Exiting the domain would prevent the domain from catching the error.\n        this.task = null;\n        this.domain = null;\n        freeTasks.push(this);\n    }\n};\n\n","\"use strict\";\n\nvar domain; // The domain module is executed on demand\nvar hasSetImmediate = typeof setImmediate === \"function\";\n\n// Use the fastest means possible to execute a task in its own turn, with\n// priority over other events including network IO events in Node.js.\n//\n// An exception thrown by a task will permanently interrupt the processing of\n// subsequent tasks. The higher level `asap` function ensures that if an\n// exception is thrown by a task, that the task queue will continue flushing as\n// soon as possible, but if you use `rawAsap` directly, you are responsible to\n// either ensure that no exceptions are thrown from your task, or to manually\n// call `rawAsap.requestFlush` if an exception is thrown.\nmodule.exports = rawAsap;\nfunction rawAsap(task) {\n    if (!queue.length) {\n        requestFlush();\n        flushing = true;\n    }\n    // Avoids a function call\n    queue[queue.length] = task;\n}\n\nvar queue = [];\n// Once a flush has been requested, no further calls to `requestFlush` are\n// necessary until the next `flush` completes.\nvar flushing = false;\n// The position of the next task to execute in the task queue. This is\n// preserved between calls to `flush` so that it can be resumed if\n// a task throws an exception.\nvar index = 0;\n// If a task schedules additional tasks recursively, the task queue can grow\n// unbounded. To prevent memory excaustion, the task queue will periodically\n// truncate already-completed tasks.\nvar capacity = 1024;\n\n// The flush function processes all tasks that have been scheduled with\n// `rawAsap` unless and until one of those tasks throws an exception.\n// If a task throws an exception, `flush` ensures that its state will remain\n// consistent and will resume where it left off when called again.\n// However, `flush` does not make any arrangements to be called again if an\n// exception is thrown.\nfunction flush() {\n    while (index < queue.length) {\n        var currentIndex = index;\n        // Advance the index before calling the task. This ensures that we will\n        // begin flushing on the next task the task throws an error.\n        index = index + 1;\n        queue[currentIndex].call();\n        // Prevent leaking memory for long chains of recursive calls to `asap`.\n        // If we call `asap` within tasks scheduled by `asap`, the queue will\n        // grow, but to avoid an O(n) walk for every task we execute, we don't\n        // shift tasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 tasks off the queue.\n        if (index > capacity) {\n            // Manually shift all values starting at the index back to the\n            // beginning of the queue.\n            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n                queue[scan] = queue[scan + index];\n            }\n            queue.length -= index;\n            index = 0;\n        }\n    }\n    queue.length = 0;\n    index = 0;\n    flushing = false;\n}\n\nrawAsap.requestFlush = requestFlush;\nfunction requestFlush() {\n    // Ensure flushing is not bound to any domain.\n    // It is not sufficient to exit the domain, because domains exist on a stack.\n    // To execute code outside of any domain, the following dance is necessary.\n    var parentDomain = process.domain;\n    if (parentDomain) {\n        if (!domain) {\n            // Lazy execute the domain module.\n            // Only employed if the user elects to use domains.\n            domain = require(\"domain\");\n        }\n        domain.active = process.domain = null;\n    }\n\n    // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`\n    // cannot handle recursion.\n    // `requestFlush` will only be called recursively from `asap.js`, to resume\n    // flushing after an error is thrown into a domain.\n    // Conveniently, `setImmediate` was introduced in the same version\n    // `process.nextTick` started throwing recursion errors.\n    if (flushing && hasSetImmediate) {\n        setImmediate(flush);\n    } else {\n        process.nextTick(flush);\n    }\n\n    if (parentDomain) {\n        domain.active = process.domain = parentDomain;\n    }\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = asyncify;\n\nvar _initialParams = require('./internal/initialParams.js');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _setImmediate = require('./internal/setImmediate.js');\n\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if ((0, _wrapAsync.isAsync)(func)) {\n        return function (...args /*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback);\n        };\n    }\n\n    return (0, _initialParams2.default)(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback);\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        (0, _setImmediate2.default)(e => {\n            throw e;\n        }, err);\n    }\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _isArrayLike = require('./internal/isArrayLike.js');\n\nvar _isArrayLike2 = _interopRequireDefault(_isArrayLike);\n\nvar _breakLoop = require('./internal/breakLoop.js');\n\nvar _breakLoop2 = _interopRequireDefault(_breakLoop);\n\nvar _eachOfLimit = require('./eachOfLimit.js');\n\nvar _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);\n\nvar _once = require('./internal/once.js');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _onlyOnce = require('./internal/onlyOnce.js');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = (0, _once2.default)(callback);\n    var index = 0,\n        completed = 0,\n        { length } = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return;\n        if (err) {\n            callback(err);\n        } else if (++completed === length || value === _breakLoop2.default) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric(coll, iteratee, callback) {\n    return (0, _eachOfLimit2.default)(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);\n}\n\nexports.default = (0, _awaitify2.default)(eachOf, 3);\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _eachOfLimit2 = require('./internal/eachOfLimit.js');\n\nvar _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n  return (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);\n}\n\nexports.default = (0, _awaitify2.default)(eachOfLimit, 4);\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _eachOfLimit = require('./eachOfLimit.js');\n\nvar _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n  return (0, _eachOfLimit2.default)(coll, 1, iteratee, callback);\n}\nexports.default = (0, _awaitify2.default)(eachOfSeries, 3);\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _eachOf = require('./eachOf.js');\n\nvar _eachOf2 = _interopRequireDefault(_eachOf);\n\nvar _withoutIndex = require('./internal/withoutIndex.js');\n\nvar _withoutIndex2 = _interopRequireDefault(_withoutIndex);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n  return (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);\n}\n\nexports.default = (0, _awaitify2.default)(eachLimit, 3);\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = asyncEachOfLimit;\n\nvar _breakLoop = require('./breakLoop.js');\n\nvar _breakLoop2 = _interopRequireDefault(_breakLoop);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return;\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({ value, done: iterDone }) => {\n            //console.log('got value', value)\n            if (canceled || done) return;\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return;\n        if (err) return handleError(err);\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return;\n        }\n\n        if (result === _breakLoop2.default || done && running <= 0) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return;\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = awaitify;\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify(asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined');\n    function awaitable(...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args);\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err);\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        });\n    }\n\n    return awaitable;\n}\nmodule.exports = exports['default'];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\nexports.default = breakLoop;\nmodule.exports = exports[\"default\"];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _once = require('./once.js');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _iterator = require('./iterator.js');\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _onlyOnce = require('./onlyOnce.js');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _wrapAsync = require('./wrapAsync.js');\n\nvar _asyncEachOfLimit = require('./asyncEachOfLimit.js');\n\nvar _asyncEachOfLimit2 = _interopRequireDefault(_asyncEachOfLimit);\n\nvar _breakLoop = require('./breakLoop.js');\n\nvar _breakLoop2 = _interopRequireDefault(_breakLoop);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = limit => {\n    return (obj, iteratee, callback) => {\n        callback = (0, _once2.default)(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1');\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if ((0, _wrapAsync.isAsyncGenerator)(obj)) {\n            return (0, _asyncEachOfLimit2.default)(obj, limit, iteratee, callback);\n        }\n        if ((0, _wrapAsync.isAsyncIterable)(obj)) {\n            return (0, _asyncEachOfLimit2.default)(obj[Symbol.asyncIterator](), limit, iteratee, callback);\n        }\n        var nextElem = (0, _iterator2.default)(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return;\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            } else if (err === false) {\n                done = true;\n                canceled = true;\n            } else if (value === _breakLoop2.default || done && running <= 0) {\n                done = true;\n                return callback(null);\n            } else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish() {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\nmodule.exports = exports['default'];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n};\n\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (fn) {\n    return function (...args /*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n};\n\nmodule.exports = exports[\"default\"];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = isArrayLike;\nfunction isArrayLike(value) {\n    return value && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createIterator;\n\nvar _isArrayLike = require('./isArrayLike.js');\n\nvar _isArrayLike2 = _interopRequireDefault(_isArrayLike);\n\nvar _getIterator = require('./getIterator.js');\n\nvar _getIterator2 = _interopRequireDefault(_getIterator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? { value: coll[i], key: i } : null;\n    };\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done) return null;\n        i++;\n        return { value: item.value, key: i };\n    };\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? { value: obj[key], key } : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if ((0, _isArrayLike2.default)(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = (0, _getIterator2.default)(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\nmodule.exports = exports['default'];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = once;\nfunction once(fn) {\n    function wrapper(...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper;\n}\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = onlyOnce;\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\nmodule.exports = exports[\"default\"];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _isArrayLike = require('./isArrayLike.js');\n\nvar _isArrayLike2 = _interopRequireDefault(_isArrayLike);\n\nvar _wrapAsync = require('./wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _awaitify2.default)((eachfn, tasks, callback) => {\n    var results = (0, _isArrayLike2.default)(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        (0, _wrapAsync2.default)(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.fallback = fallback;\nexports.wrap = wrap;\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = exports.hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nexports.default = wrap(_defer);","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _withoutIndex;\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\nmodule.exports = exports[\"default\"];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.isAsyncIterable = exports.isAsyncGenerator = exports.isAsync = undefined;\n\nvar _asyncify = require('../asyncify.js');\n\nvar _asyncify2 = _interopRequireDefault(_asyncify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function');\n    return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;\n}\n\nexports.default = wrapAsync;\nexports.isAsync = isAsync;\nexports.isAsyncGenerator = isAsyncGenerator;\nexports.isAsyncIterable = isAsyncIterable;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = series;\n\nvar _parallel2 = require('./internal/parallel.js');\n\nvar _parallel3 = _interopRequireDefault(_parallel2);\n\nvar _eachOfSeries = require('./eachOfSeries.js');\n\nvar _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n  return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);\n}\nmodule.exports = exports['default'];","module.exports =\n{\n  parallel      : require('./parallel.js'),\n  serial        : require('./serial.js'),\n  serialOrdered : require('./serialOrdered.js')\n};\n","// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state)\n{\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key)\n{\n  if (typeof this.jobs[key] == 'function')\n  {\n    this.jobs[key]();\n  }\n}\n","var defer = require('./defer.js');\n\n// API\nmodule.exports = async;\n\n/**\n * Runs provided callback asynchronously\n * even if callback itself is not\n *\n * @param   {function} callback - callback to invoke\n * @returns {function} - augmented callback\n */\nfunction async(callback)\n{\n  var isAsync = false;\n\n  // check if async happened\n  defer(function() { isAsync = true; });\n\n  return function async_callback(err, result)\n  {\n    if (isAsync)\n    {\n      callback(err, result);\n    }\n    else\n    {\n      defer(function nextTick_callback()\n      {\n        callback(err, result);\n      });\n    }\n  };\n}\n","module.exports = defer;\n\n/**\n * Runs provided function on next iteration of the event loop\n *\n * @param {function} fn - function to run\n */\nfunction defer(fn)\n{\n  var nextTick = typeof setImmediate == 'function'\n    ? setImmediate\n    : (\n      typeof process == 'object' && typeof process.nextTick == 'function'\n      ? process.nextTick\n      : null\n    );\n\n  if (nextTick)\n  {\n    nextTick(fn);\n  }\n  else\n  {\n    setTimeout(fn, 0);\n  }\n}\n","var async = require('./async.js')\n  , abort = require('./abort.js')\n  ;\n\n// API\nmodule.exports = iterate;\n\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\nfunction iterate(list, iterator, state, callback)\n{\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n\n  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)\n  {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs))\n    {\n      return;\n    }\n\n    // clean up jobs\n    delete state.jobs[key];\n\n    if (error)\n    {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    }\n    else\n    {\n      state.results[key] = output;\n    }\n\n    // return salvaged results\n    callback(error, state.results);\n  });\n}\n\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\nfunction runJob(iterator, key, item, callback)\n{\n  var aborter;\n\n  // allow shortcut if iterator expects only two arguments\n  if (iterator.length == 2)\n  {\n    aborter = iterator(item, async(callback));\n  }\n  // otherwise go with full three arguments\n  else\n  {\n    aborter = iterator(item, key, async(callback));\n  }\n\n  return aborter;\n}\n","// API\nmodule.exports = state;\n\n/**\n * Creates initial state object\n * for iteration over list\n *\n * @param   {array|object} list - list to iterate over\n * @param   {function|null} sortMethod - function to use for keys sort,\n *                                     or `null` to keep them as is\n * @returns {object} - initial state object\n */\nfunction state(list, sortMethod)\n{\n  var isNamedList = !Array.isArray(list)\n    , initState =\n    {\n      index    : 0,\n      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,\n      jobs     : {},\n      results  : isNamedList ? {} : [],\n      size     : isNamedList ? Object.keys(list).length : list.length\n    }\n    ;\n\n  if (sortMethod)\n  {\n    // sort array keys based on it's values\n    // sort object's keys just on own merit\n    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)\n    {\n      return sortMethod(list[a], list[b]);\n    });\n  }\n\n  return initState;\n}\n","var abort = require('./abort.js')\n  , async = require('./async.js')\n  ;\n\n// API\nmodule.exports = terminator;\n\n/**\n * Terminates jobs in the attached state context\n *\n * @this  AsyncKitState#\n * @param {function} callback - final callback to invoke after termination\n */\nfunction terminator(callback)\n{\n  if (!Object.keys(this.jobs).length)\n  {\n    return;\n  }\n\n  // fast forward iteration index\n  this.index = this.size;\n\n  // abort jobs\n  abort(this);\n\n  // send back results we have so far\n  async(callback)(null, this.results);\n}\n","var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n","var serialOrdered = require('./serialOrdered.js');\n\n// Public API\nmodule.exports = serial;\n\n/**\n * Runs iterator over provided array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serial(list, iterator, callback)\n{\n  return serialOrdered(list, iterator, null, callback);\n}\n","var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = serialOrdered;\n// sorting helpers\nmodule.exports.ascending  = ascending;\nmodule.exports.descending = descending;\n\n/**\n * Runs iterator over provided sorted array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} sortMethod - custom sort function\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serialOrdered(list, iterator, sortMethod, callback)\n{\n  var state = initState(list, sortMethod);\n\n  iterate(list, iterator, state, function iteratorHandler(error, result)\n  {\n    if (error)\n    {\n      callback(error, result);\n      return;\n    }\n\n    state.index++;\n\n    // are we there yet?\n    if (state.index < (state['keyedList'] || list).length)\n    {\n      iterate(list, iterator, state, iteratorHandler);\n      return;\n    }\n\n    // done here\n    callback(null, state.results);\n  });\n\n  return terminator.bind(state, callback);\n}\n\n/*\n * -- Sort methods\n */\n\n/**\n * sort helper to sort array elements in ascending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction ascending(a, b)\n{\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * sort helper to sort array elements in descending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction descending(a, b)\n{\n  return -1 * ascending(a, b);\n}\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('./');\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n","'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = $reflectApply(bind, $call, arguments);\n\tif ($gOPD && $defineProperty) {\n\t\tvar desc = $gOPD(func, 'length');\n\t\tif (desc.configurable) {\n\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t$defineProperty(\n\t\t\t\tfunc,\n\t\t\t\t'length',\n\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t);\n\t\t}\n\t}\n\treturn func;\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\nvar hasOwnProperty = Object.hasOwnProperty;\n\nvar reverseNames = Object.create(null);\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (hasOwnProperty.call(colorNames, name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n\tvar keyword = /^(\\w+)$/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\tif (match[5]) {\n\t\t\t\trgb[3] = parseFloat(match[4]) * 0.01;\n\t\t\t} else {\n\t\t\t\trgb[3] = parseFloat(match[4]);\n\t\t\t}\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\tif (match[5]) {\n\t\t\t\trgb[3] = parseFloat(match[4]) * 0.01;\n\t\t\t} else {\n\t\t\t\trgb[3] = parseFloat(match[4]);\n\t\t\t}\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\tif (!hasOwnProperty.call(colorNames, match[1])) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d{0,3}\\.)?\\d+)(?:deg)?\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*(?:[,|\\/]\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = Math.round(num).toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (obj == null) { // eslint-disable-line no-eq-null,eqeqeq\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tif (!mixinColor || !mixinColor.rgb) {\n\t\t\tthrow new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n\t\t}\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","'use strict';\n\nvar color = require('color')\n  , hex = require('text-hex');\n\n/**\n * Generate a color for a given name. But be reasonably smart about it by\n * understanding name spaces and coloring each namespace a bit lighter so they\n * still have the same base color as the root.\n *\n * @param {string} namespace The namespace\n * @param {string} [delimiter] The delimiter\n * @returns {string} color\n */\nmodule.exports = function colorspace(namespace, delimiter) {\n  var split = namespace.split(delimiter || ':');\n  var base = hex(split[0]);\n\n  if (!split.length) return base;\n\n  for (var i = 0, l = split.length - 1; i < l; i++) {\n    base = color(base)\n    .mix(color(hex(split[i + 1])))\n    .saturate(1)\n    .hex();\n  }\n\n  return base;\n};\n","var util = require('util');\nvar Stream = require('stream').Stream;\nvar DelayedStream = require('delayed-stream');\n\nmodule.exports = CombinedStream;\nfunction CombinedStream() {\n  this.writable = false;\n  this.readable = true;\n  this.dataSize = 0;\n  this.maxDataSize = 2 * 1024 * 1024;\n  this.pauseStreams = true;\n\n  this._released = false;\n  this._streams = [];\n  this._currentStream = null;\n  this._insideLoop = false;\n  this._pendingNext = false;\n}\nutil.inherits(CombinedStream, Stream);\n\nCombinedStream.create = function(options) {\n  var combinedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    combinedStream[option] = options[option];\n  }\n\n  return combinedStream;\n};\n\nCombinedStream.isStreamLike = function(stream) {\n  return (typeof stream !== 'function')\n    && (typeof stream !== 'string')\n    && (typeof stream !== 'boolean')\n    && (typeof stream !== 'number')\n    && (!Buffer.isBuffer(stream));\n};\n\nCombinedStream.prototype.append = function(stream) {\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n  if (isStreamLike) {\n    if (!(stream instanceof DelayedStream)) {\n      var newStream = DelayedStream.create(stream, {\n        maxDataSize: Infinity,\n        pauseStream: this.pauseStreams,\n      });\n      stream.on('data', this._checkDataSize.bind(this));\n      stream = newStream;\n    }\n\n    this._handleErrors(stream);\n\n    if (this.pauseStreams) {\n      stream.pause();\n    }\n  }\n\n  this._streams.push(stream);\n  return this;\n};\n\nCombinedStream.prototype.pipe = function(dest, options) {\n  Stream.prototype.pipe.call(this, dest, options);\n  this.resume();\n  return dest;\n};\n\nCombinedStream.prototype._getNext = function() {\n  this._currentStream = null;\n\n  if (this._insideLoop) {\n    this._pendingNext = true;\n    return; // defer call\n  }\n\n  this._insideLoop = true;\n  try {\n    do {\n      this._pendingNext = false;\n      this._realGetNext();\n    } while (this._pendingNext);\n  } finally {\n    this._insideLoop = false;\n  }\n};\n\nCombinedStream.prototype._realGetNext = function() {\n  var stream = this._streams.shift();\n\n\n  if (typeof stream == 'undefined') {\n    this.end();\n    return;\n  }\n\n  if (typeof stream !== 'function') {\n    this._pipeNext(stream);\n    return;\n  }\n\n  var getStream = stream;\n  getStream(function(stream) {\n    var isStreamLike = CombinedStream.isStreamLike(stream);\n    if (isStreamLike) {\n      stream.on('data', this._checkDataSize.bind(this));\n      this._handleErrors(stream);\n    }\n\n    this._pipeNext(stream);\n  }.bind(this));\n};\n\nCombinedStream.prototype._pipeNext = function(stream) {\n  this._currentStream = stream;\n\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    stream.on('end', this._getNext.bind(this));\n    stream.pipe(this, {end: false});\n    return;\n  }\n\n  var value = stream;\n  this.write(value);\n  this._getNext();\n};\n\nCombinedStream.prototype._handleErrors = function(stream) {\n  var self = this;\n  stream.on('error', function(err) {\n    self._emitError(err);\n  });\n};\n\nCombinedStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nCombinedStream.prototype.pause = function() {\n  if (!this.pauseStreams) {\n    return;\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\n  this.emit('pause');\n};\n\nCombinedStream.prototype.resume = function() {\n  if (!this._released) {\n    this._released = true;\n    this.writable = true;\n    this._getNext();\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\n  this.emit('resume');\n};\n\nCombinedStream.prototype.end = function() {\n  this._reset();\n  this.emit('end');\n};\n\nCombinedStream.prototype.destroy = function() {\n  this._reset();\n  this.emit('close');\n};\n\nCombinedStream.prototype._reset = function() {\n  this.writable = false;\n  this._streams = [];\n  this._currentStream = null;\n};\n\nCombinedStream.prototype._checkDataSize = function() {\n  this._updateDataSize();\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n  this._emitError(new Error(message));\n};\n\nCombinedStream.prototype._updateDataSize = function() {\n  this.dataSize = 0;\n\n  var self = this;\n  this._streams.forEach(function(stream) {\n    if (!stream.dataSize) {\n      return;\n    }\n\n    self.dataSize += stream.dataSize;\n  });\n\n  if (this._currentStream && this._currentStream.dataSize) {\n    this.dataSize += this._currentStream.dataSize;\n  }\n};\n\nCombinedStream.prototype._emitError = function(err) {\n  this._reset();\n  this.emit('error', err);\n};\n","/* jshint node: true */\n(function () {\n    \"use strict\";\n\n    function CookieAccessInfo(domain, path, secure, script) {\n        if (this instanceof CookieAccessInfo) {\n            this.domain = domain || undefined;\n            this.path = path || \"/\";\n            this.secure = !!secure;\n            this.script = !!script;\n            return this;\n        }\n        return new CookieAccessInfo(domain, path, secure, script);\n    }\n    CookieAccessInfo.All = Object.freeze(Object.create(null));\n    exports.CookieAccessInfo = CookieAccessInfo;\n\n    function Cookie(cookiestr, request_domain, request_path) {\n        if (cookiestr instanceof Cookie) {\n            return cookiestr;\n        }\n        if (this instanceof Cookie) {\n            this.name = null;\n            this.value = null;\n            this.expiration_date = Infinity;\n            this.path = String(request_path || \"/\");\n            this.explicit_path = false;\n            this.domain = request_domain || null;\n            this.explicit_domain = false;\n            this.secure = false; //how to define default?\n            this.noscript = false; //httponly\n            if (cookiestr) {\n                this.parse(cookiestr, request_domain, request_path);\n            }\n            return this;\n        }\n        return new Cookie(cookiestr, request_domain, request_path);\n    }\n    exports.Cookie = Cookie;\n\n    Cookie.prototype.toString = function toString() {\n        var str = [this.name + \"=\" + this.value];\n        if (this.expiration_date !== Infinity) {\n            str.push(\"expires=\" + (new Date(this.expiration_date)).toGMTString());\n        }\n        if (this.domain) {\n            str.push(\"domain=\" + this.domain);\n        }\n        if (this.path) {\n            str.push(\"path=\" + this.path);\n        }\n        if (this.secure) {\n            str.push(\"secure\");\n        }\n        if (this.noscript) {\n            str.push(\"httponly\");\n        }\n        return str.join(\"; \");\n    };\n\n    Cookie.prototype.toValueString = function toValueString() {\n        return this.name + \"=\" + this.value;\n    };\n\n    var cookie_str_splitter = /[:](?=\\s*[a-zA-Z0-9_\\-]+\\s*[=])/g;\n    Cookie.prototype.parse = function parse(str, request_domain, request_path) {\n        if (this instanceof Cookie) {\n            if ( str.length > 32768 ) {\n                console.warn(\"Cookie too long for parsing (>32768 characters)\");\n                return;\n            }\n    \n            var parts = str.split(\";\").filter(function (value) {\n                    return !!value;\n                });\n            var i;\n\n            var pair = parts[0].match(/([^=]+)=([\\s\\S]*)/);\n            if (!pair) {\n                console.warn(\"Invalid cookie header encountered. Header: '\"+str+\"'\");\n                return;\n            }\n\n            var key = pair[1];\n            var value = pair[2];\n            if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {\n                console.warn(\"Unable to extract values from cookie header. Cookie: '\"+str+\"'\");\n                return;\n            }\n\n            this.name = key;\n            this.value = value;\n\n            for (i = 1; i < parts.length; i += 1) {\n                pair = parts[i].match(/([^=]+)(?:=([\\s\\S]*))?/);\n                key = pair[1].trim().toLowerCase();\n                value = pair[2];\n                switch (key) {\n                case \"httponly\":\n                    this.noscript = true;\n                    break;\n                case \"expires\":\n                    this.expiration_date = value ?\n                            Number(Date.parse(value)) :\n                            Infinity;\n                    break;\n                case \"path\":\n                    this.path = value ?\n                            value.trim() :\n                            \"\";\n                    this.explicit_path = true;\n                    break;\n                case \"domain\":\n                    this.domain = value ?\n                            value.trim() :\n                            \"\";\n                    this.explicit_domain = !!this.domain;\n                    break;\n                case \"secure\":\n                    this.secure = true;\n                    break;\n                }\n            }\n\n            if (!this.explicit_path) {\n               this.path = request_path || \"/\";\n            }\n            if (!this.explicit_domain) {\n               this.domain = request_domain;\n            }\n\n            return this;\n        }\n        return new Cookie().parse(str, request_domain, request_path);\n    };\n\n    Cookie.prototype.matches = function matches(access_info) {\n        if (access_info === CookieAccessInfo.All) {\n          return true;\n        }\n        if (this.noscript && access_info.script ||\n                this.secure && !access_info.secure ||\n                !this.collidesWith(access_info)) {\n            return false;\n        }\n        return true;\n    };\n\n    Cookie.prototype.collidesWith = function collidesWith(access_info) {\n        if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {\n            return false;\n        }\n        if (this.path && access_info.path.indexOf(this.path) !== 0) {\n            return false;\n        }\n        if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {\n           return false;\n        }\n        var access_domain = access_info.domain && access_info.domain.replace(/^[\\.]/,'');\n        var cookie_domain = this.domain && this.domain.replace(/^[\\.]/,'');\n        if (cookie_domain === access_domain) {\n            return true;\n        }\n        if (cookie_domain) {\n            if (!this.explicit_domain) {\n                return false; // we already checked if the domains were exactly the same\n            }\n            var wildcard = access_domain.indexOf(cookie_domain);\n            if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {\n                return false;\n            }\n            return true;\n        }\n        return true;\n    };\n\n    function CookieJar() {\n        var cookies, cookies_list, collidable_cookie;\n        if (this instanceof CookieJar) {\n            cookies = Object.create(null); //name: [Cookie]\n\n            this.setCookie = function setCookie(cookie, request_domain, request_path) {\n                var remove, i;\n                cookie = new Cookie(cookie, request_domain, request_path);\n                //Delete the cookie if the set is past the current time\n                remove = cookie.expiration_date <= Date.now();\n                if (cookies[cookie.name] !== undefined) {\n                    cookies_list = cookies[cookie.name];\n                    for (i = 0; i < cookies_list.length; i += 1) {\n                        collidable_cookie = cookies_list[i];\n                        if (collidable_cookie.collidesWith(cookie)) {\n                            if (remove) {\n                                cookies_list.splice(i, 1);\n                                if (cookies_list.length === 0) {\n                                    delete cookies[cookie.name];\n                                }\n                                return false;\n                            }\n                            cookies_list[i] = cookie;\n                            return cookie;\n                        }\n                    }\n                    if (remove) {\n                        return false;\n                    }\n                    cookies_list.push(cookie);\n                    return cookie;\n                }\n                if (remove) {\n                    return false;\n                }\n                cookies[cookie.name] = [cookie];\n                return cookies[cookie.name];\n            };\n            //returns a cookie\n            this.getCookie = function getCookie(cookie_name, access_info) {\n                var cookie, i;\n                cookies_list = cookies[cookie_name];\n                if (!cookies_list) {\n                    return;\n                }\n                for (i = 0; i < cookies_list.length; i += 1) {\n                    cookie = cookies_list[i];\n                    if (cookie.expiration_date <= Date.now()) {\n                        if (cookies_list.length === 0) {\n                            delete cookies[cookie.name];\n                        }\n                        continue;\n                    }\n\n                    if (cookie.matches(access_info)) {\n                        return cookie;\n                    }\n                }\n            };\n            //returns a list of cookies\n            this.getCookies = function getCookies(access_info) {\n                var matches = [], cookie_name, cookie;\n                for (cookie_name in cookies) {\n                    cookie = this.getCookie(cookie_name, access_info);\n                    if (cookie) {\n                        matches.push(cookie);\n                    }\n                }\n                matches.toString = function toString() {\n                    return matches.join(\":\");\n                };\n                matches.toValueString = function toValueString() {\n                    return matches.map(function (c) {\n                        return c.toValueString();\n                    }).join('; ');\n                };\n                return matches;\n            };\n\n            return this;\n        }\n        return new CookieJar();\n    }\n    exports.CookieJar = CookieJar;\n\n    //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.\n    CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {\n        cookies = Array.isArray(cookies) ?\n                cookies :\n                cookies.split(cookie_str_splitter);\n        var successful = [],\n            i,\n            cookie;\n        cookies = cookies.map(function(item){\n            return new Cookie(item, request_domain, request_path);\n        });\n        for (i = 0; i < cookies.length; i += 1) {\n            cookie = cookies[i];\n            if (this.setCookie(cookie, request_domain, request_path)) {\n                successful.push(cookie);\n            }\n        }\n        return successful;\n    };\n}());\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n","/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n","var Stream = require('stream').Stream;\nvar util = require('util');\n\nmodule.exports = DelayedStream;\nfunction DelayedStream() {\n  this.source = null;\n  this.dataSize = 0;\n  this.maxDataSize = 1024 * 1024;\n  this.pauseStream = true;\n\n  this._maxDataSizeExceeded = false;\n  this._released = false;\n  this._bufferedEvents = [];\n}\nutil.inherits(DelayedStream, Stream);\n\nDelayedStream.create = function(source, options) {\n  var delayedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    delayedStream[option] = options[option];\n  }\n\n  delayedStream.source = source;\n\n  var realEmit = source.emit;\n  source.emit = function() {\n    delayedStream._handleEmit(arguments);\n    return realEmit.apply(source, arguments);\n  };\n\n  source.on('error', function() {});\n  if (delayedStream.pauseStream) {\n    source.pause();\n  }\n\n  return delayedStream;\n};\n\nObject.defineProperty(DelayedStream.prototype, 'readable', {\n  configurable: true,\n  enumerable: true,\n  get: function() {\n    return this.source.readable;\n  }\n});\n\nDelayedStream.prototype.setEncoding = function() {\n  return this.source.setEncoding.apply(this.source, arguments);\n};\n\nDelayedStream.prototype.resume = function() {\n  if (!this._released) {\n    this.release();\n  }\n\n  this.source.resume();\n};\n\nDelayedStream.prototype.pause = function() {\n  this.source.pause();\n};\n\nDelayedStream.prototype.release = function() {\n  this._released = true;\n\n  this._bufferedEvents.forEach(function(args) {\n    this.emit.apply(this, args);\n  }.bind(this));\n  this._bufferedEvents = [];\n};\n\nDelayedStream.prototype.pipe = function() {\n  var r = Stream.prototype.pipe.apply(this, arguments);\n  this.resume();\n  return r;\n};\n\nDelayedStream.prototype._handleEmit = function(args) {\n  if (this._released) {\n    this.emit.apply(this, args);\n    return;\n  }\n\n  if (args[0] === 'data') {\n    this.dataSize += args[1].length;\n    this._checkIfMaxDataSizeExceeded();\n  }\n\n  this._bufferedEvents.push(args);\n};\n\nDelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {\n  if (this._maxDataSizeExceeded) {\n    return;\n  }\n\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  this._maxDataSizeExceeded = true;\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n  this.emit('error', new Error(message));\n};\n","var wrappy = require('wrappy')\nmodule.exports = wrappy(dezalgo)\n\nvar asap = require('asap')\n\nfunction dezalgo (cb) {\n  var sync = true\n  asap(function () {\n    sync = false\n  })\n\n  return function zalgoSafe() {\n    var args = arguments\n    var me = this\n    if (sync)\n      asap(function() {\n        cb.apply(me, args)\n      })\n    else\n      cb.apply(me, args)\n  }\n}\n","'use strict';\n\n/**\n * Checks if a given namespace is allowed by the given variable.\n *\n * @param {String} name namespace that should be included.\n * @param {String} variable Value that needs to be tested.\n * @returns {Boolean} Indication if namespace is enabled.\n * @public\n */\nmodule.exports = function enabled(name, variable) {\n  if (!variable) return false;\n\n  var variables = variable.split(/[\\s,]+/)\n    , i = 0;\n\n  for (; i < variables.length; i++) {\n    variable = variables[i].replace('*', '.*?');\n\n    if ('-' === variable.charAt(0)) {\n      if ((new RegExp('^'+ variable.substr(1) +'$')).test(name)) {\n        return false;\n      }\n\n      continue;\n    }\n\n    if ((new RegExp('^'+ variable +'$')).test(name)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n","module.exports = stringify\nstringify.default = stringify\nstringify.stable = deterministicStringify\nstringify.stableStringify = deterministicStringify\n\nvar LIMIT_REPLACE_NODE = '[...]'\nvar CIRCULAR_REPLACE_NODE = '[Circular]'\n\nvar arr = []\nvar replacerStack = []\n\nfunction defaultOptions () {\n  return {\n    depthLimit: Number.MAX_SAFE_INTEGER,\n    edgesLimit: Number.MAX_SAFE_INTEGER\n  }\n}\n\n// Regular stringify\nfunction stringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  decirc(obj, '', 0, [], undefined, 0, options)\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(obj, replacer, spacer)\n    } else {\n      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction setReplace (replace, val, k, parent) {\n  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n  if (propertyDescriptor.get !== undefined) {\n    if (propertyDescriptor.configurable) {\n      Object.defineProperty(parent, k, { value: replace })\n      arr.push([parent, k, val, propertyDescriptor])\n    } else {\n      replacerStack.push([val, k, replace])\n    }\n  } else {\n    parent[k] = replace\n    arr.push([parent, k, val])\n  }\n}\n\nfunction decirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      var keys = Object.keys(val)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        decirc(val[key], key, i, stack, val, depth, options)\n      }\n    }\n    stack.pop()\n  }\n}\n\n// Stable-stringify\nfunction compareFunction (a, b) {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\nfunction deterministicStringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(tmp, replacer, spacer)\n    } else {\n      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    // Ensure that we restore the object as it was.\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction deterministicDecirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n    try {\n      if (typeof val.toJSON === 'function') {\n        return\n      }\n    } catch (_) {\n      return\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {}\n      var keys = Object.keys(val).sort(compareFunction)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        deterministicDecirc(val[key], key, i, stack, val, depth, options)\n        tmp[key] = val[key]\n      }\n      if (typeof parent !== 'undefined') {\n        arr.push([parent, k, val])\n        parent[k] = tmp\n      } else {\n        return tmp\n      }\n    }\n    stack.pop()\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues (replacer) {\n  replacer =\n    typeof replacer !== 'undefined'\n      ? replacer\n      : function (k, v) {\n        return v\n      }\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i]\n        if (part[1] === key && part[0] === val) {\n          val = part[2]\n          replacerStack.splice(i, 1)\n          break\n        }\n      }\n    }\n    return replacer.call(this, key, val)\n  }\n}\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.fecha = {})));\n}(this, (function (exports) { 'use strict';\n\n  var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\n  var twoDigitsOptional = \"\\\\d\\\\d?\";\n  var twoDigits = \"\\\\d\\\\d\";\n  var threeDigits = \"\\\\d{3}\";\n  var fourDigits = \"\\\\d{4}\";\n  var word = \"[^\\\\s]+\";\n  var literal = /\\[([^]*?)\\]/gm;\n  function shorten(arr, sLen) {\n      var newArr = [];\n      for (var i = 0, len = arr.length; i < len; i++) {\n          newArr.push(arr[i].substr(0, sLen));\n      }\n      return newArr;\n  }\n  var monthUpdate = function (arrName) { return function (v, i18n) {\n      var lowerCaseArr = i18n[arrName].map(function (v) { return v.toLowerCase(); });\n      var index = lowerCaseArr.indexOf(v.toLowerCase());\n      if (index > -1) {\n          return index;\n      }\n      return null;\n  }; };\n  function assign(origObj) {\n      var args = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n      }\n      for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n          var obj = args_1[_a];\n          for (var key in obj) {\n              // @ts-ignore ex\n              origObj[key] = obj[key];\n          }\n      }\n      return origObj;\n  }\n  var dayNames = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n  ];\n  var monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n  ];\n  var monthNamesShort = shorten(monthNames, 3);\n  var dayNamesShort = shorten(dayNames, 3);\n  var defaultI18n = {\n      dayNamesShort: dayNamesShort,\n      dayNames: dayNames,\n      monthNamesShort: monthNamesShort,\n      monthNames: monthNames,\n      amPm: [\"am\", \"pm\"],\n      DoFn: function (dayOfMonth) {\n          return (dayOfMonth +\n              [\"th\", \"st\", \"nd\", \"rd\"][dayOfMonth % 10 > 3\n                  ? 0\n                  : ((dayOfMonth - (dayOfMonth % 10) !== 10 ? 1 : 0) * dayOfMonth) % 10]);\n      }\n  };\n  var globalI18n = assign({}, defaultI18n);\n  var setGlobalDateI18n = function (i18n) {\n      return (globalI18n = assign(globalI18n, i18n));\n  };\n  var regexEscape = function (str) {\n      return str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n  };\n  var pad = function (val, len) {\n      if (len === void 0) { len = 2; }\n      val = String(val);\n      while (val.length < len) {\n          val = \"0\" + val;\n      }\n      return val;\n  };\n  var formatFlags = {\n      D: function (dateObj) { return String(dateObj.getDate()); },\n      DD: function (dateObj) { return pad(dateObj.getDate()); },\n      Do: function (dateObj, i18n) {\n          return i18n.DoFn(dateObj.getDate());\n      },\n      d: function (dateObj) { return String(dateObj.getDay()); },\n      dd: function (dateObj) { return pad(dateObj.getDay()); },\n      ddd: function (dateObj, i18n) {\n          return i18n.dayNamesShort[dateObj.getDay()];\n      },\n      dddd: function (dateObj, i18n) {\n          return i18n.dayNames[dateObj.getDay()];\n      },\n      M: function (dateObj) { return String(dateObj.getMonth() + 1); },\n      MM: function (dateObj) { return pad(dateObj.getMonth() + 1); },\n      MMM: function (dateObj, i18n) {\n          return i18n.monthNamesShort[dateObj.getMonth()];\n      },\n      MMMM: function (dateObj, i18n) {\n          return i18n.monthNames[dateObj.getMonth()];\n      },\n      YY: function (dateObj) {\n          return pad(String(dateObj.getFullYear()), 4).substr(2);\n      },\n      YYYY: function (dateObj) { return pad(dateObj.getFullYear(), 4); },\n      h: function (dateObj) { return String(dateObj.getHours() % 12 || 12); },\n      hh: function (dateObj) { return pad(dateObj.getHours() % 12 || 12); },\n      H: function (dateObj) { return String(dateObj.getHours()); },\n      HH: function (dateObj) { return pad(dateObj.getHours()); },\n      m: function (dateObj) { return String(dateObj.getMinutes()); },\n      mm: function (dateObj) { return pad(dateObj.getMinutes()); },\n      s: function (dateObj) { return String(dateObj.getSeconds()); },\n      ss: function (dateObj) { return pad(dateObj.getSeconds()); },\n      S: function (dateObj) {\n          return String(Math.round(dateObj.getMilliseconds() / 100));\n      },\n      SS: function (dateObj) {\n          return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n      },\n      SSS: function (dateObj) { return pad(dateObj.getMilliseconds(), 3); },\n      a: function (dateObj, i18n) {\n          return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n      },\n      A: function (dateObj, i18n) {\n          return dateObj.getHours() < 12\n              ? i18n.amPm[0].toUpperCase()\n              : i18n.amPm[1].toUpperCase();\n      },\n      ZZ: function (dateObj) {\n          var offset = dateObj.getTimezoneOffset();\n          return ((offset > 0 ? \"-\" : \"+\") +\n              pad(Math.floor(Math.abs(offset) / 60) * 100 + (Math.abs(offset) % 60), 4));\n      },\n      Z: function (dateObj) {\n          var offset = dateObj.getTimezoneOffset();\n          return ((offset > 0 ? \"-\" : \"+\") +\n              pad(Math.floor(Math.abs(offset) / 60), 2) +\n              \":\" +\n              pad(Math.abs(offset) % 60, 2));\n      }\n  };\n  var monthParse = function (v) { return +v - 1; };\n  var emptyDigits = [null, twoDigitsOptional];\n  var emptyWord = [null, word];\n  var amPm = [\n      \"isPm\",\n      word,\n      function (v, i18n) {\n          var val = v.toLowerCase();\n          if (val === i18n.amPm[0]) {\n              return 0;\n          }\n          else if (val === i18n.amPm[1]) {\n              return 1;\n          }\n          return null;\n      }\n  ];\n  var timezoneOffset = [\n      \"timezoneOffset\",\n      \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n      function (v) {\n          var parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n          if (parts) {\n              var minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n              return parts[0] === \"+\" ? minutes : -minutes;\n          }\n          return 0;\n      }\n  ];\n  var parseFlags = {\n      D: [\"day\", twoDigitsOptional],\n      DD: [\"day\", twoDigits],\n      Do: [\"day\", twoDigitsOptional + word, function (v) { return parseInt(v, 10); }],\n      M: [\"month\", twoDigitsOptional, monthParse],\n      MM: [\"month\", twoDigits, monthParse],\n      YY: [\n          \"year\",\n          twoDigits,\n          function (v) {\n              var now = new Date();\n              var cent = +(\"\" + now.getFullYear()).substr(0, 2);\n              return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n          }\n      ],\n      h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n      hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n      H: [\"hour\", twoDigitsOptional],\n      HH: [\"hour\", twoDigits],\n      m: [\"minute\", twoDigitsOptional],\n      mm: [\"minute\", twoDigits],\n      s: [\"second\", twoDigitsOptional],\n      ss: [\"second\", twoDigits],\n      YYYY: [\"year\", fourDigits],\n      S: [\"millisecond\", \"\\\\d\", function (v) { return +v * 100; }],\n      SS: [\"millisecond\", twoDigits, function (v) { return +v * 10; }],\n      SSS: [\"millisecond\", threeDigits],\n      d: emptyDigits,\n      dd: emptyDigits,\n      ddd: emptyWord,\n      dddd: emptyWord,\n      MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n      MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n      a: amPm,\n      A: amPm,\n      ZZ: timezoneOffset,\n      Z: timezoneOffset\n  };\n  // Some common format strings\n  var globalMasks = {\n      default: \"ddd MMM DD YYYY HH:mm:ss\",\n      shortDate: \"M/D/YY\",\n      mediumDate: \"MMM D, YYYY\",\n      longDate: \"MMMM D, YYYY\",\n      fullDate: \"dddd, MMMM D, YYYY\",\n      isoDate: \"YYYY-MM-DD\",\n      isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n      shortTime: \"HH:mm\",\n      mediumTime: \"HH:mm:ss\",\n      longTime: \"HH:mm:ss.SSS\"\n  };\n  var setGlobalDateMasks = function (masks) { return assign(globalMasks, masks); };\n  /***\n   * Format a date\n   * @method format\n   * @param {Date|number} dateObj\n   * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n   * @returns {string} Formatted date string\n   */\n  var format = function (dateObj, mask, i18n) {\n      if (mask === void 0) { mask = globalMasks[\"default\"]; }\n      if (i18n === void 0) { i18n = {}; }\n      if (typeof dateObj === \"number\") {\n          dateObj = new Date(dateObj);\n      }\n      if (Object.prototype.toString.call(dateObj) !== \"[object Date]\" ||\n          isNaN(dateObj.getTime())) {\n          throw new Error(\"Invalid Date pass to format\");\n      }\n      mask = globalMasks[mask] || mask;\n      var literals = [];\n      // Make literals inactive by replacing them with @@@\n      mask = mask.replace(literal, function ($0, $1) {\n          literals.push($1);\n          return \"@@@\";\n      });\n      var combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n      // Apply formatting rules\n      mask = mask.replace(token, function ($0) {\n          return formatFlags[$0](dateObj, combinedI18nSettings);\n      });\n      // Inline literal values back into the formatted value\n      return mask.replace(/@@@/g, function () { return literals.shift(); });\n  };\n  /**\n   * Parse a date string into a Javascript Date object /\n   * @method parse\n   * @param {string} dateStr Date string\n   * @param {string} format Date parse format\n   * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n   * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n   */\n  function parse(dateStr, format, i18n) {\n      if (i18n === void 0) { i18n = {}; }\n      if (typeof format !== \"string\") {\n          throw new Error(\"Invalid format in fecha parse\");\n      }\n      // Check to see if the format is actually a mask\n      format = globalMasks[format] || format;\n      // Avoid regular expression denial of service, fail early for really long strings\n      // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n      if (dateStr.length > 1000) {\n          return null;\n      }\n      // Default to the beginning of the year.\n      var today = new Date();\n      var dateInfo = {\n          year: today.getFullYear(),\n          month: 0,\n          day: 1,\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0,\n          isPm: null,\n          timezoneOffset: null\n      };\n      var parseInfo = [];\n      var literals = [];\n      // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n      var newFormat = format.replace(literal, function ($0, $1) {\n          literals.push(regexEscape($1));\n          return \"@@@\";\n      });\n      var specifiedFields = {};\n      var requiredFields = {};\n      // Change every token that we find into the correct regex\n      newFormat = regexEscape(newFormat).replace(token, function ($0) {\n          var info = parseFlags[$0];\n          var field = info[0], regex = info[1], requiredField = info[3];\n          // Check if the person has specified the same field twice. This will lead to confusing results.\n          if (specifiedFields[field]) {\n              throw new Error(\"Invalid format. \" + field + \" specified twice in format\");\n          }\n          specifiedFields[field] = true;\n          // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n          if (requiredField) {\n              requiredFields[requiredField] = true;\n          }\n          parseInfo.push(info);\n          return \"(\" + regex + \")\";\n      });\n      // Check all the required fields are present\n      Object.keys(requiredFields).forEach(function (field) {\n          if (!specifiedFields[field]) {\n              throw new Error(\"Invalid format. \" + field + \" is required in specified format\");\n          }\n      });\n      // Add back all the literals after\n      newFormat = newFormat.replace(/@@@/g, function () { return literals.shift(); });\n      // Check if the date string matches the format. If it doesn't return null\n      var matches = dateStr.match(new RegExp(newFormat, \"i\"));\n      if (!matches) {\n          return null;\n      }\n      var combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n      // For each match, call the parser function for that date part\n      for (var i = 1; i < matches.length; i++) {\n          var _a = parseInfo[i - 1], field = _a[0], parser = _a[2];\n          var value = parser\n              ? parser(matches[i], combinedI18nSettings)\n              : +matches[i];\n          // If the parser can't make sense of the value, return null\n          if (value == null) {\n              return null;\n          }\n          dateInfo[field] = value;\n      }\n      if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n          dateInfo.hour = +dateInfo.hour + 12;\n      }\n      else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n          dateInfo.hour = 0;\n      }\n      var dateTZ;\n      if (dateInfo.timezoneOffset == null) {\n          dateTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);\n          var validateFields = [\n              [\"month\", \"getMonth\"],\n              [\"day\", \"getDate\"],\n              [\"hour\", \"getHours\"],\n              [\"minute\", \"getMinutes\"],\n              [\"second\", \"getSeconds\"]\n          ];\n          for (var i = 0, len = validateFields.length; i < len; i++) {\n              // Check to make sure the date field is within the allowed range. Javascript dates allows values\n              // outside the allowed range. If the values don't match the value was invalid\n              if (specifiedFields[validateFields[i][0]] &&\n                  dateInfo[validateFields[i][0]] !== dateTZ[validateFields[i][1]]()) {\n                  return null;\n              }\n          }\n      }\n      else {\n          dateTZ = new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));\n          // We can't validate dates in another timezone unfortunately. Do a basic check instead\n          if (dateInfo.month > 11 ||\n              dateInfo.month < 0 ||\n              dateInfo.day > 31 ||\n              dateInfo.day < 1 ||\n              dateInfo.hour > 23 ||\n              dateInfo.hour < 0 ||\n              dateInfo.minute > 59 ||\n              dateInfo.minute < 0 ||\n              dateInfo.second > 59 ||\n              dateInfo.second < 0) {\n              return null;\n          }\n      }\n      // Don't allow invalid dates\n      return dateTZ;\n  }\n  var fecha = {\n      format: format,\n      parse: parse,\n      defaultI18n: defaultI18n,\n      setGlobalDateI18n: setGlobalDateI18n,\n      setGlobalDateMasks: setGlobalDateMasks\n  };\n\n  exports.assign = assign;\n  exports.default = fecha;\n  exports.format = format;\n  exports.parse = parse;\n  exports.defaultI18n = defaultI18n;\n  exports.setGlobalDateI18n = setGlobalDateI18n;\n  exports.setGlobalDateMasks = setGlobalDateMasks;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=fecha.umd.js.map\n","'use strict';\n\nvar toString = Object.prototype.toString;\n\n/**\n * Extract names from functions.\n *\n * @param {Function} fn The function who's name we need to extract.\n * @returns {String} The name of the function.\n * @public\n */\nmodule.exports = function name(fn) {\n  if ('string' === typeof fn.displayName && fn.constructor.name) {\n    return fn.displayName;\n  } else if ('string' === typeof fn.name && fn.name) {\n    return fn.name;\n  }\n\n  //\n  // Check to see if the constructor has a name.\n  //\n  if (\n       'object' === typeof fn\n    && fn.constructor\n    && 'string' === typeof fn.constructor.name\n  ) return fn.constructor.name;\n\n  //\n  // toString the given function and attempt to parse it out of it, or determine\n  // the class.\n  //\n  var named = fn.toString()\n    , type = toString.call(fn).slice(8, -1);\n\n  if ('Function' === type) {\n    named = named.substring(named.indexOf('(') + 1, named.indexOf(')'));\n  } else {\n    named = type;\n  }\n\n  return named || 'anonymous';\n};\n",null,"/* eslint-disable no-plusplus */\n\nconst missingPlugin = 1000;\nconst pluginFunction = 1001;\nconst aborted = 1002;\nconst noParser = 1003;\nconst uninitializedParser = 1004;\nconst filenameNotString = 1005;\nconst maxFieldsSizeExceeded = 1006;\nconst maxFieldsExceeded = 1007;\nconst smallerThanMinFileSize = 1008;\nconst biggerThanMaxFileSize = 1009;\nconst noEmptyFiles = 1010;\nconst missingContentType = 1011;\nconst malformedMultipart = 1012;\nconst missingMultipartBoundary = 1013;\nconst unknownTransferEncoding = 1014;\n\nconst FormidableError = class extends Error {\n  constructor(message, internalCode, httpCode = 500) {\n    super(message);\n    this.code = internalCode;\n    this.httpCode = httpCode;\n  }\n};\n\nmodule.exports = {\n  missingPlugin,\n  pluginFunction,\n  aborted,\n  noParser,\n  uninitializedParser,\n  filenameNotString,\n  maxFieldsSizeExceeded,\n  maxFieldsExceeded,\n  smallerThanMinFileSize,\n  biggerThanMaxFileSize,\n  noEmptyFiles,\n  missingContentType,\n  malformedMultipart,\n  missingMultipartBoundary,\n  unknownTransferEncoding,\n\n  FormidableError,\n};\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst fs = require('fs');\nconst crypto = require('crypto');\nconst { EventEmitter } = require('events');\n\nclass PersistentFile extends EventEmitter {\n  constructor({ filepath, newFilename, originalFilename, mimetype, hashAlgorithm }) {\n    super();\n\n    this.lastModifiedDate = null;\n    Object.assign(this, { filepath, newFilename, originalFilename, mimetype, hashAlgorithm });\n\n    this.size = 0;\n    this._writeStream = null;\n\n    if (typeof this.hashAlgorithm === 'string') {\n      this.hash = crypto.createHash(this.hashAlgorithm);\n    } else {\n      this.hash = null;\n    }\n  }\n\n  open() {\n    this._writeStream = new fs.WriteStream(this.filepath);\n    this._writeStream.on('error', (err) => {\n      this.emit('error', err);\n    });\n  }\n\n  toJSON() {\n    const json = {\n      size: this.size,\n      filepath: this.filepath,\n      newFilename: this.newFilename,\n      mimetype: this.mimetype,\n      mtime: this.lastModifiedDate,\n      length: this.length,\n      originalFilename: this.originalFilename,\n    };\n    if (this.hash && this.hash !== '') {\n      json.hash = this.hash;\n    }\n    return json;\n  }\n\n  toString() {\n    return `PersistentFile: ${this.newFilename}, Original: ${this.originalFilename}, Path: ${this.filepath}`;\n  }\n\n  write(buffer, cb) {\n    if (this.hash) {\n      this.hash.update(buffer);\n    }\n\n    if (this._writeStream.closed) {\n      cb();\n      return;\n    }\n\n    this._writeStream.write(buffer, () => {\n      this.lastModifiedDate = new Date();\n      this.size += buffer.length;\n      this.emit('progress', this.size);\n      cb();\n    });\n  }\n\n  end(cb) {\n    if (this.hash) {\n      this.hash = this.hash.digest('hex');\n    }\n    this._writeStream.end(() => {\n      this.emit('end');\n      cb();\n    });\n  }\n\n  destroy() {\n    this._writeStream.destroy();\n    fs.unlink(this.filepath, () => {});\n  }\n}\n\nmodule.exports = PersistentFile;\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst crypto = require('crypto');\nconst { EventEmitter } = require('events');\n\nclass VolatileFile extends EventEmitter {\n  constructor({ filepath, newFilename, originalFilename, mimetype, hashAlgorithm, createFileWriteStream }) {\n    super();\n\n    this.lastModifiedDate = null;\n    Object.assign(this, { filepath, newFilename, originalFilename, mimetype, hashAlgorithm, createFileWriteStream });\n\n    this.size = 0;\n    this._writeStream = null;\n\n    if (typeof this.hashAlgorithm === 'string') {\n      this.hash = crypto.createHash(this.hashAlgorithm);\n    } else {\n      this.hash = null;\n    }\n  }\n\n  open() {\n    this._writeStream = this.createFileWriteStream(this);\n    this._writeStream.on('error', (err) => {\n      this.emit('error', err);\n    });\n  }\n\n  destroy() {\n    this._writeStream.destroy();\n  }\n\n  toJSON() {\n    const json = {\n      size: this.size,\n      newFilename: this.newFilename,\n      length: this.length,\n      originalFilename: this.originalFilename,\n      mimetype: this.mimetype,\n    };\n    if (this.hash && this.hash !== '') {\n      json.hash = this.hash;\n    }\n    return json;\n  }\n\n  toString() {\n    return `VolatileFile: ${this.originalFilename}`;\n  }\n\n  write(buffer, cb) {\n    if (this.hash) {\n      this.hash.update(buffer);\n    }\n\n    if (this._writeStream.closed || this._writeStream.destroyed) {\n      cb();\n      return;\n    }\n\n    this._writeStream.write(buffer, () => {\n      this.size += buffer.length;\n      this.emit('progress', this.size);\n      cb();\n    });\n  }\n\n  end(cb) {\n    if (this.hash) {\n      this.hash = this.hash.digest('hex');\n    }\n    this._writeStream.end(() => {\n      this.emit('end');\n      cb();\n    });\n  }\n}\n\nmodule.exports = VolatileFile;\n","'use strict';\n\nconst PersistentFile = require('./PersistentFile');\nconst VolatileFile = require('./VolatileFile');\nconst Formidable = require('./Formidable');\nconst FormidableError = require('./FormidableError');\n\nconst plugins = require('./plugins/index');\nconst parsers = require('./parsers/index');\n\n// make it available without requiring the `new` keyword\n// if you want it access `const formidable.IncomingForm` as v1\nconst formidable = (...args) => new Formidable(...args);\n\nmodule.exports = Object.assign(formidable, {\n  errors: FormidableError,\n  File: PersistentFile,\n  PersistentFile,\n  VolatileFile,\n  Formidable,\n  formidable,\n\n  // alias\n  IncomingForm: Formidable,\n\n  // parsers\n  ...parsers,\n  parsers,\n\n  // misc\n  defaultOptions: Formidable.DEFAULT_OPTIONS,\n  enabledPlugins: Formidable.DEFAULT_OPTIONS.enabledPlugins,\n\n  // plugins\n  plugins: {\n    ...plugins,\n  },\n});\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Transform } = require('stream');\n\nclass DummyParser extends Transform {\n  constructor(incomingForm, options = {}) {\n    super();\n    this.globalOptions = { ...options };\n    this.incomingForm = incomingForm;\n  }\n\n  _flush(callback) {\n    this.incomingForm.ended = true;\n    this.incomingForm._maybeEnd();\n    callback();\n  }\n}\n\nmodule.exports = DummyParser;\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Transform } = require('stream');\n\nclass JSONParser extends Transform {\n  constructor(options = {}) {\n    super({ readableObjectMode: true });\n    this.chunks = [];\n    this.globalOptions = { ...options };\n  }\n\n  _transform(chunk, encoding, callback) {\n    this.chunks.push(String(chunk)); // todo consider using a string decoder\n    callback();\n  }\n\n  _flush(callback) {\n    try {\n      const fields = JSON.parse(this.chunks.join(''));\n      Object.keys(fields).forEach((key) => {\n        const value = fields[key];\n        this.push({ key, value });\n      });\n    } catch (e) {\n      callback(e);\n      return;\n    }\n    this.chunks = null;\n    callback();\n  }\n}\n\nmodule.exports = JSONParser;\n","/* eslint-disable no-fallthrough */\n/* eslint-disable no-bitwise */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Transform } = require('stream');\nconst errors = require('../FormidableError.js');\n\nconst { FormidableError } = errors;\n\nlet s = 0;\nconst STATE = {\n  PARSER_UNINITIALIZED: s++,\n  START: s++,\n  START_BOUNDARY: s++,\n  HEADER_FIELD_START: s++,\n  HEADER_FIELD: s++,\n  HEADER_VALUE_START: s++,\n  HEADER_VALUE: s++,\n  HEADER_VALUE_ALMOST_DONE: s++,\n  HEADERS_ALMOST_DONE: s++,\n  PART_DATA_START: s++,\n  PART_DATA: s++,\n  PART_END: s++,\n  END: s++,\n};\n\nlet f = 1;\nconst FBOUNDARY = { PART_BOUNDARY: f, LAST_BOUNDARY: (f *= 2) };\n\nconst LF = 10;\nconst CR = 13;\nconst SPACE = 32;\nconst HYPHEN = 45;\nconst COLON = 58;\nconst A = 97;\nconst Z = 122;\n\nfunction lower(c) {\n  return c | 0x20;\n}\n\nexports.STATES = {};\n\nObject.keys(STATE).forEach((stateName) => {\n  exports.STATES[stateName] = STATE[stateName];\n});\n\nclass MultipartParser extends Transform {\n  constructor(options = {}) {\n    super({ readableObjectMode: true });\n    this.boundary = null;\n    this.boundaryChars = null;\n    this.lookbehind = null;\n    this.bufferLength = 0;\n    this.state = STATE.PARSER_UNINITIALIZED;\n\n    this.globalOptions = { ...options };\n    this.index = null;\n    this.flags = 0;\n  }\n\n  _flush(done) {\n    if (\n      (this.state === STATE.HEADER_FIELD_START && this.index === 0) ||\n      (this.state === STATE.PART_DATA && this.index === this.boundary.length)\n    ) {\n      this._handleCallback('partEnd');\n      this._handleCallback('end');\n      done();\n    } else if (this.state !== STATE.END) {\n      done(\n        new FormidableError(\n          `MultipartParser.end(): stream ended unexpectedly: ${this.explain()}`,\n          errors.malformedMultipart,\n          400,\n        ),\n      );\n    }\n  }\n\n  initWithBoundary(str) {\n    this.boundary = Buffer.from(`\\r\\n--${str}`);\n    this.lookbehind = Buffer.alloc(this.boundary.length + 8);\n    this.state = STATE.START;\n    this.boundaryChars = {};\n\n    for (let i = 0; i < this.boundary.length; i++) {\n      this.boundaryChars[this.boundary[i]] = true;\n    }\n  }\n\n  // eslint-disable-next-line max-params\n  _handleCallback(name, buf, start, end) {\n    if (start !== undefined && start === end) {\n      return;\n    }\n    this.push({ name, buffer: buf, start, end });\n  }\n\n  // eslint-disable-next-line max-statements\n  _transform(buffer, _, done) {\n    let i = 0;\n    let prevIndex = this.index;\n    let { index, state, flags } = this;\n    const { lookbehind, boundary, boundaryChars } = this;\n    const boundaryLength = boundary.length;\n    const boundaryEnd = boundaryLength - 1;\n    this.bufferLength = buffer.length;\n    let c = null;\n    let cl = null;\n\n    const setMark = (name, idx) => {\n      this[`${name}Mark`] = typeof idx === 'number' ? idx : i;\n    };\n\n    const clearMarkSymbol = (name) => {\n      delete this[`${name}Mark`];\n    };\n\n    const dataCallback = (name, shouldClear) => {\n      const markSymbol = `${name}Mark`;\n      if (!(markSymbol in this)) {\n        return;\n      }\n\n      if (!shouldClear) {\n        this._handleCallback(name, buffer, this[markSymbol], buffer.length);\n        setMark(name, 0);\n      } else {\n        this._handleCallback(name, buffer, this[markSymbol], i);\n        clearMarkSymbol(name);\n      }\n    };\n\n    for (i = 0; i < this.bufferLength; i++) {\n      c = buffer[i];\n      switch (state) {\n        case STATE.PARSER_UNINITIALIZED:\n          return i;\n        case STATE.START:\n          index = 0;\n          state = STATE.START_BOUNDARY;\n        case STATE.START_BOUNDARY:\n          if (index === boundary.length - 2) {\n            if (c === HYPHEN) {\n              flags |= FBOUNDARY.LAST_BOUNDARY;\n            } else if (c !== CR) {\n              return i;\n            }\n            index++;\n            break;\n          } else if (index - 1 === boundary.length - 2) {\n            if (flags & FBOUNDARY.LAST_BOUNDARY && c === HYPHEN) {\n              this._handleCallback('end');\n              state = STATE.END;\n              flags = 0;\n            } else if (!(flags & FBOUNDARY.LAST_BOUNDARY) && c === LF) {\n              index = 0;\n              this._handleCallback('partBegin');\n              state = STATE.HEADER_FIELD_START;\n            } else {\n              return i;\n            }\n            break;\n          }\n\n          if (c !== boundary[index + 2]) {\n            index = -2;\n          }\n          if (c === boundary[index + 2]) {\n            index++;\n          }\n          break;\n        case STATE.HEADER_FIELD_START:\n          state = STATE.HEADER_FIELD;\n          setMark('headerField');\n          index = 0;\n        case STATE.HEADER_FIELD:\n          if (c === CR) {\n            clearMarkSymbol('headerField');\n            state = STATE.HEADERS_ALMOST_DONE;\n            break;\n          }\n\n          index++;\n          if (c === HYPHEN) {\n            break;\n          }\n\n          if (c === COLON) {\n            if (index === 1) {\n              // empty header field\n              return i;\n            }\n            dataCallback('headerField', true);\n            state = STATE.HEADER_VALUE_START;\n            break;\n          }\n\n          cl = lower(c);\n          if (cl < A || cl > Z) {\n            return i;\n          }\n          break;\n        case STATE.HEADER_VALUE_START:\n          if (c === SPACE) {\n            break;\n          }\n\n          setMark('headerValue');\n          state = STATE.HEADER_VALUE;\n        case STATE.HEADER_VALUE:\n          if (c === CR) {\n            dataCallback('headerValue', true);\n            this._handleCallback('headerEnd');\n            state = STATE.HEADER_VALUE_ALMOST_DONE;\n          }\n          break;\n        case STATE.HEADER_VALUE_ALMOST_DONE:\n          if (c !== LF) {\n            return i;\n          }\n          state = STATE.HEADER_FIELD_START;\n          break;\n        case STATE.HEADERS_ALMOST_DONE:\n          if (c !== LF) {\n            return i;\n          }\n\n          this._handleCallback('headersEnd');\n          state = STATE.PART_DATA_START;\n          break;\n        case STATE.PART_DATA_START:\n          state = STATE.PART_DATA;\n          setMark('partData');\n        case STATE.PART_DATA:\n          prevIndex = index;\n\n          if (index === 0) {\n            // boyer-moore derrived algorithm to safely skip non-boundary data\n            i += boundaryEnd;\n            while (i < this.bufferLength && !(buffer[i] in boundaryChars)) {\n              i += boundaryLength;\n            }\n            i -= boundaryEnd;\n            c = buffer[i];\n          }\n\n          if (index < boundary.length) {\n            if (boundary[index] === c) {\n              if (index === 0) {\n                dataCallback('partData', true);\n              }\n              index++;\n            } else {\n              index = 0;\n            }\n          } else if (index === boundary.length) {\n            index++;\n            if (c === CR) {\n              // CR = part boundary\n              flags |= FBOUNDARY.PART_BOUNDARY;\n            } else if (c === HYPHEN) {\n              // HYPHEN = end boundary\n              flags |= FBOUNDARY.LAST_BOUNDARY;\n            } else {\n              index = 0;\n            }\n          } else if (index - 1 === boundary.length) {\n            if (flags & FBOUNDARY.PART_BOUNDARY) {\n              index = 0;\n              if (c === LF) {\n                // unset the PART_BOUNDARY flag\n                flags &= ~FBOUNDARY.PART_BOUNDARY;\n                this._handleCallback('partEnd');\n                this._handleCallback('partBegin');\n                state = STATE.HEADER_FIELD_START;\n                break;\n              }\n            } else if (flags & FBOUNDARY.LAST_BOUNDARY) {\n              if (c === HYPHEN) {\n                this._handleCallback('partEnd');\n                this._handleCallback('end');\n                state = STATE.END;\n                flags = 0;\n              } else {\n                index = 0;\n              }\n            } else {\n              index = 0;\n            }\n          }\n\n          if (index > 0) {\n            // when matching a possible boundary, keep a lookbehind reference\n            // in case it turns out to be a false lead\n            lookbehind[index - 1] = c;\n          } else if (prevIndex > 0) {\n            // if our boundary turned out to be rubbish, the captured lookbehind\n            // belongs to partData\n            this._handleCallback('partData', lookbehind, 0, prevIndex);\n            prevIndex = 0;\n            setMark('partData');\n\n            // reconsider the current character even so it interrupted the sequence\n            // it could be the beginning of a new sequence\n            i--;\n          }\n\n          break;\n        case STATE.END:\n          break;\n        default:\n          return i;\n      }\n    }\n\n    dataCallback('headerField');\n    dataCallback('headerValue');\n    dataCallback('partData');\n\n    this.index = index;\n    this.state = state;\n    this.flags = flags;\n\n    done();\n    return this.bufferLength;\n  }\n\n  explain() {\n    return `state = ${MultipartParser.stateToString(this.state)}`;\n  }\n}\n\n// eslint-disable-next-line consistent-return\nMultipartParser.stateToString = (stateNumber) => {\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const stateName in STATE) {\n    const number = STATE[stateName];\n    if (number === stateNumber) return stateName;\n  }\n};\n\nmodule.exports = Object.assign(MultipartParser, { STATES: exports.STATES });\n","'use strict';\n\nconst { PassThrough } = require('stream');\n\nclass OctetStreamParser extends PassThrough {\n  constructor(options = {}) {\n    super();\n    this.globalOptions = { ...options };\n  }\n}\n\nmodule.exports = OctetStreamParser;\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Transform } = require('stream');\nconst querystring = require('querystring');\n\n// This is a buffering parser, not quite as nice as the multipart one.\n// If I find time I'll rewrite this to be fully streaming as well\nclass QuerystringParser extends Transform {\n  constructor(options = {}) {\n    super({ readableObjectMode: true });\n    this.globalOptions = { ...options };\n    this.buffer = '';\n    this.bufferLength = 0;\n  }\n\n  _transform(buffer, encoding, callback) {\n    this.buffer += buffer.toString('ascii');\n    this.bufferLength = this.buffer.length;\n    callback();\n  }\n\n  _flush(callback) {\n    const fields = querystring.parse(this.buffer, '&', '=');\n    // eslint-disable-next-line no-restricted-syntax, guard-for-in\n    for (const key in fields) {\n      this.push({\n        key,\n        value: fields[key],\n      });\n    }\n    this.buffer = '';\n    callback();\n  }\n}\n\nmodule.exports = QuerystringParser;\n","'use strict';\n\nconst JSONParser = require('./JSON');\nconst DummyParser = require('./Dummy');\nconst MultipartParser = require('./Multipart');\nconst OctetStreamParser = require('./OctetStream');\nconst QueryStringParser = require('./Querystring');\n\nObject.assign(exports, {\n  JSONParser,\n  DummyParser,\n  MultipartParser,\n  OctetStreamParser,\n  OctetstreamParser: OctetStreamParser,\n  QueryStringParser,\n  QuerystringParser: QueryStringParser,\n});\n","'use strict';\n\nconst octetstream = require('./octetstream');\nconst querystring = require('./querystring');\nconst multipart = require('./multipart');\nconst json = require('./json');\n\nObject.assign(exports, {\n  octetstream,\n  querystring,\n  multipart,\n  json,\n});\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst JSONParser = require('../parsers/JSON');\n\n// the `options` is also available through the `this.options` / `formidable.options`\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/json/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction init(_self, _opts) {\n  this.type = 'json';\n\n  const parser = new JSONParser(this.options);\n\n  parser.on('data', ({ key, value }) => {\n    this.emit('field', key, value);\n  });\n\n  parser.once('end', () => {\n    this.ended = true;\n    this._maybeEnd();\n  });\n\n  this._parser = parser;\n}\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Stream } = require('stream');\nconst MultipartParser = require('../parsers/Multipart');\nconst errors = require('../FormidableError.js');\n\nconst { FormidableError } = errors;\n\n// the `options` is also available through the `options` / `formidable.options`\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  // NOTE: we (currently) support both multipart/form-data and multipart/related\n  const multipart = /multipart/i.test(self.headers['content-type']);\n\n  if (multipart) {\n    const m = self.headers['content-type'].match(\n      /boundary=(?:\"([^\"]+)\"|([^;]+))/i,\n    );\n    if (m) {\n      const initMultipart = createInitMultipart(m[1] || m[2]);\n      initMultipart.call(self, self, options); // lgtm [js/superfluous-trailing-arguments]\n    } else {\n      const err = new FormidableError(\n        'bad content-type header, no multipart boundary',\n        errors.missingMultipartBoundary,\n        400,\n      );\n      self._error(err);\n    }\n  }\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction createInitMultipart(boundary) {\n  return function initMultipart() {\n    this.type = 'multipart';\n\n    const parser = new MultipartParser(this.options);\n    let headerField;\n    let headerValue;\n    let part;\n\n    parser.initWithBoundary(boundary);\n\n    // eslint-disable-next-line max-statements, consistent-return\n    parser.on('data', ({ name, buffer, start, end }) => {\n      if (name === 'partBegin') {\n        part = new Stream();\n        part.readable = true;\n        part.headers = {};\n        part.name = null;\n        part.originalFilename = null;\n        part.mimetype = null;\n\n        part.transferEncoding = this.options.encoding;\n        part.transferBuffer = '';\n\n        headerField = '';\n        headerValue = '';\n      } else if (name === 'headerField') {\n        headerField += buffer.toString(this.options.encoding, start, end);\n      } else if (name === 'headerValue') {\n        headerValue += buffer.toString(this.options.encoding, start, end);\n      } else if (name === 'headerEnd') {\n        headerField = headerField.toLowerCase();\n        part.headers[headerField] = headerValue;\n\n        // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n        const m = headerValue.match(\n          // eslint-disable-next-line no-useless-escape\n          /\\bname=(\"([^\"]*)\"|([^\\(\\)<>@,;:\\\\\"\\/\\[\\]\\?=\\{\\}\\s\\t/]+))/i,\n        );\n        if (headerField === 'content-disposition') {\n          if (m) {\n            part.name = m[2] || m[3] || '';\n          }\n\n          part.originalFilename = this._getFileName(headerValue);\n        } else if (headerField === 'content-type') {\n          part.mimetype = headerValue;\n        } else if (headerField === 'content-transfer-encoding') {\n          part.transferEncoding = headerValue.toLowerCase();\n        }\n\n        headerField = '';\n        headerValue = '';\n      } else if (name === 'headersEnd') {\n        switch (part.transferEncoding) {\n          case 'binary':\n          case '7bit':\n          case '8bit':\n          case 'utf-8': {\n            const dataPropagation = (ctx) => {\n              if (ctx.name === 'partData') {\n                part.emit('data', ctx.buffer.slice(ctx.start, ctx.end));\n              }\n            };\n            const dataStopPropagation = (ctx) => {\n              if (ctx.name === 'partEnd') {\n                part.emit('end');\n                parser.off('data', dataPropagation);\n                parser.off('data', dataStopPropagation);\n              }\n            };\n            parser.on('data', dataPropagation);\n            parser.on('data', dataStopPropagation);\n            break;\n          }\n          case 'base64': {\n            const dataPropagation = (ctx) => {\n              if (ctx.name === 'partData') {\n                part.transferBuffer += ctx.buffer\n                  .slice(ctx.start, ctx.end)\n                  .toString('ascii');\n\n                /*\n                  four bytes (chars) in base64 converts to three bytes in binary\n                  encoding. So we should always work with a number of bytes that\n                  can be divided by 4, it will result in a number of buytes that\n                  can be divided vy 3.\n                  */\n                const offset = parseInt(part.transferBuffer.length / 4, 10) * 4;\n                part.emit(\n                  'data',\n                  Buffer.from(\n                    part.transferBuffer.substring(0, offset),\n                    'base64',\n                  ),\n                );\n                part.transferBuffer = part.transferBuffer.substring(offset);\n              }\n            };\n            const dataStopPropagation = (ctx) => {\n              if (ctx.name === 'partEnd') {\n                part.emit('data', Buffer.from(part.transferBuffer, 'base64'));\n                part.emit('end');\n                parser.off('data', dataPropagation);\n                parser.off('data', dataStopPropagation);\n              }\n            };\n            parser.on('data', dataPropagation);\n            parser.on('data', dataStopPropagation);\n            break;\n          }\n          default:\n            return this._error(\n              new FormidableError(\n                'unknown transfer-encoding',\n                errors.unknownTransferEncoding,\n                501,\n              ),\n            );\n        }\n\n        this.onPart(part);\n      } else if (name === 'end') {\n        this.ended = true;\n        this._maybeEnd();\n      }\n    });\n\n    this._parser = parser;\n  };\n}\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst OctetStreamParser = require('../parsers/OctetStream');\n\n// the `options` is also available through the `options` / `formidable.options`\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/octet-stream/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n\n  return self;\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction init(_self, _opts) {\n  this.type = 'octet-stream';\n  const originalFilename = this.headers['x-file-name'];\n  const mimetype = this.headers['content-type'];\n\n  const thisPart = {\n    originalFilename,\n    mimetype,\n  };\n  const newFilename = this._getNewName(thisPart);\n  const filepath = this._joinDirectoryName(newFilename);\n  const file = this._newFile({\n    newFilename,\n    filepath,\n    originalFilename,\n    mimetype,\n  });\n\n  this.emit('fileBegin', originalFilename, file);\n  file.open();\n  this.openedFiles.push(file);\n  this._flushing += 1;\n\n  this._parser = new OctetStreamParser(this.options);\n\n  // Keep track of writes that haven't finished so we don't emit the file before it's done being written\n  let outstandingWrites = 0;\n\n  this._parser.on('data', (buffer) => {\n    this.pause();\n    outstandingWrites += 1;\n\n    file.write(buffer, () => {\n      outstandingWrites -= 1;\n      this.resume();\n\n      if (this.ended) {\n        this._parser.emit('doneWritingFile');\n      }\n    });\n  });\n\n  this._parser.on('end', () => {\n    this._flushing -= 1;\n    this.ended = true;\n\n    const done = () => {\n      file.end(() => {\n        this.emit('file', 'file', file);\n        this._maybeEnd();\n      });\n    };\n\n    if (outstandingWrites === 0) {\n      done();\n    } else {\n      this._parser.once('doneWritingFile', done);\n    }\n  });\n\n  return this;\n}\n","/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst QuerystringParser = require('../parsers/Querystring');\n\n// the `options` is also available through the `this.options` / `formidable.options`\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/urlencoded/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n\n  return self;\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction init(_self, _opts) {\n  this.type = 'urlencoded';\n\n  const parser = new QuerystringParser(this.options);\n\n  parser.on('data', ({ key, value }) => {\n    this.emit('field', key, value);\n  });\n\n  parser.once('end', () => {\n    this.ended = true;\n    this._maybeEnd();\n  });\n\n  this._parser = parser;\n\n  return this;\n}\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\n\nvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('has');\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\nvar $exec = bind.call(Function.call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","'use strict';\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nvar bind = require('function-bind');\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n","var IDX=256, HEX=[];\nwhile (IDX--) HEX[IDX] = (IDX + 256).toString(16).substring(1);\n\nmodule.exports = function (len) {\n\tlen = len || 16;\n\tvar str='', num=0;\n\treturn function () {\n\t\tif (!str || num === 256) {\n\t\t\tstr=''; num=(1+len)/2 | 0;\n\t\t\twhile (num--) str += HEX[256 * Math.random() | 0];\n\t\t\tstr = str.substring(num=0, len-2);\n\t\t}\n\t\treturn str + HEX[num++];\n\t};\n}\n","try {\n  var util = require('util');\n  /* istanbul ignore next */\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  /* istanbul ignore next */\n  module.exports = require('./inherits_browser.js');\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n","'use strict';\n\n/**\n * Kuler: Color text using CSS colors\n *\n * @constructor\n * @param {String} text The text that needs to be styled\n * @param {String} color Optional color for alternate API.\n * @api public\n */\nfunction Kuler(text, color) {\n  if (color) return (new Kuler(text)).style(color);\n  if (!(this instanceof Kuler)) return new Kuler(text);\n\n  this.text = text;\n}\n\n/**\n * ANSI color codes.\n *\n * @type {String}\n * @private\n */\nKuler.prototype.prefix = '\\x1b[';\nKuler.prototype.suffix = 'm';\n\n/**\n * Parse a hex color string and parse it to it's RGB equiv.\n *\n * @param {String} color\n * @returns {Array}\n * @api private\n */\nKuler.prototype.hex = function hex(color) {\n  color = color[0] === '#' ? color.substring(1) : color;\n\n  //\n  // Pre-parse for shorthand hex colors.\n  //\n  if (color.length === 3) {\n    color = color.split('');\n\n    color[5] = color[2]; // F60##0\n    color[4] = color[2]; // F60#00\n    color[3] = color[1]; // F60600\n    color[2] = color[1]; // F66600\n    color[1] = color[0]; // FF6600\n\n    color = color.join('');\n  }\n\n  var r = color.substring(0, 2)\n    , g = color.substring(2, 4)\n    , b = color.substring(4, 6);\n\n  return [ parseInt(r, 16), parseInt(g, 16), parseInt(b, 16) ];\n};\n\n/**\n * Transform a 255 RGB value to an RGV code.\n *\n * @param {Number} r Red color channel.\n * @param {Number} g Green color channel.\n * @param {Number} b Blue color channel.\n * @returns {String}\n * @api public\n */\nKuler.prototype.rgb = function rgb(r, g, b) {\n  var red = r / 255 * 5\n    , green = g / 255 * 5\n    , blue = b / 255 * 5;\n\n  return this.ansi(red, green, blue);\n};\n\n/**\n * Turns RGB 0-5 values into a single ANSI code.\n *\n * @param {Number} r Red color channel.\n * @param {Number} g Green color channel.\n * @param {Number} b Blue color channel.\n * @returns {String}\n * @api public\n */\nKuler.prototype.ansi = function ansi(r, g, b) {\n  var red = Math.round(r)\n    , green = Math.round(g)\n    , blue = Math.round(b);\n\n  return 16 + (red * 36) + (green * 6) + blue;\n};\n\n/**\n * Marks an end of color sequence.\n *\n * @returns {String} Reset sequence.\n * @api public\n */\nKuler.prototype.reset = function reset() {\n  return this.prefix +'39;49'+ this.suffix;\n};\n\n/**\n * Colour the terminal using CSS.\n *\n * @param {String} color The HEX color code.\n * @returns {String} the escape code.\n * @api public\n */\nKuler.prototype.style = function style(color) {\n  return this.prefix +'38;5;'+ this.rgb.apply(this, this.hex(color)) + this.suffix + this.text + this.reset();\n};\n\n\n//\n// Expose the actual interface.\n//\nmodule.exports = Kuler;\n","'use strict';\n\nconst format = require('./format');\n\n/*\n * function align (info)\n * Returns a new instance of the align Format which adds a `\\t`\n * delimiter before the message to properly align it in the same place.\n * It was previously { align: true } in winston < 3.0.0\n */\nmodule.exports = format(info => {\n  info.message = `\\t${info.message}`;\n  return info;\n});\n","'use strict';\n\nconst { Colorizer } = require('./colorize');\nconst { Padder } = require('./pad-levels');\nconst { configs, MESSAGE } = require('triple-beam');\n\n\n/**\n * Cli format class that handles initial state for a a separate\n * Colorizer and Padder instance.\n */\nclass CliFormat {\n  constructor(opts = {}) {\n    if (!opts.levels) {\n      opts.levels = configs.cli.levels;\n    }\n\n    this.colorizer = new Colorizer(opts);\n    this.padder = new Padder(opts);\n    this.options = opts;\n  }\n\n  /*\n   * function transform (info, opts)\n   * Attempts to both:\n   * 1. Pad the { level }\n   * 2. Colorize the { level, message }\n   * of the given `logform` info object depending on the `opts`.\n   */\n  transform(info, opts) {\n    this.colorizer.transform(\n      this.padder.transform(info, opts),\n      opts\n    );\n\n    info[MESSAGE] = `${info.level}:${info.message}`;\n    return info;\n  }\n}\n\n/*\n * function cli (opts)\n * Returns a new instance of the CLI format that turns a log\n * `info` object into the same format previously available\n * in `winston.cli()` in `winston < 3.0.0`.\n */\nmodule.exports = opts => new CliFormat(opts);\n\n//\n// Attach the CliFormat for registration purposes\n//\nmodule.exports.Format = CliFormat;\n","'use strict';\n\nconst colors = require('@colors/colors/safe');\nconst { LEVEL, MESSAGE } = require('triple-beam');\n\n//\n// Fix colors not appearing in non-tty environments\n//\ncolors.enabled = true;\n\n/**\n * @property {RegExp} hasSpace\n * Simple regex to check for presence of spaces.\n */\nconst hasSpace = /\\s+/;\n\n/*\n * Colorizer format. Wraps the `level` and/or `message` properties\n * of the `info` objects with ANSI color codes based on a few options.\n */\nclass Colorizer {\n  constructor(opts = {}) {\n    if (opts.colors) {\n      this.addColors(opts.colors);\n    }\n\n    this.options = opts;\n  }\n\n  /*\n   * Adds the colors Object to the set of allColors\n   * known by the Colorizer\n   *\n   * @param {Object} colors Set of color mappings to add.\n   */\n  static addColors(clrs) {\n    const nextColors = Object.keys(clrs).reduce((acc, level) => {\n      acc[level] = hasSpace.test(clrs[level])\n        ? clrs[level].split(hasSpace)\n        : clrs[level];\n\n      return acc;\n    }, {});\n\n    Colorizer.allColors = Object.assign({}, Colorizer.allColors || {}, nextColors);\n    return Colorizer.allColors;\n  }\n\n  /*\n   * Adds the colors Object to the set of allColors\n   * known by the Colorizer\n   *\n   * @param {Object} colors Set of color mappings to add.\n   */\n  addColors(clrs) {\n    return Colorizer.addColors(clrs);\n  }\n\n  /*\n   * function colorize (lookup, level, message)\n   * Performs multi-step colorization using @colors/colors/safe\n   */\n  colorize(lookup, level, message) {\n    if (typeof message === 'undefined') {\n      message = level;\n    }\n\n    //\n    // If the color for the level is just a string\n    // then attempt to colorize the message with it.\n    //\n    if (!Array.isArray(Colorizer.allColors[lookup])) {\n      return colors[Colorizer.allColors[lookup]](message);\n    }\n\n    //\n    // If it is an Array then iterate over that Array, applying\n    // the colors function for each item.\n    //\n    for (let i = 0, len = Colorizer.allColors[lookup].length; i < len; i++) {\n      message = colors[Colorizer.allColors[lookup][i]](message);\n    }\n\n    return message;\n  }\n\n  /*\n   * function transform (info, opts)\n   * Attempts to colorize the { level, message } of the given\n   * `logform` info object.\n   */\n  transform(info, opts) {\n    if (opts.all && typeof info[MESSAGE] === 'string') {\n      info[MESSAGE] = this.colorize(info[LEVEL], info.level, info[MESSAGE]);\n    }\n\n    if (opts.level || opts.all || !opts.message) {\n      info.level = this.colorize(info[LEVEL], info.level);\n    }\n\n    if (opts.all || opts.message) {\n      info.message = this.colorize(info[LEVEL], info.level, info.message);\n    }\n\n    return info;\n  }\n}\n\n/*\n * function colorize (info)\n * Returns a new instance of the colorize Format that applies\n * level colors to `info` objects. This was previously exposed\n * as { colorize: true } to transports in `winston < 3.0.0`.\n */\nmodule.exports = opts => new Colorizer(opts);\n\n//\n// Attach the Colorizer for registration purposes\n//\nmodule.exports.Colorizer\n  = module.exports.Format\n  = Colorizer;\n","'use strict';\n\nconst format = require('./format');\n\n/*\n * function cascade(formats)\n * Returns a function that invokes the `._format` function in-order\n * for the specified set of `formats`. In this manner we say that Formats\n * are \"pipe-like\", but not a pure pumpify implementation. Since there is no back\n * pressure we can remove all of the \"readable\" plumbing in Node streams.\n */\nfunction cascade(formats) {\n  if (!formats.every(isValidFormat)) {\n    return;\n  }\n\n  return info => {\n    let obj = info;\n    for (let i = 0; i < formats.length; i++) {\n      obj = formats[i].transform(obj, formats[i].options);\n      if (!obj) {\n        return false;\n      }\n    }\n\n    return obj;\n  };\n}\n\n/*\n * function isValidFormat(format)\n * If the format does not define a `transform` function throw an error\n * with more detailed usage.\n */\nfunction isValidFormat(fmt) {\n  if (typeof fmt.transform !== 'function') {\n    throw new Error([\n      'No transform function found on format. Did you create a format instance?',\n      'const myFormat = format(formatFn);',\n      'const instance = myFormat();'\n    ].join('\\n'));\n  }\n\n  return true;\n}\n\n/*\n * function combine (info)\n * Returns a new instance of the combine Format which combines the specified\n * formats into a new format. This is similar to a pipe-chain in transform streams.\n * We choose to combine the prototypes this way because there is no back pressure in\n * an in-memory transform chain.\n */\nmodule.exports = (...formats) => {\n  const combinedFormat = format(cascade(formats));\n  const instance = combinedFormat();\n  instance.Format = combinedFormat.Format;\n  return instance;\n};\n\n//\n// Export the cascade method for use in cli and other\n// combined formats that should not be assumed to be\n// singletons.\n//\nmodule.exports.cascade = cascade;\n","/* eslint no-undefined: 0 */\n'use strict';\n\nconst format = require('./format');\nconst { LEVEL, MESSAGE } = require('triple-beam');\n\n/*\n * function errors (info)\n * If the `message` property of the `info` object is an instance of `Error`,\n * replace the `Error` object its own `message` property.\n *\n * Optionally, the Error's `stack` property can also be appended to the `info` object.\n */\nmodule.exports = format((einfo, { stack }) => {\n  if (einfo instanceof Error) {\n    const info = Object.assign({}, einfo, {\n      level: einfo.level,\n      [LEVEL]: einfo[LEVEL] || einfo.level,\n      message: einfo.message,\n      [MESSAGE]: einfo[MESSAGE] || einfo.message\n    });\n\n    if (stack) info.stack = einfo.stack;\n    return info;\n  }\n\n  if (!(einfo.message instanceof Error)) return einfo;\n\n  // Assign all enumerable properties and the\n  // message property from the error provided.\n  const err = einfo.message;\n  Object.assign(einfo, err);\n  einfo.message = err.message;\n  einfo[MESSAGE] = err.message;\n\n  // Assign the stack if requested.\n  if (stack) einfo.stack = err.stack;\n  return einfo;\n});\n","'use strict';\n\n/*\n * Displays a helpful message and the source of\n * the format when it is invalid.\n */\nclass InvalidFormatError extends Error {\n  constructor(formatFn) {\n    super(`Format functions must be synchronous taking a two arguments: (info, opts)\nFound: ${formatFn.toString().split('\\n')[0]}\\n`);\n\n    Error.captureStackTrace(this, InvalidFormatError);\n  }\n}\n\n/*\n * function format (formatFn)\n * Returns a create function for the `formatFn`.\n */\nmodule.exports = formatFn => {\n  if (formatFn.length > 2) {\n    throw new InvalidFormatError(formatFn);\n  }\n\n  /*\n   * function Format (options)\n   * Base prototype which calls a `_format`\n   * function and pushes the result.\n   */\n  function Format(options = {}) {\n    this.options = options;\n  }\n\n  Format.prototype.transform = formatFn;\n\n  //\n  // Create a function which returns new instances of\n  // FormatWrap for simple syntax like:\n  //\n  // require('winston').formats.json();\n  //\n  function createFormatWrap(opts) {\n    return new Format(opts);\n  }\n\n  //\n  // Expose the FormatWrap through the create function\n  // for testability.\n  //\n  createFormatWrap.Format = Format;\n  return createFormatWrap;\n};\n","'use strict';\n\n/*\n * @api public\n * @property {function} format\n * Both the construction method and set of exposed\n * formats.\n */\nconst format = exports.format = require('./format');\n\n/*\n * @api public\n * @method {function} levels\n * Registers the specified levels with logform.\n */\nexports.levels = require('./levels');\n\n/*\n * @api private\n * method {function} exposeFormat\n * Exposes a sub-format on the main format object\n * as a lazy-loaded getter.\n */\nfunction exposeFormat(name, requireFormat) {\n  Object.defineProperty(format, name, {\n    get() {\n      return requireFormat();\n    },\n    configurable: true\n  });\n}\n\n//\n// Setup all transports as lazy-loaded getters.\n//\nexposeFormat('align', function () { return require('./align'); });\nexposeFormat('errors', function () { return require('./errors'); });\nexposeFormat('cli', function () { return require('./cli'); });\nexposeFormat('combine', function () { return require('./combine'); });\nexposeFormat('colorize', function () { return require('./colorize'); });\nexposeFormat('json', function () { return require('./json'); });\nexposeFormat('label', function () { return require('./label'); });\nexposeFormat('logstash', function () { return require('./logstash'); });\nexposeFormat('metadata', function () { return require('./metadata'); });\nexposeFormat('ms', function () { return require('./ms'); });\nexposeFormat('padLevels', function () { return require('./pad-levels'); });\nexposeFormat('prettyPrint', function () { return require('./pretty-print'); });\nexposeFormat('printf', function () { return require('./printf'); });\nexposeFormat('simple', function () { return require('./simple'); });\nexposeFormat('splat', function () { return require('./splat'); });\nexposeFormat('timestamp', function () { return require('./timestamp'); });\nexposeFormat('uncolorize', function () { return require('./uncolorize'); });\n","'use strict';\n\nconst format = require('./format');\nconst { MESSAGE } = require('triple-beam');\nconst stringify = require('safe-stable-stringify');\n\n/*\n * function replacer (key, value)\n * Handles proper stringification of Buffer and bigint output.\n */\nfunction replacer(key, value) {\n  // safe-stable-stringify does support BigInt, however, it doesn't wrap the value in quotes.\n  // Leading to a loss in fidelity if the resulting string is parsed.\n  // It would also be a breaking change for logform.\n  if (typeof value === 'bigint')\n    return value.toString();\n  return value;\n}\n\n/*\n * function json (info)\n * Returns a new instance of the JSON format that turns a log `info`\n * object into pure JSON. This was previously exposed as { json: true }\n * to transports in `winston < 3.0.0`.\n */\nmodule.exports = format((info, opts) => {\n  const jsonStringify = stringify.configure(opts);\n  info[MESSAGE] = jsonStringify(info, opts.replacer || replacer, opts.space);\n  return info;\n});\n","'use strict';\n\nconst format = require('./format');\n\n/*\n * function label (info)\n * Returns a new instance of the label Format which adds the specified\n * `opts.label` before the message. This was previously exposed as\n * { label: 'my label' } to transports in `winston < 3.0.0`.\n */\nmodule.exports = format((info, opts) => {\n  if (opts.message) {\n    info.message = `[${opts.label}] ${info.message}`;\n    return info;\n  }\n\n  info.label = opts.label;\n  return info;\n});\n","'use strict';\n\nconst { Colorizer } = require('./colorize');\n\n/*\n * Simple method to register colors with a simpler require\n * path within the module.\n */\nmodule.exports = config => {\n  Colorizer.addColors(config.colors || config);\n  return config;\n};\n","'use strict';\n\nconst format = require('./format');\nconst { MESSAGE } = require('triple-beam');\nconst jsonStringify = require('safe-stable-stringify');\n\n/*\n * function logstash (info)\n * Returns a new instance of the LogStash Format that turns a\n * log `info` object into pure JSON with the appropriate logstash\n * options. This was previously exposed as { logstash: true }\n * to transports in `winston < 3.0.0`.\n */\nmodule.exports = format(info => {\n  const logstash = {};\n  if (info.message) {\n    logstash['@message'] = info.message;\n    delete info.message;\n  }\n\n  if (info.timestamp) {\n    logstash['@timestamp'] = info.timestamp;\n    delete info.timestamp;\n  }\n\n  logstash['@fields'] = info;\n  info[MESSAGE] = jsonStringify(logstash);\n  return info;\n});\n","'use strict';\n\nconst format = require('./format');\n\nfunction fillExcept(info, fillExceptKeys, metadataKey) {\n  const savedKeys = fillExceptKeys.reduce((acc, key) => {\n    acc[key] = info[key];\n    delete info[key];\n    return acc;\n  }, {});\n  const metadata = Object.keys(info).reduce((acc, key) => {\n    acc[key] = info[key];\n    delete info[key];\n    return acc;\n  }, {});\n\n  Object.assign(info, savedKeys, {\n    [metadataKey]: metadata\n  });\n  return info;\n}\n\nfunction fillWith(info, fillWithKeys, metadataKey) {\n  info[metadataKey] = fillWithKeys.reduce((acc, key) => {\n    acc[key] = info[key];\n    delete info[key];\n    return acc;\n  }, {});\n  return info;\n}\n\n/**\n * Adds in a \"metadata\" object to collect extraneous data, similar to the metadata\n * object in winston 2.x.\n */\nmodule.exports = format((info, opts = {}) => {\n  let metadataKey = 'metadata';\n  if (opts.key) {\n    metadataKey = opts.key;\n  }\n\n  let fillExceptKeys = [];\n  if (!opts.fillExcept && !opts.fillWith) {\n    fillExceptKeys.push('level');\n    fillExceptKeys.push('message');\n  }\n\n  if (opts.fillExcept) {\n    fillExceptKeys = opts.fillExcept;\n  }\n\n  if (fillExceptKeys.length > 0) {\n    return fillExcept(info, fillExceptKeys, metadataKey);\n  }\n\n  if (opts.fillWith) {\n    return fillWith(info, opts.fillWith, metadataKey);\n  }\n\n  return info;\n});\n","'use strict';\n\nconst format = require('./format');\nconst ms = require('ms');\n\n/*\n * function ms (info)\n * Returns an `info` with a `ms` property. The `ms` property holds the Value\n * of the time difference between two calls in milliseconds.\n */\nmodule.exports = format(info => {\n  const curr = +new Date();\n  this.diff = curr - (this.prevTime || curr);\n  this.prevTime = curr;\n  info.ms = `+${ms(this.diff)}`;\n\n  return info;\n});\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","/* eslint no-unused-vars: 0 */\n'use strict';\n\nconst { configs, LEVEL, MESSAGE } = require('triple-beam');\n\nclass Padder {\n  constructor(opts = { levels: configs.npm.levels }) {\n    this.paddings = Padder.paddingForLevels(opts.levels, opts.filler);\n    this.options = opts;\n  }\n\n  /**\n   * Returns the maximum length of keys in the specified `levels` Object.\n   * @param  {Object} levels Set of all levels to calculate longest level against.\n   * @returns {Number} Maximum length of the longest level string.\n   */\n  static getLongestLevel(levels) {\n    const lvls = Object.keys(levels).map(level => level.length);\n    return Math.max(...lvls);\n  }\n\n  /**\n   * Returns the padding for the specified `level` assuming that the\n   * maximum length of all levels it's associated with is `maxLength`.\n   * @param  {String} level Level to calculate padding for.\n   * @param  {String} filler Repeatable text to use for padding.\n   * @param  {Number} maxLength Length of the longest level\n   * @returns {String} Padding string for the `level`\n   */\n  static paddingForLevel(level, filler, maxLength) {\n    const targetLen = maxLength + 1 - level.length;\n    const rep = Math.floor(targetLen / filler.length);\n    const padding = `${filler}${filler.repeat(rep)}`;\n    return padding.slice(0, targetLen);\n  }\n\n  /**\n   * Returns an object with the string paddings for the given `levels`\n   * using the specified `filler`.\n   * @param  {Object} levels Set of all levels to calculate padding for.\n   * @param  {String} filler Repeatable text to use for padding.\n   * @returns {Object} Mapping of level to desired padding.\n   */\n  static paddingForLevels(levels, filler = ' ') {\n    const maxLength = Padder.getLongestLevel(levels);\n    return Object.keys(levels).reduce((acc, level) => {\n      acc[level] = Padder.paddingForLevel(level, filler, maxLength);\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Prepends the padding onto the `message` based on the `LEVEL` of\n   * the `info`. This is based on the behavior of `winston@2` which also\n   * prepended the level onto the message.\n   *\n   * See: https://github.com/winstonjs/winston/blob/2.x/lib/winston/logger.js#L198-L201\n   *\n   * @param  {Info} info Logform info object\n   * @param  {Object} opts Options passed along to this instance.\n   * @returns {Info} Modified logform info object.\n   */\n  transform(info, opts) {\n    info.message = `${this.paddings[info[LEVEL]]}${info.message}`;\n    if (info[MESSAGE]) {\n      info[MESSAGE] = `${this.paddings[info[LEVEL]]}${info[MESSAGE]}`;\n    }\n\n    return info;\n  }\n}\n\n/*\n * function padLevels (info)\n * Returns a new instance of the padLevels Format which pads\n * levels to be the same length. This was previously exposed as\n * { padLevels: true } to transports in `winston < 3.0.0`.\n */\nmodule.exports = opts => new Padder(opts);\n\nmodule.exports.Padder\n  = module.exports.Format\n  = Padder;\n","'use strict';\n\nconst inspect = require('util').inspect;\nconst format = require('./format');\nconst { LEVEL, MESSAGE, SPLAT } = require('triple-beam');\n\n/*\n * function prettyPrint (info)\n * Returns a new instance of the prettyPrint Format that \"prettyPrint\"\n * serializes `info` objects. This was previously exposed as\n * { prettyPrint: true } to transports in `winston < 3.0.0`.\n */\nmodule.exports = format((info, opts = {}) => {\n  //\n  // info[{LEVEL, MESSAGE, SPLAT}] are enumerable here. Since they\n  // are internal, we remove them before util.inspect so they\n  // are not printed.\n  //\n  const stripped = Object.assign({}, info);\n\n  // Remark (indexzero): update this technique in April 2019\n  // when node@6 is EOL\n  delete stripped[LEVEL];\n  delete stripped[MESSAGE];\n  delete stripped[SPLAT];\n\n  info[MESSAGE] = inspect(stripped, false, opts.depth || null, opts.colorize);\n  return info;\n});\n","'use strict';\n\nconst { MESSAGE } = require('triple-beam');\n\nclass Printf {\n  constructor(templateFn) {\n    this.template = templateFn;\n  }\n\n  transform(info) {\n    info[MESSAGE] = this.template(info);\n    return info;\n  }\n}\n\n/*\n * function printf (templateFn)\n * Returns a new instance of the printf Format that creates an\n * intermediate prototype to store the template string-based formatter\n * function.\n */\nmodule.exports = opts => new Printf(opts);\n\nmodule.exports.Printf\n  = module.exports.Format\n  = Printf;\n","/* eslint no-undefined: 0 */\n'use strict';\n\nconst format = require('./format');\nconst { MESSAGE } = require('triple-beam');\nconst jsonStringify = require('safe-stable-stringify');\n\n/*\n * function simple (info)\n * Returns a new instance of the simple format TransformStream\n * which writes a simple representation of logs.\n *\n *    const { level, message, splat, ...rest } = info;\n *\n *    ${level}: ${message}                            if rest is empty\n *    ${level}: ${message} ${JSON.stringify(rest)}    otherwise\n */\nmodule.exports = format(info => {\n  const stringifiedRest = jsonStringify(Object.assign({}, info, {\n    level: undefined,\n    message: undefined,\n    splat: undefined\n  }));\n\n  const padding = info.padding && info.padding[info.level] || '';\n  if (stringifiedRest !== '{}') {\n    info[MESSAGE] = `${info.level}:${padding} ${info.message} ${stringifiedRest}`;\n  } else {\n    info[MESSAGE] = `${info.level}:${padding} ${info.message}`;\n  }\n\n  return info;\n});\n","'use strict';\n\nconst util = require('util');\nconst { SPLAT } = require('triple-beam');\n\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */\nconst formatRegExp = /%[scdjifoO%]/g;\n\n/**\n * Captures the number of escaped % signs in a format string (i.e. %s strings).\n * @type {RegExp}\n */\nconst escapedPercent = /%%/g;\n\nclass Splatter {\n  constructor(opts) {\n    this.options = opts;\n  }\n\n  /**\n     * Check to see if tokens <= splat.length, assign { splat, meta } into the\n     * `info` accordingly, and write to this instance.\n     *\n     * @param  {Info} info Logform info message.\n     * @param  {String[]} tokens Set of string interpolation tokens.\n     * @returns {Info} Modified info message\n     * @private\n     */\n  _splat(info, tokens) {\n    const msg = info.message;\n    const splat = info[SPLAT] || info.splat || [];\n    const percents = msg.match(escapedPercent);\n    const escapes = percents && percents.length || 0;\n\n    // The expected splat is the number of tokens minus the number of escapes\n    // e.g.\n    // - { expectedSplat: 3 } '%d %s %j'\n    // - { expectedSplat: 5 } '[%s] %d%% %d%% %s %j'\n    //\n    // Any \"meta\" will be arugments in addition to the expected splat size\n    // regardless of type. e.g.\n    //\n    // logger.log('info', '%d%% %s %j', 100, 'wow', { such: 'js' }, { thisIsMeta: true });\n    // would result in splat of four (4), but only three (3) are expected. Therefore:\n    //\n    // extraSplat = 3 - 4 = -1\n    // metas = [100, 'wow', { such: 'js' }, { thisIsMeta: true }].splice(-1, -1 * -1);\n    // splat = [100, 'wow', { such: 'js' }]\n    const expectedSplat = tokens.length - escapes;\n    const extraSplat = expectedSplat - splat.length;\n    const metas = extraSplat < 0\n      ? splat.splice(extraSplat, -1 * extraSplat)\n      : [];\n\n    // Now that { splat } has been separated from any potential { meta }. we\n    // can assign this to the `info` object and write it to our format stream.\n    // If the additional metas are **NOT** objects or **LACK** enumerable properties\n    // you are going to have a bad time.\n    const metalen = metas.length;\n    if (metalen) {\n      for (let i = 0; i < metalen; i++) {\n        Object.assign(info, metas[i]);\n      }\n    }\n\n    info.message = util.format(msg, ...splat);\n    return info;\n  }\n\n  /**\n    * Transforms the `info` message by using `util.format` to complete\n    * any `info.message` provided it has string interpolation tokens.\n    * If no tokens exist then `info` is immutable.\n    *\n    * @param  {Info} info Logform info message.\n    * @param  {Object} opts Options for this instance.\n    * @returns {Info} Modified info message\n    */\n  transform(info) {\n    const msg = info.message;\n    const splat = info[SPLAT] || info.splat;\n\n    // No need to process anything if splat is undefined\n    if (!splat || !splat.length) {\n      return info;\n    }\n\n    // Extract tokens, if none available default to empty array to\n    // ensure consistancy in expected results\n    const tokens = msg && msg.match && msg.match(formatRegExp);\n\n    // This condition will take care of inputs with info[SPLAT]\n    // but no tokens present\n    if (!tokens && (splat || splat.length)) {\n      const metas = splat.length > 1\n        ? splat.splice(0)\n        : splat;\n\n      // Now that { splat } has been separated from any potential { meta }. we\n      // can assign this to the `info` object and write it to our format stream.\n      // If the additional metas are **NOT** objects or **LACK** enumerable properties\n      // you are going to have a bad time.\n      const metalen = metas.length;\n      if (metalen) {\n        for (let i = 0; i < metalen; i++) {\n          Object.assign(info, metas[i]);\n        }\n      }\n\n      return info;\n    }\n\n    if (tokens) {\n      return this._splat(info, tokens);\n    }\n\n    return info;\n  }\n}\n\n/*\n * function splat (info)\n * Returns a new instance of the splat format TransformStream\n * which performs string interpolation from `info` objects. This was\n * previously exposed implicitly in `winston < 3.0.0`.\n */\nmodule.exports = opts => new Splatter(opts);\n","'use strict';\n\nconst fecha = require('fecha');\nconst format = require('./format');\n\n/*\n * function timestamp (info)\n * Returns a new instance of the timestamp Format which adds a timestamp\n * to the info. It was previously available in winston < 3.0.0 as:\n *\n * - { timestamp: true }             // `new Date.toISOString()`\n * - { timestamp: function:String }  // Value returned by `timestamp()`\n */\nmodule.exports = format((info, opts = {}) => {\n  if (opts.format) {\n    info.timestamp = typeof opts.format === 'function'\n      ? opts.format()\n      : fecha.format(new Date(), opts.format);\n  }\n\n  if (!info.timestamp) {\n    info.timestamp = new Date().toISOString();\n  }\n\n  if (opts.alias) {\n    info[opts.alias] = info.timestamp;\n  }\n\n  return info;\n});\n","'use strict';\n\nconst colors = require('@colors/colors/safe');\nconst format = require('./format');\nconst { MESSAGE } = require('triple-beam');\n\n/*\n * function uncolorize (info)\n * Returns a new instance of the uncolorize Format that strips colors\n * from `info` objects. This was previously exposed as { stripColors: true }\n * to transports in `winston < 3.0.0`.\n */\nmodule.exports = format((info, opts) => {\n  if (opts.level !== false) {\n    info.level = colors.strip(info.level);\n  }\n\n  if (opts.message !== false) {\n    info.message = colors.strip(String(info.message));\n  }\n\n  if (opts.raw !== false && info[MESSAGE]) {\n    info[MESSAGE] = colors.strip(String(info[MESSAGE]));\n  }\n\n  return info;\n});\n","'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n","/*!\n * methods\n * Copyright(c) 2013-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar http = require('http');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = getCurrentNodeMethods() || getBasicNodeMethods();\n\n/**\n * Get the current Node.js methods.\n * @private\n */\n\nfunction getCurrentNodeMethods() {\n  return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {\n    return method.toLowerCase();\n  });\n}\n\n/**\n * Get the \"basic\" Node.js methods, a snapshot from Node.js 0.10.\n * @private\n */\n\nfunction getBasicNodeMethods() {\n  return [\n    'get',\n    'post',\n    'put',\n    'head',\n    'delete',\n    'options',\n    'trace',\n    'copy',\n    'lock',\n    'mkcol',\n    'move',\n    'purge',\n    'propfind',\n    'proppatch',\n    'unlock',\n    'report',\n    'mkactivity',\n    'checkout',\n    'merge',\n    'm-search',\n    'notify',\n    'subscribe',\n    'unsubscribe',\n    'patch',\n    'search',\n    'connect'\n  ];\n}\n","/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n","'use strict';\n\n/**\n * @param typeMap [Object] Map of MIME type -> Array[extensions]\n * @param ...\n */\nfunction Mime() {\n  this._types = Object.create(null);\n  this._extensions = Object.create(null);\n\n  for (let i = 0; i < arguments.length; i++) {\n    this.define(arguments[i]);\n  }\n\n  this.define = this.define.bind(this);\n  this.getType = this.getType.bind(this);\n  this.getExtension = this.getExtension.bind(this);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * If a type declares an extension that has already been defined, an error will\n * be thrown.  To suppress this error and force the extension to be associated\n * with the new type, pass `force`=true.  Alternatively, you may prefix the\n * extension with \"*\" to map the type to extension, without mapping the\n * extension to the type.\n *\n * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});\n *\n *\n * @param map (Object) type definitions\n * @param force (Boolean) if true, force overriding of existing definitions\n */\nMime.prototype.define = function(typeMap, force) {\n  for (let type in typeMap) {\n    let extensions = typeMap[type].map(function(t) {\n      return t.toLowerCase();\n    });\n    type = type.toLowerCase();\n\n    for (let i = 0; i < extensions.length; i++) {\n      const ext = extensions[i];\n\n      // '*' prefix = not the preferred type for this extension.  So fixup the\n      // extension, and skip it.\n      if (ext[0] === '*') {\n        continue;\n      }\n\n      if (!force && (ext in this._types)) {\n        throw new Error(\n          'Attempt to change mapping for \"' + ext +\n          '\" extension from \"' + this._types[ext] + '\" to \"' + type +\n          '\". Pass `force=true` to allow this, otherwise remove \"' + ext +\n          '\" from the list of extensions for \"' + type + '\".'\n        );\n      }\n\n      this._types[ext] = type;\n    }\n\n    // Use first extension as default\n    if (force || !this._extensions[type]) {\n      const ext = extensions[0];\n      this._extensions[type] = (ext[0] !== '*') ? ext : ext.substr(1);\n    }\n  }\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.getType = function(path) {\n  path = String(path);\n  let last = path.replace(/^.*[/\\\\]/, '').toLowerCase();\n  let ext = last.replace(/^.*\\./, '').toLowerCase();\n\n  let hasPath = last.length < path.length;\n  let hasDot = ext.length < last.length - 1;\n\n  return (hasDot || !hasPath) && this._types[ext] || null;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.getExtension = function(type) {\n  type = /^\\s*([^;\\s]*)/.test(type) && RegExp.$1;\n  return type && this._extensions[type.toLowerCase()] || null;\n};\n\nmodule.exports = Mime;\n","'use strict';\n\nlet Mime = require('./Mime');\nmodule.exports = new Mime(require('./types/standard'), require('./types/other'));\n","module.exports = {\"application/prs.cww\":[\"cww\"],\"application/vnd.1000minds.decision-model+xml\":[\"1km\"],\"application/vnd.3gpp.pic-bw-large\":[\"plb\"],\"application/vnd.3gpp.pic-bw-small\":[\"psb\"],\"application/vnd.3gpp.pic-bw-var\":[\"pvb\"],\"application/vnd.3gpp2.tcap\":[\"tcap\"],\"application/vnd.3m.post-it-notes\":[\"pwn\"],\"application/vnd.accpac.simply.aso\":[\"aso\"],\"application/vnd.accpac.simply.imp\":[\"imp\"],\"application/vnd.acucobol\":[\"acu\"],\"application/vnd.acucorp\":[\"atc\",\"acutc\"],\"application/vnd.adobe.air-application-installer-package+zip\":[\"air\"],\"application/vnd.adobe.formscentral.fcdt\":[\"fcdt\"],\"application/vnd.adobe.fxp\":[\"fxp\",\"fxpl\"],\"application/vnd.adobe.xdp+xml\":[\"xdp\"],\"application/vnd.adobe.xfdf\":[\"xfdf\"],\"application/vnd.ahead.space\":[\"ahead\"],\"application/vnd.airzip.filesecure.azf\":[\"azf\"],\"application/vnd.airzip.filesecure.azs\":[\"azs\"],\"application/vnd.amazon.ebook\":[\"azw\"],\"application/vnd.americandynamics.acc\":[\"acc\"],\"application/vnd.amiga.ami\":[\"ami\"],\"application/vnd.android.package-archive\":[\"apk\"],\"application/vnd.anser-web-certificate-issue-initiation\":[\"cii\"],\"application/vnd.anser-web-funds-transfer-initiation\":[\"fti\"],\"application/vnd.antix.game-component\":[\"atx\"],\"application/vnd.apple.installer+xml\":[\"mpkg\"],\"application/vnd.apple.keynote\":[\"key\"],\"application/vnd.apple.mpegurl\":[\"m3u8\"],\"application/vnd.apple.numbers\":[\"numbers\"],\"application/vnd.apple.pages\":[\"pages\"],\"application/vnd.apple.pkpass\":[\"pkpass\"],\"application/vnd.aristanetworks.swi\":[\"swi\"],\"application/vnd.astraea-software.iota\":[\"iota\"],\"application/vnd.audiograph\":[\"aep\"],\"application/vnd.balsamiq.bmml+xml\":[\"bmml\"],\"application/vnd.blueice.multipass\":[\"mpm\"],\"application/vnd.bmi\":[\"bmi\"],\"application/vnd.businessobjects\":[\"rep\"],\"application/vnd.chemdraw+xml\":[\"cdxml\"],\"application/vnd.chipnuts.karaoke-mmd\":[\"mmd\"],\"application/vnd.cinderella\":[\"cdy\"],\"application/vnd.citationstyles.style+xml\":[\"csl\"],\"application/vnd.claymore\":[\"cla\"],\"application/vnd.cloanto.rp9\":[\"rp9\"],\"application/vnd.clonk.c4group\":[\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"],\"application/vnd.cluetrust.cartomobile-config\":[\"c11amc\"],\"application/vnd.cluetrust.cartomobile-config-pkg\":[\"c11amz\"],\"application/vnd.commonspace\":[\"csp\"],\"application/vnd.contact.cmsg\":[\"cdbcmsg\"],\"application/vnd.cosmocaller\":[\"cmc\"],\"application/vnd.crick.clicker\":[\"clkx\"],\"application/vnd.crick.clicker.keyboard\":[\"clkk\"],\"application/vnd.crick.clicker.palette\":[\"clkp\"],\"application/vnd.crick.clicker.template\":[\"clkt\"],\"application/vnd.crick.clicker.wordbank\":[\"clkw\"],\"application/vnd.criticaltools.wbs+xml\":[\"wbs\"],\"application/vnd.ctc-posml\":[\"pml\"],\"application/vnd.cups-ppd\":[\"ppd\"],\"application/vnd.curl.car\":[\"car\"],\"application/vnd.curl.pcurl\":[\"pcurl\"],\"application/vnd.dart\":[\"dart\"],\"application/vnd.data-vision.rdz\":[\"rdz\"],\"application/vnd.dbf\":[\"dbf\"],\"application/vnd.dece.data\":[\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"],\"application/vnd.dece.ttml+xml\":[\"uvt\",\"uvvt\"],\"application/vnd.dece.unspecified\":[\"uvx\",\"uvvx\"],\"application/vnd.dece.zip\":[\"uvz\",\"uvvz\"],\"application/vnd.denovo.fcselayout-link\":[\"fe_launch\"],\"application/vnd.dna\":[\"dna\"],\"application/vnd.dolby.mlp\":[\"mlp\"],\"application/vnd.dpgraph\":[\"dpg\"],\"application/vnd.dreamfactory\":[\"dfac\"],\"application/vnd.ds-keypoint\":[\"kpxx\"],\"application/vnd.dvb.ait\":[\"ait\"],\"application/vnd.dvb.service\":[\"svc\"],\"application/vnd.dynageo\":[\"geo\"],\"application/vnd.ecowin.chart\":[\"mag\"],\"application/vnd.enliven\":[\"nml\"],\"application/vnd.epson.esf\":[\"esf\"],\"application/vnd.epson.msf\":[\"msf\"],\"application/vnd.epson.quickanime\":[\"qam\"],\"application/vnd.epson.salt\":[\"slt\"],\"application/vnd.epson.ssf\":[\"ssf\"],\"application/vnd.eszigno3+xml\":[\"es3\",\"et3\"],\"application/vnd.ezpix-album\":[\"ez2\"],\"application/vnd.ezpix-package\":[\"ez3\"],\"application/vnd.fdf\":[\"fdf\"],\"application/vnd.fdsn.mseed\":[\"mseed\"],\"application/vnd.fdsn.seed\":[\"seed\",\"dataless\"],\"application/vnd.flographit\":[\"gph\"],\"application/vnd.fluxtime.clip\":[\"ftc\"],\"application/vnd.framemaker\":[\"fm\",\"frame\",\"maker\",\"book\"],\"application/vnd.frogans.fnc\":[\"fnc\"],\"application/vnd.frogans.ltf\":[\"ltf\"],\"application/vnd.fsc.weblaunch\":[\"fsc\"],\"application/vnd.fujitsu.oasys\":[\"oas\"],\"application/vnd.fujitsu.oasys2\":[\"oa2\"],\"application/vnd.fujitsu.oasys3\":[\"oa3\"],\"application/vnd.fujitsu.oasysgp\":[\"fg5\"],\"application/vnd.fujitsu.oasysprs\":[\"bh2\"],\"application/vnd.fujixerox.ddd\":[\"ddd\"],\"application/vnd.fujixerox.docuworks\":[\"xdw\"],\"application/vnd.fujixerox.docuworks.binder\":[\"xbd\"],\"application/vnd.fuzzysheet\":[\"fzs\"],\"application/vnd.genomatix.tuxedo\":[\"txd\"],\"application/vnd.geogebra.file\":[\"ggb\"],\"application/vnd.geogebra.tool\":[\"ggt\"],\"application/vnd.geometry-explorer\":[\"gex\",\"gre\"],\"application/vnd.geonext\":[\"gxt\"],\"application/vnd.geoplan\":[\"g2w\"],\"application/vnd.geospace\":[\"g3w\"],\"application/vnd.gmx\":[\"gmx\"],\"application/vnd.google-apps.document\":[\"gdoc\"],\"application/vnd.google-apps.presentation\":[\"gslides\"],\"application/vnd.google-apps.spreadsheet\":[\"gsheet\"],\"application/vnd.google-earth.kml+xml\":[\"kml\"],\"application/vnd.google-earth.kmz\":[\"kmz\"],\"application/vnd.grafeq\":[\"gqf\",\"gqs\"],\"application/vnd.groove-account\":[\"gac\"],\"application/vnd.groove-help\":[\"ghf\"],\"application/vnd.groove-identity-message\":[\"gim\"],\"application/vnd.groove-injector\":[\"grv\"],\"application/vnd.groove-tool-message\":[\"gtm\"],\"application/vnd.groove-tool-template\":[\"tpl\"],\"application/vnd.groove-vcard\":[\"vcg\"],\"application/vnd.hal+xml\":[\"hal\"],\"application/vnd.handheld-entertainment+xml\":[\"zmm\"],\"application/vnd.hbci\":[\"hbci\"],\"application/vnd.hhe.lesson-player\":[\"les\"],\"application/vnd.hp-hpgl\":[\"hpgl\"],\"application/vnd.hp-hpid\":[\"hpid\"],\"application/vnd.hp-hps\":[\"hps\"],\"application/vnd.hp-jlyt\":[\"jlt\"],\"application/vnd.hp-pcl\":[\"pcl\"],\"application/vnd.hp-pclxl\":[\"pclxl\"],\"application/vnd.hydrostatix.sof-data\":[\"sfd-hdstx\"],\"application/vnd.ibm.minipay\":[\"mpy\"],\"application/vnd.ibm.modcap\":[\"afp\",\"listafp\",\"list3820\"],\"application/vnd.ibm.rights-management\":[\"irm\"],\"application/vnd.ibm.secure-container\":[\"sc\"],\"application/vnd.iccprofile\":[\"icc\",\"icm\"],\"application/vnd.igloader\":[\"igl\"],\"application/vnd.immervision-ivp\":[\"ivp\"],\"application/vnd.immervision-ivu\":[\"ivu\"],\"application/vnd.insors.igm\":[\"igm\"],\"application/vnd.intercon.formnet\":[\"xpw\",\"xpx\"],\"application/vnd.intergeo\":[\"i2g\"],\"application/vnd.intu.qbo\":[\"qbo\"],\"application/vnd.intu.qfx\":[\"qfx\"],\"application/vnd.ipunplugged.rcprofile\":[\"rcprofile\"],\"application/vnd.irepository.package+xml\":[\"irp\"],\"application/vnd.is-xpr\":[\"xpr\"],\"application/vnd.isac.fcs\":[\"fcs\"],\"application/vnd.jam\":[\"jam\"],\"application/vnd.jcp.javame.midlet-rms\":[\"rms\"],\"application/vnd.jisp\":[\"jisp\"],\"application/vnd.joost.joda-archive\":[\"joda\"],\"application/vnd.kahootz\":[\"ktz\",\"ktr\"],\"application/vnd.kde.karbon\":[\"karbon\"],\"application/vnd.kde.kchart\":[\"chrt\"],\"application/vnd.kde.kformula\":[\"kfo\"],\"application/vnd.kde.kivio\":[\"flw\"],\"application/vnd.kde.kontour\":[\"kon\"],\"application/vnd.kde.kpresenter\":[\"kpr\",\"kpt\"],\"application/vnd.kde.kspread\":[\"ksp\"],\"application/vnd.kde.kword\":[\"kwd\",\"kwt\"],\"application/vnd.kenameaapp\":[\"htke\"],\"application/vnd.kidspiration\":[\"kia\"],\"application/vnd.kinar\":[\"kne\",\"knp\"],\"application/vnd.koan\":[\"skp\",\"skd\",\"skt\",\"skm\"],\"application/vnd.kodak-descriptor\":[\"sse\"],\"application/vnd.las.las+xml\":[\"lasxml\"],\"application/vnd.llamagraphics.life-balance.desktop\":[\"lbd\"],\"application/vnd.llamagraphics.life-balance.exchange+xml\":[\"lbe\"],\"application/vnd.lotus-1-2-3\":[\"123\"],\"application/vnd.lotus-approach\":[\"apr\"],\"application/vnd.lotus-freelance\":[\"pre\"],\"application/vnd.lotus-notes\":[\"nsf\"],\"application/vnd.lotus-organizer\":[\"org\"],\"application/vnd.lotus-screencam\":[\"scm\"],\"application/vnd.lotus-wordpro\":[\"lwp\"],\"application/vnd.macports.portpkg\":[\"portpkg\"],\"application/vnd.mapbox-vector-tile\":[\"mvt\"],\"application/vnd.mcd\":[\"mcd\"],\"application/vnd.medcalcdata\":[\"mc1\"],\"application/vnd.mediastation.cdkey\":[\"cdkey\"],\"application/vnd.mfer\":[\"mwf\"],\"application/vnd.mfmp\":[\"mfm\"],\"application/vnd.micrografx.flo\":[\"flo\"],\"application/vnd.micrografx.igx\":[\"igx\"],\"application/vnd.mif\":[\"mif\"],\"application/vnd.mobius.daf\":[\"daf\"],\"application/vnd.mobius.dis\":[\"dis\"],\"application/vnd.mobius.mbk\":[\"mbk\"],\"application/vnd.mobius.mqy\":[\"mqy\"],\"application/vnd.mobius.msl\":[\"msl\"],\"application/vnd.mobius.plc\":[\"plc\"],\"application/vnd.mobius.txf\":[\"txf\"],\"application/vnd.mophun.application\":[\"mpn\"],\"application/vnd.mophun.certificate\":[\"mpc\"],\"application/vnd.mozilla.xul+xml\":[\"xul\"],\"application/vnd.ms-artgalry\":[\"cil\"],\"application/vnd.ms-cab-compressed\":[\"cab\"],\"application/vnd.ms-excel\":[\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"],\"application/vnd.ms-excel.addin.macroenabled.12\":[\"xlam\"],\"application/vnd.ms-excel.sheet.binary.macroenabled.12\":[\"xlsb\"],\"application/vnd.ms-excel.sheet.macroenabled.12\":[\"xlsm\"],\"application/vnd.ms-excel.template.macroenabled.12\":[\"xltm\"],\"application/vnd.ms-fontobject\":[\"eot\"],\"application/vnd.ms-htmlhelp\":[\"chm\"],\"application/vnd.ms-ims\":[\"ims\"],\"application/vnd.ms-lrm\":[\"lrm\"],\"application/vnd.ms-officetheme\":[\"thmx\"],\"application/vnd.ms-outlook\":[\"msg\"],\"application/vnd.ms-pki.seccat\":[\"cat\"],\"application/vnd.ms-pki.stl\":[\"*stl\"],\"application/vnd.ms-powerpoint\":[\"ppt\",\"pps\",\"pot\"],\"application/vnd.ms-powerpoint.addin.macroenabled.12\":[\"ppam\"],\"application/vnd.ms-powerpoint.presentation.macroenabled.12\":[\"pptm\"],\"application/vnd.ms-powerpoint.slide.macroenabled.12\":[\"sldm\"],\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\":[\"ppsm\"],\"application/vnd.ms-powerpoint.template.macroenabled.12\":[\"potm\"],\"application/vnd.ms-project\":[\"mpp\",\"mpt\"],\"application/vnd.ms-word.document.macroenabled.12\":[\"docm\"],\"application/vnd.ms-word.template.macroenabled.12\":[\"dotm\"],\"application/vnd.ms-works\":[\"wps\",\"wks\",\"wcm\",\"wdb\"],\"application/vnd.ms-wpl\":[\"wpl\"],\"application/vnd.ms-xpsdocument\":[\"xps\"],\"application/vnd.mseq\":[\"mseq\"],\"application/vnd.musician\":[\"mus\"],\"application/vnd.muvee.style\":[\"msty\"],\"application/vnd.mynfc\":[\"taglet\"],\"application/vnd.neurolanguage.nlu\":[\"nlu\"],\"application/vnd.nitf\":[\"ntf\",\"nitf\"],\"application/vnd.noblenet-directory\":[\"nnd\"],\"application/vnd.noblenet-sealer\":[\"nns\"],\"application/vnd.noblenet-web\":[\"nnw\"],\"application/vnd.nokia.n-gage.ac+xml\":[\"*ac\"],\"application/vnd.nokia.n-gage.data\":[\"ngdat\"],\"application/vnd.nokia.n-gage.symbian.install\":[\"n-gage\"],\"application/vnd.nokia.radio-preset\":[\"rpst\"],\"application/vnd.nokia.radio-presets\":[\"rpss\"],\"application/vnd.novadigm.edm\":[\"edm\"],\"application/vnd.novadigm.edx\":[\"edx\"],\"application/vnd.novadigm.ext\":[\"ext\"],\"application/vnd.oasis.opendocument.chart\":[\"odc\"],\"application/vnd.oasis.opendocument.chart-template\":[\"otc\"],\"application/vnd.oasis.opendocument.database\":[\"odb\"],\"application/vnd.oasis.opendocument.formula\":[\"odf\"],\"application/vnd.oasis.opendocument.formula-template\":[\"odft\"],\"application/vnd.oasis.opendocument.graphics\":[\"odg\"],\"application/vnd.oasis.opendocument.graphics-template\":[\"otg\"],\"application/vnd.oasis.opendocument.image\":[\"odi\"],\"application/vnd.oasis.opendocument.image-template\":[\"oti\"],\"application/vnd.oasis.opendocument.presentation\":[\"odp\"],\"application/vnd.oasis.opendocument.presentation-template\":[\"otp\"],\"application/vnd.oasis.opendocument.spreadsheet\":[\"ods\"],\"application/vnd.oasis.opendocument.spreadsheet-template\":[\"ots\"],\"application/vnd.oasis.opendocument.text\":[\"odt\"],\"application/vnd.oasis.opendocument.text-master\":[\"odm\"],\"application/vnd.oasis.opendocument.text-template\":[\"ott\"],\"application/vnd.oasis.opendocument.text-web\":[\"oth\"],\"application/vnd.olpc-sugar\":[\"xo\"],\"application/vnd.oma.dd2+xml\":[\"dd2\"],\"application/vnd.openblox.game+xml\":[\"obgx\"],\"application/vnd.openofficeorg.extension\":[\"oxt\"],\"application/vnd.openstreetmap.data+xml\":[\"osm\"],\"application/vnd.openxmlformats-officedocument.presentationml.presentation\":[\"pptx\"],\"application/vnd.openxmlformats-officedocument.presentationml.slide\":[\"sldx\"],\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\":[\"ppsx\"],\"application/vnd.openxmlformats-officedocument.presentationml.template\":[\"potx\"],\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":[\"xlsx\"],\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\":[\"xltx\"],\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":[\"docx\"],\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\":[\"dotx\"],\"application/vnd.osgeo.mapguide.package\":[\"mgp\"],\"application/vnd.osgi.dp\":[\"dp\"],\"application/vnd.osgi.subsystem\":[\"esa\"],\"application/vnd.palm\":[\"pdb\",\"pqa\",\"oprc\"],\"application/vnd.pawaafile\":[\"paw\"],\"application/vnd.pg.format\":[\"str\"],\"application/vnd.pg.osasli\":[\"ei6\"],\"application/vnd.picsel\":[\"efif\"],\"application/vnd.pmi.widget\":[\"wg\"],\"application/vnd.pocketlearn\":[\"plf\"],\"application/vnd.powerbuilder6\":[\"pbd\"],\"application/vnd.previewsystems.box\":[\"box\"],\"application/vnd.proteus.magazine\":[\"mgz\"],\"application/vnd.publishare-delta-tree\":[\"qps\"],\"application/vnd.pvi.ptid1\":[\"ptid\"],\"application/vnd.quark.quarkxpress\":[\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"],\"application/vnd.rar\":[\"rar\"],\"application/vnd.realvnc.bed\":[\"bed\"],\"application/vnd.recordare.musicxml\":[\"mxl\"],\"application/vnd.recordare.musicxml+xml\":[\"musicxml\"],\"application/vnd.rig.cryptonote\":[\"cryptonote\"],\"application/vnd.rim.cod\":[\"cod\"],\"application/vnd.rn-realmedia\":[\"rm\"],\"application/vnd.rn-realmedia-vbr\":[\"rmvb\"],\"application/vnd.route66.link66+xml\":[\"link66\"],\"application/vnd.sailingtracker.track\":[\"st\"],\"application/vnd.seemail\":[\"see\"],\"application/vnd.sema\":[\"sema\"],\"application/vnd.semd\":[\"semd\"],\"application/vnd.semf\":[\"semf\"],\"application/vnd.shana.informed.formdata\":[\"ifm\"],\"application/vnd.shana.informed.formtemplate\":[\"itp\"],\"application/vnd.shana.informed.interchange\":[\"iif\"],\"application/vnd.shana.informed.package\":[\"ipk\"],\"application/vnd.simtech-mindmapper\":[\"twd\",\"twds\"],\"application/vnd.smaf\":[\"mmf\"],\"application/vnd.smart.teacher\":[\"teacher\"],\"application/vnd.software602.filler.form+xml\":[\"fo\"],\"application/vnd.solent.sdkm+xml\":[\"sdkm\",\"sdkd\"],\"application/vnd.spotfire.dxp\":[\"dxp\"],\"application/vnd.spotfire.sfs\":[\"sfs\"],\"application/vnd.stardivision.calc\":[\"sdc\"],\"application/vnd.stardivision.draw\":[\"sda\"],\"application/vnd.stardivision.impress\":[\"sdd\"],\"application/vnd.stardivision.math\":[\"smf\"],\"application/vnd.stardivision.writer\":[\"sdw\",\"vor\"],\"application/vnd.stardivision.writer-global\":[\"sgl\"],\"application/vnd.stepmania.package\":[\"smzip\"],\"application/vnd.stepmania.stepchart\":[\"sm\"],\"application/vnd.sun.wadl+xml\":[\"wadl\"],\"application/vnd.sun.xml.calc\":[\"sxc\"],\"application/vnd.sun.xml.calc.template\":[\"stc\"],\"application/vnd.sun.xml.draw\":[\"sxd\"],\"application/vnd.sun.xml.draw.template\":[\"std\"],\"application/vnd.sun.xml.impress\":[\"sxi\"],\"application/vnd.sun.xml.impress.template\":[\"sti\"],\"application/vnd.sun.xml.math\":[\"sxm\"],\"application/vnd.sun.xml.writer\":[\"sxw\"],\"application/vnd.sun.xml.writer.global\":[\"sxg\"],\"application/vnd.sun.xml.writer.template\":[\"stw\"],\"application/vnd.sus-calendar\":[\"sus\",\"susp\"],\"application/vnd.svd\":[\"svd\"],\"application/vnd.symbian.install\":[\"sis\",\"sisx\"],\"application/vnd.syncml+xml\":[\"xsm\"],\"application/vnd.syncml.dm+wbxml\":[\"bdm\"],\"application/vnd.syncml.dm+xml\":[\"xdm\"],\"application/vnd.syncml.dmddf+xml\":[\"ddf\"],\"application/vnd.tao.intent-module-archive\":[\"tao\"],\"application/vnd.tcpdump.pcap\":[\"pcap\",\"cap\",\"dmp\"],\"application/vnd.tmobile-livetv\":[\"tmo\"],\"application/vnd.trid.tpt\":[\"tpt\"],\"application/vnd.triscape.mxs\":[\"mxs\"],\"application/vnd.trueapp\":[\"tra\"],\"application/vnd.ufdl\":[\"ufd\",\"ufdl\"],\"application/vnd.uiq.theme\":[\"utz\"],\"application/vnd.umajin\":[\"umj\"],\"application/vnd.unity\":[\"unityweb\"],\"application/vnd.uoml+xml\":[\"uoml\"],\"application/vnd.vcx\":[\"vcx\"],\"application/vnd.visio\":[\"vsd\",\"vst\",\"vss\",\"vsw\"],\"application/vnd.visionary\":[\"vis\"],\"application/vnd.vsf\":[\"vsf\"],\"application/vnd.wap.wbxml\":[\"wbxml\"],\"application/vnd.wap.wmlc\":[\"wmlc\"],\"application/vnd.wap.wmlscriptc\":[\"wmlsc\"],\"application/vnd.webturbo\":[\"wtb\"],\"application/vnd.wolfram.player\":[\"nbp\"],\"application/vnd.wordperfect\":[\"wpd\"],\"application/vnd.wqd\":[\"wqd\"],\"application/vnd.wt.stf\":[\"stf\"],\"application/vnd.xara\":[\"xar\"],\"application/vnd.xfdl\":[\"xfdl\"],\"application/vnd.yamaha.hv-dic\":[\"hvd\"],\"application/vnd.yamaha.hv-script\":[\"hvs\"],\"application/vnd.yamaha.hv-voice\":[\"hvp\"],\"application/vnd.yamaha.openscoreformat\":[\"osf\"],\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":[\"osfpvg\"],\"application/vnd.yamaha.smaf-audio\":[\"saf\"],\"application/vnd.yamaha.smaf-phrase\":[\"spf\"],\"application/vnd.yellowriver-custom-menu\":[\"cmp\"],\"application/vnd.zul\":[\"zir\",\"zirz\"],\"application/vnd.zzazz.deck+xml\":[\"zaz\"],\"application/x-7z-compressed\":[\"7z\"],\"application/x-abiword\":[\"abw\"],\"application/x-ace-compressed\":[\"ace\"],\"application/x-apple-diskimage\":[\"*dmg\"],\"application/x-arj\":[\"arj\"],\"application/x-authorware-bin\":[\"aab\",\"x32\",\"u32\",\"vox\"],\"application/x-authorware-map\":[\"aam\"],\"application/x-authorware-seg\":[\"aas\"],\"application/x-bcpio\":[\"bcpio\"],\"application/x-bdoc\":[\"*bdoc\"],\"application/x-bittorrent\":[\"torrent\"],\"application/x-blorb\":[\"blb\",\"blorb\"],\"application/x-bzip\":[\"bz\"],\"application/x-bzip2\":[\"bz2\",\"boz\"],\"application/x-cbr\":[\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"],\"application/x-cdlink\":[\"vcd\"],\"application/x-cfs-compressed\":[\"cfs\"],\"application/x-chat\":[\"chat\"],\"application/x-chess-pgn\":[\"pgn\"],\"application/x-chrome-extension\":[\"crx\"],\"application/x-cocoa\":[\"cco\"],\"application/x-conference\":[\"nsc\"],\"application/x-cpio\":[\"cpio\"],\"application/x-csh\":[\"csh\"],\"application/x-debian-package\":[\"*deb\",\"udeb\"],\"application/x-dgc-compressed\":[\"dgc\"],\"application/x-director\":[\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"],\"application/x-doom\":[\"wad\"],\"application/x-dtbncx+xml\":[\"ncx\"],\"application/x-dtbook+xml\":[\"dtb\"],\"application/x-dtbresource+xml\":[\"res\"],\"application/x-dvi\":[\"dvi\"],\"application/x-envoy\":[\"evy\"],\"application/x-eva\":[\"eva\"],\"application/x-font-bdf\":[\"bdf\"],\"application/x-font-ghostscript\":[\"gsf\"],\"application/x-font-linux-psf\":[\"psf\"],\"application/x-font-pcf\":[\"pcf\"],\"application/x-font-snf\":[\"snf\"],\"application/x-font-type1\":[\"pfa\",\"pfb\",\"pfm\",\"afm\"],\"application/x-freearc\":[\"arc\"],\"application/x-futuresplash\":[\"spl\"],\"application/x-gca-compressed\":[\"gca\"],\"application/x-glulx\":[\"ulx\"],\"application/x-gnumeric\":[\"gnumeric\"],\"application/x-gramps-xml\":[\"gramps\"],\"application/x-gtar\":[\"gtar\"],\"application/x-hdf\":[\"hdf\"],\"application/x-httpd-php\":[\"php\"],\"application/x-install-instructions\":[\"install\"],\"application/x-iso9660-image\":[\"*iso\"],\"application/x-iwork-keynote-sffkey\":[\"*key\"],\"application/x-iwork-numbers-sffnumbers\":[\"*numbers\"],\"application/x-iwork-pages-sffpages\":[\"*pages\"],\"application/x-java-archive-diff\":[\"jardiff\"],\"application/x-java-jnlp-file\":[\"jnlp\"],\"application/x-keepass2\":[\"kdbx\"],\"application/x-latex\":[\"latex\"],\"application/x-lua-bytecode\":[\"luac\"],\"application/x-lzh-compressed\":[\"lzh\",\"lha\"],\"application/x-makeself\":[\"run\"],\"application/x-mie\":[\"mie\"],\"application/x-mobipocket-ebook\":[\"prc\",\"mobi\"],\"application/x-ms-application\":[\"application\"],\"application/x-ms-shortcut\":[\"lnk\"],\"application/x-ms-wmd\":[\"wmd\"],\"application/x-ms-wmz\":[\"wmz\"],\"application/x-ms-xbap\":[\"xbap\"],\"application/x-msaccess\":[\"mdb\"],\"application/x-msbinder\":[\"obd\"],\"application/x-mscardfile\":[\"crd\"],\"application/x-msclip\":[\"clp\"],\"application/x-msdos-program\":[\"*exe\"],\"application/x-msdownload\":[\"*exe\",\"*dll\",\"com\",\"bat\",\"*msi\"],\"application/x-msmediaview\":[\"mvb\",\"m13\",\"m14\"],\"application/x-msmetafile\":[\"*wmf\",\"*wmz\",\"*emf\",\"emz\"],\"application/x-msmoney\":[\"mny\"],\"application/x-mspublisher\":[\"pub\"],\"application/x-msschedule\":[\"scd\"],\"application/x-msterminal\":[\"trm\"],\"application/x-mswrite\":[\"wri\"],\"application/x-netcdf\":[\"nc\",\"cdf\"],\"application/x-ns-proxy-autoconfig\":[\"pac\"],\"application/x-nzb\":[\"nzb\"],\"application/x-perl\":[\"pl\",\"pm\"],\"application/x-pilot\":[\"*prc\",\"*pdb\"],\"application/x-pkcs12\":[\"p12\",\"pfx\"],\"application/x-pkcs7-certificates\":[\"p7b\",\"spc\"],\"application/x-pkcs7-certreqresp\":[\"p7r\"],\"application/x-rar-compressed\":[\"*rar\"],\"application/x-redhat-package-manager\":[\"rpm\"],\"application/x-research-info-systems\":[\"ris\"],\"application/x-sea\":[\"sea\"],\"application/x-sh\":[\"sh\"],\"application/x-shar\":[\"shar\"],\"application/x-shockwave-flash\":[\"swf\"],\"application/x-silverlight-app\":[\"xap\"],\"application/x-sql\":[\"sql\"],\"application/x-stuffit\":[\"sit\"],\"application/x-stuffitx\":[\"sitx\"],\"application/x-subrip\":[\"srt\"],\"application/x-sv4cpio\":[\"sv4cpio\"],\"application/x-sv4crc\":[\"sv4crc\"],\"application/x-t3vm-image\":[\"t3\"],\"application/x-tads\":[\"gam\"],\"application/x-tar\":[\"tar\"],\"application/x-tcl\":[\"tcl\",\"tk\"],\"application/x-tex\":[\"tex\"],\"application/x-tex-tfm\":[\"tfm\"],\"application/x-texinfo\":[\"texinfo\",\"texi\"],\"application/x-tgif\":[\"*obj\"],\"application/x-ustar\":[\"ustar\"],\"application/x-virtualbox-hdd\":[\"hdd\"],\"application/x-virtualbox-ova\":[\"ova\"],\"application/x-virtualbox-ovf\":[\"ovf\"],\"application/x-virtualbox-vbox\":[\"vbox\"],\"application/x-virtualbox-vbox-extpack\":[\"vbox-extpack\"],\"application/x-virtualbox-vdi\":[\"vdi\"],\"application/x-virtualbox-vhd\":[\"vhd\"],\"application/x-virtualbox-vmdk\":[\"vmdk\"],\"application/x-wais-source\":[\"src\"],\"application/x-web-app-manifest+json\":[\"webapp\"],\"application/x-x509-ca-cert\":[\"der\",\"crt\",\"pem\"],\"application/x-xfig\":[\"fig\"],\"application/x-xliff+xml\":[\"*xlf\"],\"application/x-xpinstall\":[\"xpi\"],\"application/x-xz\":[\"xz\"],\"application/x-zmachine\":[\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"],\"audio/vnd.dece.audio\":[\"uva\",\"uvva\"],\"audio/vnd.digital-winds\":[\"eol\"],\"audio/vnd.dra\":[\"dra\"],\"audio/vnd.dts\":[\"dts\"],\"audio/vnd.dts.hd\":[\"dtshd\"],\"audio/vnd.lucent.voice\":[\"lvp\"],\"audio/vnd.ms-playready.media.pya\":[\"pya\"],\"audio/vnd.nuera.ecelp4800\":[\"ecelp4800\"],\"audio/vnd.nuera.ecelp7470\":[\"ecelp7470\"],\"audio/vnd.nuera.ecelp9600\":[\"ecelp9600\"],\"audio/vnd.rip\":[\"rip\"],\"audio/x-aac\":[\"aac\"],\"audio/x-aiff\":[\"aif\",\"aiff\",\"aifc\"],\"audio/x-caf\":[\"caf\"],\"audio/x-flac\":[\"flac\"],\"audio/x-m4a\":[\"*m4a\"],\"audio/x-matroska\":[\"mka\"],\"audio/x-mpegurl\":[\"m3u\"],\"audio/x-ms-wax\":[\"wax\"],\"audio/x-ms-wma\":[\"wma\"],\"audio/x-pn-realaudio\":[\"ram\",\"ra\"],\"audio/x-pn-realaudio-plugin\":[\"rmp\"],\"audio/x-realaudio\":[\"*ra\"],\"audio/x-wav\":[\"*wav\"],\"chemical/x-cdx\":[\"cdx\"],\"chemical/x-cif\":[\"cif\"],\"chemical/x-cmdf\":[\"cmdf\"],\"chemical/x-cml\":[\"cml\"],\"chemical/x-csml\":[\"csml\"],\"chemical/x-xyz\":[\"xyz\"],\"image/prs.btif\":[\"btif\"],\"image/prs.pti\":[\"pti\"],\"image/vnd.adobe.photoshop\":[\"psd\"],\"image/vnd.airzip.accelerator.azv\":[\"azv\"],\"image/vnd.dece.graphic\":[\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"],\"image/vnd.djvu\":[\"djvu\",\"djv\"],\"image/vnd.dvb.subtitle\":[\"*sub\"],\"image/vnd.dwg\":[\"dwg\"],\"image/vnd.dxf\":[\"dxf\"],\"image/vnd.fastbidsheet\":[\"fbs\"],\"image/vnd.fpx\":[\"fpx\"],\"image/vnd.fst\":[\"fst\"],\"image/vnd.fujixerox.edmics-mmr\":[\"mmr\"],\"image/vnd.fujixerox.edmics-rlc\":[\"rlc\"],\"image/vnd.microsoft.icon\":[\"ico\"],\"image/vnd.ms-dds\":[\"dds\"],\"image/vnd.ms-modi\":[\"mdi\"],\"image/vnd.ms-photo\":[\"wdp\"],\"image/vnd.net-fpx\":[\"npx\"],\"image/vnd.pco.b16\":[\"b16\"],\"image/vnd.tencent.tap\":[\"tap\"],\"image/vnd.valve.source.texture\":[\"vtf\"],\"image/vnd.wap.wbmp\":[\"wbmp\"],\"image/vnd.xiff\":[\"xif\"],\"image/vnd.zbrush.pcx\":[\"pcx\"],\"image/x-3ds\":[\"3ds\"],\"image/x-cmu-raster\":[\"ras\"],\"image/x-cmx\":[\"cmx\"],\"image/x-freehand\":[\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"],\"image/x-icon\":[\"*ico\"],\"image/x-jng\":[\"jng\"],\"image/x-mrsid-image\":[\"sid\"],\"image/x-ms-bmp\":[\"*bmp\"],\"image/x-pcx\":[\"*pcx\"],\"image/x-pict\":[\"pic\",\"pct\"],\"image/x-portable-anymap\":[\"pnm\"],\"image/x-portable-bitmap\":[\"pbm\"],\"image/x-portable-graymap\":[\"pgm\"],\"image/x-portable-pixmap\":[\"ppm\"],\"image/x-rgb\":[\"rgb\"],\"image/x-tga\":[\"tga\"],\"image/x-xbitmap\":[\"xbm\"],\"image/x-xpixmap\":[\"xpm\"],\"image/x-xwindowdump\":[\"xwd\"],\"message/vnd.wfa.wsc\":[\"wsc\"],\"model/vnd.collada+xml\":[\"dae\"],\"model/vnd.dwf\":[\"dwf\"],\"model/vnd.gdl\":[\"gdl\"],\"model/vnd.gtw\":[\"gtw\"],\"model/vnd.mts\":[\"mts\"],\"model/vnd.opengex\":[\"ogex\"],\"model/vnd.parasolid.transmit.binary\":[\"x_b\"],\"model/vnd.parasolid.transmit.text\":[\"x_t\"],\"model/vnd.sap.vds\":[\"vds\"],\"model/vnd.usdz+zip\":[\"usdz\"],\"model/vnd.valve.source.compiled-map\":[\"bsp\"],\"model/vnd.vtu\":[\"vtu\"],\"text/prs.lines.tag\":[\"dsc\"],\"text/vnd.curl\":[\"curl\"],\"text/vnd.curl.dcurl\":[\"dcurl\"],\"text/vnd.curl.mcurl\":[\"mcurl\"],\"text/vnd.curl.scurl\":[\"scurl\"],\"text/vnd.dvb.subtitle\":[\"sub\"],\"text/vnd.fly\":[\"fly\"],\"text/vnd.fmi.flexstor\":[\"flx\"],\"text/vnd.graphviz\":[\"gv\"],\"text/vnd.in3d.3dml\":[\"3dml\"],\"text/vnd.in3d.spot\":[\"spot\"],\"text/vnd.sun.j2me.app-descriptor\":[\"jad\"],\"text/vnd.wap.wml\":[\"wml\"],\"text/vnd.wap.wmlscript\":[\"wmls\"],\"text/x-asm\":[\"s\",\"asm\"],\"text/x-c\":[\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"],\"text/x-component\":[\"htc\"],\"text/x-fortran\":[\"f\",\"for\",\"f77\",\"f90\"],\"text/x-handlebars-template\":[\"hbs\"],\"text/x-java-source\":[\"java\"],\"text/x-lua\":[\"lua\"],\"text/x-markdown\":[\"mkd\"],\"text/x-nfo\":[\"nfo\"],\"text/x-opml\":[\"opml\"],\"text/x-org\":[\"*org\"],\"text/x-pascal\":[\"p\",\"pas\"],\"text/x-processing\":[\"pde\"],\"text/x-sass\":[\"sass\"],\"text/x-scss\":[\"scss\"],\"text/x-setext\":[\"etx\"],\"text/x-sfv\":[\"sfv\"],\"text/x-suse-ymp\":[\"ymp\"],\"text/x-uuencode\":[\"uu\"],\"text/x-vcalendar\":[\"vcs\"],\"text/x-vcard\":[\"vcf\"],\"video/vnd.dece.hd\":[\"uvh\",\"uvvh\"],\"video/vnd.dece.mobile\":[\"uvm\",\"uvvm\"],\"video/vnd.dece.pd\":[\"uvp\",\"uvvp\"],\"video/vnd.dece.sd\":[\"uvs\",\"uvvs\"],\"video/vnd.dece.video\":[\"uvv\",\"uvvv\"],\"video/vnd.dvb.file\":[\"dvb\"],\"video/vnd.fvt\":[\"fvt\"],\"video/vnd.mpegurl\":[\"mxu\",\"m4u\"],\"video/vnd.ms-playready.media.pyv\":[\"pyv\"],\"video/vnd.uvvu.mp4\":[\"uvu\",\"uvvu\"],\"video/vnd.vivo\":[\"viv\"],\"video/x-f4v\":[\"f4v\"],\"video/x-fli\":[\"fli\"],\"video/x-flv\":[\"flv\"],\"video/x-m4v\":[\"m4v\"],\"video/x-matroska\":[\"mkv\",\"mk3d\",\"mks\"],\"video/x-mng\":[\"mng\"],\"video/x-ms-asf\":[\"asf\",\"asx\"],\"video/x-ms-vob\":[\"vob\"],\"video/x-ms-wm\":[\"wm\"],\"video/x-ms-wmv\":[\"wmv\"],\"video/x-ms-wmx\":[\"wmx\"],\"video/x-ms-wvx\":[\"wvx\"],\"video/x-msvideo\":[\"avi\"],\"video/x-sgi-movie\":[\"movie\"],\"video/x-smv\":[\"smv\"],\"x-conference/x-cooltalk\":[\"ice\"]};","module.exports = {\"application/andrew-inset\":[\"ez\"],\"application/applixware\":[\"aw\"],\"application/atom+xml\":[\"atom\"],\"application/atomcat+xml\":[\"atomcat\"],\"application/atomdeleted+xml\":[\"atomdeleted\"],\"application/atomsvc+xml\":[\"atomsvc\"],\"application/atsc-dwd+xml\":[\"dwd\"],\"application/atsc-held+xml\":[\"held\"],\"application/atsc-rsat+xml\":[\"rsat\"],\"application/bdoc\":[\"bdoc\"],\"application/calendar+xml\":[\"xcs\"],\"application/ccxml+xml\":[\"ccxml\"],\"application/cdfx+xml\":[\"cdfx\"],\"application/cdmi-capability\":[\"cdmia\"],\"application/cdmi-container\":[\"cdmic\"],\"application/cdmi-domain\":[\"cdmid\"],\"application/cdmi-object\":[\"cdmio\"],\"application/cdmi-queue\":[\"cdmiq\"],\"application/cu-seeme\":[\"cu\"],\"application/dash+xml\":[\"mpd\"],\"application/davmount+xml\":[\"davmount\"],\"application/docbook+xml\":[\"dbk\"],\"application/dssc+der\":[\"dssc\"],\"application/dssc+xml\":[\"xdssc\"],\"application/ecmascript\":[\"es\",\"ecma\"],\"application/emma+xml\":[\"emma\"],\"application/emotionml+xml\":[\"emotionml\"],\"application/epub+zip\":[\"epub\"],\"application/exi\":[\"exi\"],\"application/express\":[\"exp\"],\"application/fdt+xml\":[\"fdt\"],\"application/font-tdpfr\":[\"pfr\"],\"application/geo+json\":[\"geojson\"],\"application/gml+xml\":[\"gml\"],\"application/gpx+xml\":[\"gpx\"],\"application/gxf\":[\"gxf\"],\"application/gzip\":[\"gz\"],\"application/hjson\":[\"hjson\"],\"application/hyperstudio\":[\"stk\"],\"application/inkml+xml\":[\"ink\",\"inkml\"],\"application/ipfix\":[\"ipfix\"],\"application/its+xml\":[\"its\"],\"application/java-archive\":[\"jar\",\"war\",\"ear\"],\"application/java-serialized-object\":[\"ser\"],\"application/java-vm\":[\"class\"],\"application/javascript\":[\"js\",\"mjs\"],\"application/json\":[\"json\",\"map\"],\"application/json5\":[\"json5\"],\"application/jsonml+json\":[\"jsonml\"],\"application/ld+json\":[\"jsonld\"],\"application/lgr+xml\":[\"lgr\"],\"application/lost+xml\":[\"lostxml\"],\"application/mac-binhex40\":[\"hqx\"],\"application/mac-compactpro\":[\"cpt\"],\"application/mads+xml\":[\"mads\"],\"application/manifest+json\":[\"webmanifest\"],\"application/marc\":[\"mrc\"],\"application/marcxml+xml\":[\"mrcx\"],\"application/mathematica\":[\"ma\",\"nb\",\"mb\"],\"application/mathml+xml\":[\"mathml\"],\"application/mbox\":[\"mbox\"],\"application/mediaservercontrol+xml\":[\"mscml\"],\"application/metalink+xml\":[\"metalink\"],\"application/metalink4+xml\":[\"meta4\"],\"application/mets+xml\":[\"mets\"],\"application/mmt-aei+xml\":[\"maei\"],\"application/mmt-usd+xml\":[\"musd\"],\"application/mods+xml\":[\"mods\"],\"application/mp21\":[\"m21\",\"mp21\"],\"application/mp4\":[\"mp4s\",\"m4p\"],\"application/msword\":[\"doc\",\"dot\"],\"application/mxf\":[\"mxf\"],\"application/n-quads\":[\"nq\"],\"application/n-triples\":[\"nt\"],\"application/node\":[\"cjs\"],\"application/octet-stream\":[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"],\"application/oda\":[\"oda\"],\"application/oebps-package+xml\":[\"opf\"],\"application/ogg\":[\"ogx\"],\"application/omdoc+xml\":[\"omdoc\"],\"application/onenote\":[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"],\"application/oxps\":[\"oxps\"],\"application/p2p-overlay+xml\":[\"relo\"],\"application/patch-ops-error+xml\":[\"xer\"],\"application/pdf\":[\"pdf\"],\"application/pgp-encrypted\":[\"pgp\"],\"application/pgp-signature\":[\"asc\",\"sig\"],\"application/pics-rules\":[\"prf\"],\"application/pkcs10\":[\"p10\"],\"application/pkcs7-mime\":[\"p7m\",\"p7c\"],\"application/pkcs7-signature\":[\"p7s\"],\"application/pkcs8\":[\"p8\"],\"application/pkix-attr-cert\":[\"ac\"],\"application/pkix-cert\":[\"cer\"],\"application/pkix-crl\":[\"crl\"],\"application/pkix-pkipath\":[\"pkipath\"],\"application/pkixcmp\":[\"pki\"],\"application/pls+xml\":[\"pls\"],\"application/postscript\":[\"ai\",\"eps\",\"ps\"],\"application/provenance+xml\":[\"provx\"],\"application/pskc+xml\":[\"pskcxml\"],\"application/raml+yaml\":[\"raml\"],\"application/rdf+xml\":[\"rdf\",\"owl\"],\"application/reginfo+xml\":[\"rif\"],\"application/relax-ng-compact-syntax\":[\"rnc\"],\"application/resource-lists+xml\":[\"rl\"],\"application/resource-lists-diff+xml\":[\"rld\"],\"application/rls-services+xml\":[\"rs\"],\"application/route-apd+xml\":[\"rapd\"],\"application/route-s-tsid+xml\":[\"sls\"],\"application/route-usd+xml\":[\"rusd\"],\"application/rpki-ghostbusters\":[\"gbr\"],\"application/rpki-manifest\":[\"mft\"],\"application/rpki-roa\":[\"roa\"],\"application/rsd+xml\":[\"rsd\"],\"application/rss+xml\":[\"rss\"],\"application/rtf\":[\"rtf\"],\"application/sbml+xml\":[\"sbml\"],\"application/scvp-cv-request\":[\"scq\"],\"application/scvp-cv-response\":[\"scs\"],\"application/scvp-vp-request\":[\"spq\"],\"application/scvp-vp-response\":[\"spp\"],\"application/sdp\":[\"sdp\"],\"application/senml+xml\":[\"senmlx\"],\"application/sensml+xml\":[\"sensmlx\"],\"application/set-payment-initiation\":[\"setpay\"],\"application/set-registration-initiation\":[\"setreg\"],\"application/shf+xml\":[\"shf\"],\"application/sieve\":[\"siv\",\"sieve\"],\"application/smil+xml\":[\"smi\",\"smil\"],\"application/sparql-query\":[\"rq\"],\"application/sparql-results+xml\":[\"srx\"],\"application/srgs\":[\"gram\"],\"application/srgs+xml\":[\"grxml\"],\"application/sru+xml\":[\"sru\"],\"application/ssdl+xml\":[\"ssdl\"],\"application/ssml+xml\":[\"ssml\"],\"application/swid+xml\":[\"swidtag\"],\"application/tei+xml\":[\"tei\",\"teicorpus\"],\"application/thraud+xml\":[\"tfi\"],\"application/timestamped-data\":[\"tsd\"],\"application/toml\":[\"toml\"],\"application/trig\":[\"trig\"],\"application/ttml+xml\":[\"ttml\"],\"application/ubjson\":[\"ubj\"],\"application/urc-ressheet+xml\":[\"rsheet\"],\"application/urc-targetdesc+xml\":[\"td\"],\"application/voicexml+xml\":[\"vxml\"],\"application/wasm\":[\"wasm\"],\"application/widget\":[\"wgt\"],\"application/winhlp\":[\"hlp\"],\"application/wsdl+xml\":[\"wsdl\"],\"application/wspolicy+xml\":[\"wspolicy\"],\"application/xaml+xml\":[\"xaml\"],\"application/xcap-att+xml\":[\"xav\"],\"application/xcap-caps+xml\":[\"xca\"],\"application/xcap-diff+xml\":[\"xdf\"],\"application/xcap-el+xml\":[\"xel\"],\"application/xcap-ns+xml\":[\"xns\"],\"application/xenc+xml\":[\"xenc\"],\"application/xhtml+xml\":[\"xhtml\",\"xht\"],\"application/xliff+xml\":[\"xlf\"],\"application/xml\":[\"xml\",\"xsl\",\"xsd\",\"rng\"],\"application/xml-dtd\":[\"dtd\"],\"application/xop+xml\":[\"xop\"],\"application/xproc+xml\":[\"xpl\"],\"application/xslt+xml\":[\"*xsl\",\"xslt\"],\"application/xspf+xml\":[\"xspf\"],\"application/xv+xml\":[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"],\"application/yang\":[\"yang\"],\"application/yin+xml\":[\"yin\"],\"application/zip\":[\"zip\"],\"audio/3gpp\":[\"*3gpp\"],\"audio/adpcm\":[\"adp\"],\"audio/amr\":[\"amr\"],\"audio/basic\":[\"au\",\"snd\"],\"audio/midi\":[\"mid\",\"midi\",\"kar\",\"rmi\"],\"audio/mobile-xmf\":[\"mxmf\"],\"audio/mp3\":[\"*mp3\"],\"audio/mp4\":[\"m4a\",\"mp4a\"],\"audio/mpeg\":[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"],\"audio/ogg\":[\"oga\",\"ogg\",\"spx\",\"opus\"],\"audio/s3m\":[\"s3m\"],\"audio/silk\":[\"sil\"],\"audio/wav\":[\"wav\"],\"audio/wave\":[\"*wav\"],\"audio/webm\":[\"weba\"],\"audio/xm\":[\"xm\"],\"font/collection\":[\"ttc\"],\"font/otf\":[\"otf\"],\"font/ttf\":[\"ttf\"],\"font/woff\":[\"woff\"],\"font/woff2\":[\"woff2\"],\"image/aces\":[\"exr\"],\"image/apng\":[\"apng\"],\"image/avif\":[\"avif\"],\"image/bmp\":[\"bmp\"],\"image/cgm\":[\"cgm\"],\"image/dicom-rle\":[\"drle\"],\"image/emf\":[\"emf\"],\"image/fits\":[\"fits\"],\"image/g3fax\":[\"g3\"],\"image/gif\":[\"gif\"],\"image/heic\":[\"heic\"],\"image/heic-sequence\":[\"heics\"],\"image/heif\":[\"heif\"],\"image/heif-sequence\":[\"heifs\"],\"image/hej2k\":[\"hej2\"],\"image/hsj2\":[\"hsj2\"],\"image/ief\":[\"ief\"],\"image/jls\":[\"jls\"],\"image/jp2\":[\"jp2\",\"jpg2\"],\"image/jpeg\":[\"jpeg\",\"jpg\",\"jpe\"],\"image/jph\":[\"jph\"],\"image/jphc\":[\"jhc\"],\"image/jpm\":[\"jpm\"],\"image/jpx\":[\"jpx\",\"jpf\"],\"image/jxr\":[\"jxr\"],\"image/jxra\":[\"jxra\"],\"image/jxrs\":[\"jxrs\"],\"image/jxs\":[\"jxs\"],\"image/jxsc\":[\"jxsc\"],\"image/jxsi\":[\"jxsi\"],\"image/jxss\":[\"jxss\"],\"image/ktx\":[\"ktx\"],\"image/ktx2\":[\"ktx2\"],\"image/png\":[\"png\"],\"image/sgi\":[\"sgi\"],\"image/svg+xml\":[\"svg\",\"svgz\"],\"image/t38\":[\"t38\"],\"image/tiff\":[\"tif\",\"tiff\"],\"image/tiff-fx\":[\"tfx\"],\"image/webp\":[\"webp\"],\"image/wmf\":[\"wmf\"],\"message/disposition-notification\":[\"disposition-notification\"],\"message/global\":[\"u8msg\"],\"message/global-delivery-status\":[\"u8dsn\"],\"message/global-disposition-notification\":[\"u8mdn\"],\"message/global-headers\":[\"u8hdr\"],\"message/rfc822\":[\"eml\",\"mime\"],\"model/3mf\":[\"3mf\"],\"model/gltf+json\":[\"gltf\"],\"model/gltf-binary\":[\"glb\"],\"model/iges\":[\"igs\",\"iges\"],\"model/mesh\":[\"msh\",\"mesh\",\"silo\"],\"model/mtl\":[\"mtl\"],\"model/obj\":[\"obj\"],\"model/step+xml\":[\"stpx\"],\"model/step+zip\":[\"stpz\"],\"model/step-xml+zip\":[\"stpxz\"],\"model/stl\":[\"stl\"],\"model/vrml\":[\"wrl\",\"vrml\"],\"model/x3d+binary\":[\"*x3db\",\"x3dbz\"],\"model/x3d+fastinfoset\":[\"x3db\"],\"model/x3d+vrml\":[\"*x3dv\",\"x3dvz\"],\"model/x3d+xml\":[\"x3d\",\"x3dz\"],\"model/x3d-vrml\":[\"x3dv\"],\"text/cache-manifest\":[\"appcache\",\"manifest\"],\"text/calendar\":[\"ics\",\"ifb\"],\"text/coffeescript\":[\"coffee\",\"litcoffee\"],\"text/css\":[\"css\"],\"text/csv\":[\"csv\"],\"text/html\":[\"html\",\"htm\",\"shtml\"],\"text/jade\":[\"jade\"],\"text/jsx\":[\"jsx\"],\"text/less\":[\"less\"],\"text/markdown\":[\"markdown\",\"md\"],\"text/mathml\":[\"mml\"],\"text/mdx\":[\"mdx\"],\"text/n3\":[\"n3\"],\"text/plain\":[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"],\"text/richtext\":[\"rtx\"],\"text/rtf\":[\"*rtf\"],\"text/sgml\":[\"sgml\",\"sgm\"],\"text/shex\":[\"shex\"],\"text/slim\":[\"slim\",\"slm\"],\"text/spdx\":[\"spdx\"],\"text/stylus\":[\"stylus\",\"styl\"],\"text/tab-separated-values\":[\"tsv\"],\"text/troff\":[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"],\"text/turtle\":[\"ttl\"],\"text/uri-list\":[\"uri\",\"uris\",\"urls\"],\"text/vcard\":[\"vcard\"],\"text/vtt\":[\"vtt\"],\"text/xml\":[\"*xml\"],\"text/yaml\":[\"yaml\",\"yml\"],\"video/3gpp\":[\"3gp\",\"3gpp\"],\"video/3gpp2\":[\"3g2\"],\"video/h261\":[\"h261\"],\"video/h263\":[\"h263\"],\"video/h264\":[\"h264\"],\"video/iso.segment\":[\"m4s\"],\"video/jpeg\":[\"jpgv\"],\"video/jpm\":[\"*jpm\",\"jpgm\"],\"video/mj2\":[\"mj2\",\"mjp2\"],\"video/mp2t\":[\"ts\"],\"video/mp4\":[\"mp4\",\"mp4v\",\"mpg4\"],\"video/mpeg\":[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"],\"video/ogg\":[\"ogv\"],\"video/quicktime\":[\"qt\",\"mov\"],\"video/webm\":[\"webm\"]};","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","var hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar $match = String.prototype.match;\nvar $slice = String.prototype.slice;\nvar $replace = String.prototype.replace;\nvar $toUpperCase = String.prototype.toUpperCase;\nvar $toLowerCase = String.prototype.toLowerCase;\nvar $test = RegExp.prototype.test;\nvar $concat = Array.prototype.concat;\nvar $join = Array.prototype.join;\nvar $arrSlice = Array.prototype.slice;\nvar $floor = Math.floor;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\n// ie, `has-tostringtag/shams\nvar toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')\n    ? Symbol.toStringTag\n    : null;\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n        ? function (O) {\n            return O.__proto__; // eslint-disable-line no-proto\n        }\n        : null\n);\n\nfunction addNumericSeparator(num, str) {\n    if (\n        num === Infinity\n        || num === -Infinity\n        || num !== num\n        || (num && num > -1000 && num < 1000)\n        || $test.call(/e/, str)\n    ) {\n        return str;\n    }\n    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;\n    if (typeof num === 'number') {\n        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)\n        if (int !== num) {\n            var intStr = String(int);\n            var dec = $slice.call(str, intStr.length + 1);\n            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');\n        }\n    }\n    return $replace.call(str, sepRegex, '$&_');\n}\n\nvar utilInspect = require('./util.inspect');\nvar inspectCustom = utilInspect.custom;\nvar inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n    var opts = options || {};\n\n    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {\n        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n    }\n    if (\n        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n            : opts.maxStringLength !== null\n        )\n    ) {\n        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n    }\n    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n        throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n    }\n\n    if (\n        has(opts, 'indent')\n        && opts.indent !== null\n        && opts.indent !== '\\t'\n        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n    ) {\n        throw new TypeError('option \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n    }\n    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {\n        throw new TypeError('option \"numericSeparator\", if provided, must be `true` or `false`');\n    }\n    var numericSeparator = opts.numericSeparator;\n\n    if (typeof obj === 'undefined') {\n        return 'undefined';\n    }\n    if (obj === null) {\n        return 'null';\n    }\n    if (typeof obj === 'boolean') {\n        return obj ? 'true' : 'false';\n    }\n\n    if (typeof obj === 'string') {\n        return inspectString(obj, opts);\n    }\n    if (typeof obj === 'number') {\n        if (obj === 0) {\n            return Infinity / obj > 0 ? '0' : '-0';\n        }\n        var str = String(obj);\n        return numericSeparator ? addNumericSeparator(obj, str) : str;\n    }\n    if (typeof obj === 'bigint') {\n        var bigIntStr = String(obj) + 'n';\n        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;\n    }\n\n    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n    if (typeof depth === 'undefined') { depth = 0; }\n    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n        return isArray(obj) ? '[Array]' : '[Object]';\n    }\n\n    var indent = getIndent(opts, depth);\n\n    if (typeof seen === 'undefined') {\n        seen = [];\n    } else if (indexOf(seen, obj) >= 0) {\n        return '[Circular]';\n    }\n\n    function inspect(value, from, noIndent) {\n        if (from) {\n            seen = $arrSlice.call(seen);\n            seen.push(from);\n        }\n        if (noIndent) {\n            var newOpts = {\n                depth: opts.depth\n            };\n            if (has(opts, 'quoteStyle')) {\n                newOpts.quoteStyle = opts.quoteStyle;\n            }\n            return inspect_(value, newOpts, depth + 1, seen);\n        }\n        return inspect_(value, opts, depth + 1, seen);\n    }\n\n    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable\n        var name = nameOf(obj);\n        var keys = arrObjKeys(obj, inspect);\n        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');\n    }\n    if (isSymbol(obj)) {\n        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n    }\n    if (isElement(obj)) {\n        var s = '<' + $toLowerCase.call(String(obj.nodeName));\n        var attrs = obj.attributes || [];\n        for (var i = 0; i < attrs.length; i++) {\n            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n        }\n        s += '>';\n        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';\n        return s;\n    }\n    if (isArray(obj)) {\n        if (obj.length === 0) { return '[]'; }\n        var xs = arrObjKeys(obj, inspect);\n        if (indent && !singleLineValues(xs)) {\n            return '[' + indentedJoin(xs, indent) + ']';\n        }\n        return '[ ' + $join.call(xs, ', ') + ' ]';\n    }\n    if (isError(obj)) {\n        var parts = arrObjKeys(obj, inspect);\n        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {\n            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';\n        }\n        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';\n    }\n    if (typeof obj === 'object' && customInspect) {\n        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {\n            return utilInspect(obj, { depth: maxDepth - depth });\n        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n            return obj.inspect();\n        }\n    }\n    if (isMap(obj)) {\n        var mapParts = [];\n        if (mapForEach) {\n            mapForEach.call(obj, function (value, key) {\n                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n            });\n        }\n        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n    }\n    if (isSet(obj)) {\n        var setParts = [];\n        if (setForEach) {\n            setForEach.call(obj, function (value) {\n                setParts.push(inspect(value, obj));\n            });\n        }\n        return collectionOf('Set', setSize.call(obj), setParts, indent);\n    }\n    if (isWeakMap(obj)) {\n        return weakCollectionOf('WeakMap');\n    }\n    if (isWeakSet(obj)) {\n        return weakCollectionOf('WeakSet');\n    }\n    if (isWeakRef(obj)) {\n        return weakCollectionOf('WeakRef');\n    }\n    if (isNumber(obj)) {\n        return markBoxed(inspect(Number(obj)));\n    }\n    if (isBigInt(obj)) {\n        return markBoxed(inspect(bigIntValueOf.call(obj)));\n    }\n    if (isBoolean(obj)) {\n        return markBoxed(booleanValueOf.call(obj));\n    }\n    if (isString(obj)) {\n        return markBoxed(inspect(String(obj)));\n    }\n    if (!isDate(obj) && !isRegExp(obj)) {\n        var ys = arrObjKeys(obj, inspect);\n        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n        var protoTag = obj instanceof Object ? '' : 'null prototype';\n        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';\n        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');\n        if (ys.length === 0) { return tag + '{}'; }\n        if (indent) {\n            return tag + '{' + indentedJoin(ys, indent) + '}';\n        }\n        return tag + '{ ' + $join.call(ys, ', ') + ' }';\n    }\n    return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n    return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n    return $replace.call(String(s), /\"/g, '&quot;');\n}\n\nfunction isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\n// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\nfunction isSymbol(obj) {\n    if (hasShammedSymbols) {\n        return obj && typeof obj === 'object' && obj instanceof Symbol;\n    }\n    if (typeof obj === 'symbol') {\n        return true;\n    }\n    if (!obj || typeof obj !== 'object' || !symToString) {\n        return false;\n    }\n    try {\n        symToString.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isBigInt(obj) {\n    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n        return false;\n    }\n    try {\n        bigIntValueOf.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\nfunction has(obj, key) {\n    return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n    return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n    if (f.name) { return f.name; }\n    var m = $match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n    if (m) { return m[1]; }\n    return null;\n}\n\nfunction indexOf(xs, x) {\n    if (xs.indexOf) { return xs.indexOf(x); }\n    for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x) { return i; }\n    }\n    return -1;\n}\n\nfunction isMap(x) {\n    if (!mapSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        mapSize.call(x);\n        try {\n            setSize.call(x);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof Map; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakMap(x) {\n    if (!weakMapHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakMapHas.call(x, weakMapHas);\n        try {\n            weakSetHas.call(x, weakSetHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakRef(x) {\n    if (!weakRefDeref || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakRefDeref.call(x);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isSet(x) {\n    if (!setSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        setSize.call(x);\n        try {\n            mapSize.call(x);\n        } catch (m) {\n            return true;\n        }\n        return x instanceof Set; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakSet(x) {\n    if (!weakSetHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakSetHas.call(x, weakSetHas);\n        try {\n            weakMapHas.call(x, weakMapHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isElement(x) {\n    if (!x || typeof x !== 'object') { return false; }\n    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n        return true;\n    }\n    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n    if (str.length > opts.maxStringLength) {\n        var remaining = str.length - opts.maxStringLength;\n        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;\n    }\n    // eslint-disable-next-line no-control-regex\n    var s = $replace.call($replace.call(str, /(['\\\\])/g, '\\\\$1'), /[\\x00-\\x1f]/g, lowbyte);\n    return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n    var n = c.charCodeAt(0);\n    var x = {\n        8: 'b',\n        9: 't',\n        10: 'n',\n        12: 'f',\n        13: 'r'\n    }[n];\n    if (x) { return '\\\\' + x; }\n    return '\\\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));\n}\n\nfunction markBoxed(str) {\n    return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n    return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');\n    return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n    for (var i = 0; i < xs.length; i++) {\n        if (indexOf(xs[i], '\\n') >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getIndent(opts, depth) {\n    var baseIndent;\n    if (opts.indent === '\\t') {\n        baseIndent = '\\t';\n    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n        baseIndent = $join.call(Array(opts.indent + 1), ' ');\n    } else {\n        return null;\n    }\n    return {\n        base: baseIndent,\n        prev: $join.call(Array(depth + 1), baseIndent)\n    };\n}\n\nfunction indentedJoin(xs, indent) {\n    if (xs.length === 0) { return ''; }\n    var lineJoiner = '\\n' + indent.prev + indent.base;\n    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n    var isArr = isArray(obj);\n    var xs = [];\n    if (isArr) {\n        xs.length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n        }\n    }\n    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n    var symMap;\n    if (hasShammedSymbols) {\n        symMap = {};\n        for (var k = 0; k < syms.length; k++) {\n            symMap['$' + syms[k]] = syms[k];\n        }\n    }\n\n    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        } else if ($test.call(/[^\\w$]/, key)) {\n            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n        } else {\n            xs.push(key + ': ' + inspect(obj[key], obj));\n        }\n    }\n    if (typeof gOPS === 'function') {\n        for (var j = 0; j < syms.length; j++) {\n            if (isEnumerable.call(obj, syms[j])) {\n                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n            }\n        }\n    }\n    return xs;\n}\n","module.exports = require('util').inspect;\n","var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n","'use strict';\n\nvar name = require('fn.name');\n\n/**\n * Wrap callbacks to prevent double execution.\n *\n * @param {Function} fn Function that should only be called once.\n * @returns {Function} A wrapped callback which prevents multiple executions.\n * @public\n */\nmodule.exports = function one(fn) {\n  var called = 0\n    , value;\n\n  /**\n   * The function that prevents double execution.\n   *\n   * @private\n   */\n  function onetime() {\n    if (called) return value;\n\n    called = 1;\n    value = fn.apply(this, arguments);\n    fn = null;\n\n    return value;\n  }\n\n  //\n  // To make debugging more easy we want to use the name of the supplied\n  // function. So when you look at the functions that are assigned to event\n  // listeners you don't see a load of `onetime` functions but actually the\n  // names of the functions that this module will call.\n  //\n  // NOTE: We cannot override the `name` property, as that is `readOnly`\n  // property, so displayName will have to do.\n  //\n  onetime.displayName = name(fn);\n  return onetime;\n};\n","'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n","'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n","'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = {};\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n            val = utils.maybeMap(\n                parseArrayValue(part.slice(pos + 1), options),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(val);\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        if (has.call(obj, key)) {\n            obj[key] = utils.combine(obj[key], val);\n        } else {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var index = parseInt(cleanRoot, 10);\n            if (!options.parseArrays && cleanRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== cleanRoot\n                && String(index) === cleanRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (cleanRoot !== '__proto__') {\n                obj[cleanRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    return {\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n","'use strict';\n\nvar getSideChannel = require('side-channel');\nvar utils = require('./utils');\nvar formats = require('./formats');\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar split = String.prototype.split;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    commaRoundTrip,\n    strictNullHandling,\n    skipNulls,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            if (generateArrayPrefix === 'comma' && encodeValuesOnly) {\n                var valuesArray = split.call(String(obj), ',');\n                var valuesJoined = '';\n                for (var i = 0; i < valuesArray.length; ++i) {\n                    valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults.encoder, charset, 'value', format));\n                }\n                return [formatter(keyValue) + (commaRoundTrip && isArray(obj) && valuesArray.length === 1 ? '[]' : '') + '=' + valuesJoined];\n            }\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix\n            : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            commaRoundTrip,\n            strictNullHandling,\n            skipNulls,\n            encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var arrayFormat;\n    if (opts && opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if (opts && 'indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = 'indices';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n    if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n    var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            commaRoundTrip,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n","'use strict';\n\nvar formats = require('./formats');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var i = 0; i < string.length; ++i) {\n        var c = string.charCodeAt(i);\n\n        if (\n            c === 0x2D // -\n            || c === 0x2E // .\n            || c === 0x5F // _\n            || c === 0x7E // ~\n            || (c >= 0x30 && c <= 0x39) // 0-9\n            || (c >= 0x41 && c <= 0x5A) // a-z\n            || (c >= 0x61 && c <= 0x7A) // A-Z\n            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n        ) {\n            out += string.charAt(i);\n            continue;\n        }\n\n        if (c < 0x80) {\n            out = out + hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        i += 1;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));\n        /* eslint operator-linebreak: [2, \"before\"] */\n        out += hexTable[0xF0 | (c >> 18)]\n            + hexTable[0x80 | ((c >> 12) & 0x3F)]\n            + hexTable[0x80 | ((c >> 6) & 0x3F)]\n            + hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n","'use strict';\n\nconst codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error\n  }\n\n  function getMessage (arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message\n    } else {\n      return message(arg1, arg2, arg3)\n    }\n  }\n\n  class NodeError extends Base {\n    constructor (arg1, arg2, arg3) {\n      super(getMessage(arg1, arg2, arg3));\n    }\n  }\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n\n  codes[code] = NodeError;\n}\n\n// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    const len = expected.length;\n    expected = expected.map((i) => String(i));\n    if (len > 2) {\n      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +\n             expected[len - 1];\n    } else if (len === 2) {\n      return `one of ${thing} ${expected[0]} or ${expected[1]}`;\n    } else {\n      return `of ${thing} ${expected[0]}`;\n    }\n  } else {\n    return `of ${thing} ${String(expected)}`;\n  }\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\nfunction startsWith(str, search, pos) {\n\treturn str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\nfunction endsWith(str, search, this_len) {\n\tif (this_len === undefined || this_len > str.length) {\n\t\tthis_len = str.length;\n\t}\n\treturn str.substring(this_len - search.length, this_len) === search;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"'\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  let determiner;\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  let msg;\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;\n  } else {\n    const type = includes(name, '.') ? 'property' : 'argument';\n    msg = `The \"${name}\" ${type} ${determiner} ${oneOf(expected, 'type')}`;\n  }\n\n  msg += `. Received type ${typeof actual}`;\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented'\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\n\nmodule.exports.codes = codes;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\nrequire('inherits')(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = require('util');\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = require('./internal/streams/buffer_list');\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\nrequire('inherits')(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};","'use strict';\n\nvar _Object$setPrototypeO;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar finished = require('./end-of-stream');\n\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\n\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\n\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n\n  if (resolve !== null) {\n    var data = iter[kStream].read(); // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\n\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\n\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\n\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n\n  next: function next() {\n    var _this = this;\n\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    } // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n\n\n    var lastPromise = this[kLastPromise];\n    var promise;\n\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n\n      promise = new Promise(this[kHandlePromise]);\n    }\n\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\n\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n\n      iterator[kError] = err;\n      return;\n    }\n\n    var resolve = iterator[kLastResolve];\n\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\n\nmodule.exports = createReadableStreamAsyncIterator;","'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('util'),\n    inspect = _require2.inspect;\n\nvar custom = inspect && inspect.custom || 'inspect';\n\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n\n      while (p = p.next) {\n        ret += s + p.data;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n\n      return ret;\n    } // Consumes a specified amount of bytes or characters from the buffered data.\n\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    } // Consumes a specified amount of characters from the buffered data.\n\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Consumes a specified amount of bytes from the buffered data.\n\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Make sure the linked list only shows the minimal necessary information.\n\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread({}, options, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n\n  return BufferList;\n}();","'use strict'; // undocumented cb() API, needed for core, not for public API\n\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n\n    return this;\n  } // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  } // if this is a duplex stream mark the writable part as destroyed as well\n\n\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n\n  return this;\n}\n\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\n\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};","// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;","'use strict';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar ERR_INVALID_ARG_TYPE = require('../../../errors').codes.ERR_INVALID_ARG_TYPE;\n\nfunction from(Readable, iterable, opts) {\n  var iterator;\n\n  if (iterable && typeof iterable.next === 'function') {\n    iterator = iterable;\n  } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);\n\n  var readable = new Readable(_objectSpread({\n    objectMode: true\n  }, opts)); // Reading boolean to protect against _read\n  // being called before last iteration completion.\n\n  var reading = false;\n\n  readable._read = function () {\n    if (!reading) {\n      reading = true;\n      next();\n    }\n  };\n\n  function next() {\n    return _next2.apply(this, arguments);\n  }\n\n  function _next2() {\n    _next2 = _asyncToGenerator(function* () {\n      try {\n        var _ref = yield iterator.next(),\n            value = _ref.value,\n            done = _ref.done;\n\n        if (done) {\n          readable.push(null);\n        } else if (readable.push((yield value))) {\n          next();\n        } else {\n          reading = false;\n        }\n      } catch (err) {\n        readable.destroy(err);\n      }\n    });\n    return _next2.apply(this, arguments);\n  }\n\n  return readable;\n}\n\nmodule.exports = from;","// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = require('../../../errors').codes,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;","'use strict';\n\nvar ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n\n    return Math.floor(hwm);\n  } // Default value\n\n\n  return state.objectMode ? 16 : 16 * 1024;\n}\n\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};","module.exports = require('stream');\n","var Stream = require('stream');\nif (process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream.Readable;\n  Object.assign(module.exports, Stream);\n  module.exports.Stream = Stream;\n} else {\n  exports = module.exports = require('./lib/_stream_readable.js');\n  exports.Stream = Stream || exports;\n  exports.Readable = exports;\n  exports.Writable = require('./lib/_stream_writable.js');\n  exports.Duplex = require('./lib/_stream_duplex.js');\n  exports.Transform = require('./lib/_stream_transform.js');\n  exports.PassThrough = require('./lib/_stream_passthrough.js');\n  exports.finished = require('./lib/internal/streams/end-of-stream.js');\n  exports.pipeline = require('./lib/internal/streams/pipeline.js');\n}\n","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","'use strict'\n\nconst { hasOwnProperty } = Object.prototype\n\nconst stringify = configure()\n\n// @ts-expect-error\nstringify.configure = configure\n// @ts-expect-error\nstringify.stringify = stringify\n\n// @ts-expect-error\nstringify.default = stringify\n\n// @ts-expect-error used for named export\nexports.stringify = stringify\n// @ts-expect-error used for named export\nexports.configure = configure\n\nmodule.exports = stringify\n\n// eslint-disable-next-line no-control-regex\nconst strEscapeSequencesRegExp = /[\\u0000-\\u001f\\u0022\\u005c\\ud800-\\udfff]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?:[^\\ud800-\\udbff]|^)[\\udc00-\\udfff]/\nconst strEscapeSequencesReplacer = new RegExp(strEscapeSequencesRegExp, 'g')\n\n// Escaped special characters. Use empty strings to fill up unused entries.\nconst meta = [\n  '\\\\u0000', '\\\\u0001', '\\\\u0002', '\\\\u0003', '\\\\u0004',\n  '\\\\u0005', '\\\\u0006', '\\\\u0007', '\\\\b', '\\\\t',\n  '\\\\n', '\\\\u000b', '\\\\f', '\\\\r', '\\\\u000e',\n  '\\\\u000f', '\\\\u0010', '\\\\u0011', '\\\\u0012', '\\\\u0013',\n  '\\\\u0014', '\\\\u0015', '\\\\u0016', '\\\\u0017', '\\\\u0018',\n  '\\\\u0019', '\\\\u001a', '\\\\u001b', '\\\\u001c', '\\\\u001d',\n  '\\\\u001e', '\\\\u001f', '', '', '\\\\\"',\n  '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '\\\\\\\\'\n]\n\nfunction escapeFn (str) {\n  if (str.length === 2) {\n    const charCode = str.charCodeAt(1)\n    return `${str[0]}\\\\u${charCode.toString(16)}`\n  }\n  const charCode = str.charCodeAt(0)\n  return meta.length > charCode\n    ? meta[charCode]\n    : `\\\\u${charCode.toString(16)}`\n}\n\n// Escape C0 control characters, double quotes, the backslash and every code\n// unit with a numeric value in the inclusive range 0xD800 to 0xDFFF.\nfunction strEscape (str) {\n  // Some magic numbers that worked out fine while benchmarking with v8 8.0\n  if (str.length < 5000 && !strEscapeSequencesRegExp.test(str)) {\n    return str\n  }\n  if (str.length > 100) {\n    return str.replace(strEscapeSequencesReplacer, escapeFn)\n  }\n  let result = ''\n  let last = 0\n  for (let i = 0; i < str.length; i++) {\n    const point = str.charCodeAt(i)\n    if (point === 34 || point === 92 || point < 32) {\n      result += `${str.slice(last, i)}${meta[point]}`\n      last = i + 1\n    } else if (point >= 0xd800 && point <= 0xdfff) {\n      if (point <= 0xdbff && i + 1 < str.length) {\n        const nextPoint = str.charCodeAt(i + 1)\n        if (nextPoint >= 0xdc00 && nextPoint <= 0xdfff) {\n          i++\n          continue\n        }\n      }\n      result += `${str.slice(last, i)}\\\\u${point.toString(16)}`\n      last = i + 1\n    }\n  }\n  result += str.slice(last)\n  return result\n}\n\nfunction insertSort (array) {\n  // Insertion sort is very efficient for small input sizes but it has a bad\n  // worst case complexity. Thus, use native array sort for bigger values.\n  if (array.length > 2e2) {\n    return array.sort()\n  }\n  for (let i = 1; i < array.length; i++) {\n    const currentValue = array[i]\n    let position = i\n    while (position !== 0 && array[position - 1] > currentValue) {\n      array[position] = array[position - 1]\n      position--\n    }\n    array[position] = currentValue\n  }\n  return array\n}\n\nconst typedArrayPrototypeGetSymbolToStringTag =\n  Object.getOwnPropertyDescriptor(\n    Object.getPrototypeOf(\n      Object.getPrototypeOf(\n        new Int8Array()\n      )\n    ),\n    Symbol.toStringTag\n  ).get\n\nfunction isTypedArrayWithEntries (value) {\n  return typedArrayPrototypeGetSymbolToStringTag.call(value) !== undefined && value.length !== 0\n}\n\nfunction stringifyTypedArray (array, separator, maximumBreadth) {\n  if (array.length < maximumBreadth) {\n    maximumBreadth = array.length\n  }\n  const whitespace = separator === ',' ? '' : ' '\n  let res = `\"0\":${whitespace}${array[0]}`\n  for (let i = 1; i < maximumBreadth; i++) {\n    res += `${separator}\"${i}\":${whitespace}${array[i]}`\n  }\n  return res\n}\n\nfunction getCircularValueOption (options) {\n  if (hasOwnProperty.call(options, 'circularValue')) {\n    const circularValue = options.circularValue\n    if (typeof circularValue === 'string') {\n      return `\"${circularValue}\"`\n    }\n    if (circularValue == null) {\n      return circularValue\n    }\n    if (circularValue === Error || circularValue === TypeError) {\n      return {\n        toString () {\n          throw new TypeError('Converting circular structure to JSON')\n        }\n      }\n    }\n    throw new TypeError('The \"circularValue\" argument must be of type string or the value null or undefined')\n  }\n  return '\"[Circular]\"'\n}\n\nfunction getBooleanOption (options, key) {\n  let value\n  if (hasOwnProperty.call(options, key)) {\n    value = options[key]\n    if (typeof value !== 'boolean') {\n      throw new TypeError(`The \"${key}\" argument must be of type boolean`)\n    }\n  }\n  return value === undefined ? true : value\n}\n\nfunction getPositiveIntegerOption (options, key) {\n  let value\n  if (hasOwnProperty.call(options, key)) {\n    value = options[key]\n    if (typeof value !== 'number') {\n      throw new TypeError(`The \"${key}\" argument must be of type number`)\n    }\n    if (!Number.isInteger(value)) {\n      throw new TypeError(`The \"${key}\" argument must be an integer`)\n    }\n    if (value < 1) {\n      throw new RangeError(`The \"${key}\" argument must be >= 1`)\n    }\n  }\n  return value === undefined ? Infinity : value\n}\n\nfunction getItemCount (number) {\n  if (number === 1) {\n    return '1 item'\n  }\n  return `${number} items`\n}\n\nfunction getUniqueReplacerSet (replacerArray) {\n  const replacerSet = new Set()\n  for (const value of replacerArray) {\n    if (typeof value === 'string' || typeof value === 'number') {\n      replacerSet.add(String(value))\n    }\n  }\n  return replacerSet\n}\n\nfunction getStrictOption (options) {\n  if (hasOwnProperty.call(options, 'strict')) {\n    const value = options.strict\n    if (typeof value !== 'boolean') {\n      throw new TypeError('The \"strict\" argument must be of type boolean')\n    }\n    if (value) {\n      return (value) => {\n        let message = `Object can not safely be stringified. Received type ${typeof value}`\n        if (typeof value !== 'function') message += ` (${value.toString()})`\n        throw new Error(message)\n      }\n    }\n  }\n}\n\nfunction configure (options) {\n  options = { ...options }\n  const fail = getStrictOption(options)\n  if (fail) {\n    if (options.bigint === undefined) {\n      options.bigint = false\n    }\n    if (!('circularValue' in options)) {\n      options.circularValue = Error\n    }\n  }\n  const circularValue = getCircularValueOption(options)\n  const bigint = getBooleanOption(options, 'bigint')\n  const deterministic = getBooleanOption(options, 'deterministic')\n  const maximumDepth = getPositiveIntegerOption(options, 'maximumDepth')\n  const maximumBreadth = getPositiveIntegerOption(options, 'maximumBreadth')\n\n  function stringifyFnReplacer (key, parent, stack, replacer, spacer, indentation) {\n    let value = parent[key]\n\n    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {\n      value = value.toJSON(key)\n    }\n    value = replacer.call(parent, key, value)\n\n    switch (typeof value) {\n      case 'string':\n        return `\"${strEscape(value)}\"`\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        let res = ''\n        let join = ','\n        const originalIndentation = indentation\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          if (spacer !== '') {\n            indentation += spacer\n            res += `\\n${indentation}`\n            join = `,\\n${indentation}`\n          }\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyFnReplacer(i, value, stack, replacer, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyFnReplacer(i, value, stack, replacer, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          if (spacer !== '') {\n            res += `\\n${originalIndentation}`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        let whitespace = ''\n        let separator = ''\n        if (spacer !== '') {\n          indentation += spacer\n          join = `,\\n${indentation}`\n          whitespace = ' '\n        }\n        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (isTypedArrayWithEntries(value)) {\n          res += stringifyTypedArray(value, join, maximumBreadth)\n          keys = keys.slice(value.length)\n          maximumPropertiesToStringify -= value.length\n          separator = join\n        }\n        if (deterministic) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifyFnReplacer(key, value, stack, replacer, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}\"${strEscape(key)}\":${whitespace}${tmp}`\n            separator = join\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\":${whitespace}\"${getItemCount(removedKeys)} not stringified\"`\n          separator = join\n        }\n        if (spacer !== '' && separator.length > 1) {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifyArrayReplacer (key, value, stack, replacer, spacer, indentation) {\n    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {\n      value = value.toJSON(key)\n    }\n\n    switch (typeof value) {\n      case 'string':\n        return `\"${strEscape(value)}\"`\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        const originalIndentation = indentation\n        let res = ''\n        let join = ','\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          if (spacer !== '') {\n            indentation += spacer\n            res += `\\n${indentation}`\n            join = `,\\n${indentation}`\n          }\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyArrayReplacer(i, value[i], stack, replacer, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyArrayReplacer(i, value[i], stack, replacer, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          if (spacer !== '') {\n            res += `\\n${originalIndentation}`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n        stack.push(value)\n        let whitespace = ''\n        if (spacer !== '') {\n          indentation += spacer\n          join = `,\\n${indentation}`\n          whitespace = ' '\n        }\n        let separator = ''\n        for (const key of replacer) {\n          const tmp = stringifyArrayReplacer(key, value[key], stack, replacer, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}\"${strEscape(key)}\":${whitespace}${tmp}`\n            separator = join\n          }\n        }\n        if (spacer !== '' && separator.length > 1) {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifyIndent (key, value, stack, spacer, indentation) {\n    switch (typeof value) {\n      case 'string':\n        return `\"${strEscape(value)}\"`\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (typeof value.toJSON === 'function') {\n          value = value.toJSON(key)\n          // Prevent calling `toJSON` again.\n          if (typeof value !== 'object') {\n            return stringifyIndent(key, value, stack, spacer, indentation)\n          }\n          if (value === null) {\n            return 'null'\n          }\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n        const originalIndentation = indentation\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          indentation += spacer\n          let res = `\\n${indentation}`\n          const join = `,\\n${indentation}`\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyIndent(i, value[i], stack, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyIndent(i, value[i], stack, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          res += `\\n${originalIndentation}`\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        indentation += spacer\n        const join = `,\\n${indentation}`\n        let res = ''\n        let separator = ''\n        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (isTypedArrayWithEntries(value)) {\n          res += stringifyTypedArray(value, join, maximumBreadth)\n          keys = keys.slice(value.length)\n          maximumPropertiesToStringify -= value.length\n          separator = join\n        }\n        if (deterministic) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifyIndent(key, value[key], stack, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}\"${strEscape(key)}\": ${tmp}`\n            separator = join\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\": \"${getItemCount(removedKeys)} not stringified\"`\n          separator = join\n        }\n        if (separator !== '') {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifySimple (key, value, stack) {\n    switch (typeof value) {\n      case 'string':\n        return `\"${strEscape(value)}\"`\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (typeof value.toJSON === 'function') {\n          value = value.toJSON(key)\n          // Prevent calling `toJSON` again\n          if (typeof value !== 'object') {\n            return stringifySimple(key, value, stack)\n          }\n          if (value === null) {\n            return 'null'\n          }\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        let res = ''\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifySimple(i, value[i], stack)\n            res += tmp !== undefined ? tmp : 'null'\n            res += ','\n          }\n          const tmp = stringifySimple(i, value[i], stack)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `,\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        let separator = ''\n        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (isTypedArrayWithEntries(value)) {\n          res += stringifyTypedArray(value, ',', maximumBreadth)\n          keys = keys.slice(value.length)\n          maximumPropertiesToStringify -= value.length\n          separator = ','\n        }\n        if (deterministic) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifySimple(key, value[key], stack)\n          if (tmp !== undefined) {\n            res += `${separator}\"${strEscape(key)}\":${tmp}`\n            separator = ','\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\":\"${getItemCount(removedKeys)} not stringified\"`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringify (value, replacer, space) {\n    if (arguments.length > 1) {\n      let spacer = ''\n      if (typeof space === 'number') {\n        spacer = ' '.repeat(Math.min(space, 10))\n      } else if (typeof space === 'string') {\n        spacer = space.slice(0, 10)\n      }\n      if (replacer != null) {\n        if (typeof replacer === 'function') {\n          return stringifyFnReplacer('', { '': value }, [], replacer, spacer, '')\n        }\n        if (Array.isArray(replacer)) {\n          return stringifyArrayReplacer('', value, [], getUniqueReplacerSet(replacer), spacer, '')\n        }\n      }\n      if (spacer.length !== 0) {\n        return stringifyIndent('', value, [], spacer, '')\n      }\n    }\n    return stringifySimple('', value, [])\n  }\n\n  return stringify\n}\n","const ANY = Symbol('SemVer ANY')\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY () {\n    return ANY\n  }\n\n  constructor (comp, options) {\n    options = parseOptions(options)\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp\n      } else {\n        comp = comp.value\n      }\n    }\n\n    debug('comparator', comp, options)\n    this.options = options\n    this.loose = !!options.loose\n    this.parse(comp)\n\n    if (this.semver === ANY) {\n      this.value = ''\n    } else {\n      this.value = this.operator + this.semver.version\n    }\n\n    debug('comp', this)\n  }\n\n  parse (comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const m = comp.match(r)\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`)\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : ''\n    if (this.operator === '=') {\n      this.operator = ''\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose)\n    }\n  }\n\n  toString () {\n    return this.value\n  }\n\n  test (version) {\n    debug('Comparator.test', version, this.options.loose)\n\n    if (this.semver === ANY || version === ANY) {\n      return true\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options)\n  }\n\n  intersects (comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required')\n    }\n\n    if (!options || typeof options !== 'object') {\n      options = {\n        loose: !!options,\n        includePrerelease: false,\n      }\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true\n      }\n      return new Range(comp.value, options).test(this.value)\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true\n      }\n      return new Range(this.value, options).test(comp.semver)\n    }\n\n    const sameDirectionIncreasing =\n      (this.operator === '>=' || this.operator === '>') &&\n      (comp.operator === '>=' || comp.operator === '>')\n    const sameDirectionDecreasing =\n      (this.operator === '<=' || this.operator === '<') &&\n      (comp.operator === '<=' || comp.operator === '<')\n    const sameSemVer = this.semver.version === comp.semver.version\n    const differentDirectionsInclusive =\n      (this.operator === '>=' || this.operator === '<=') &&\n      (comp.operator === '>=' || comp.operator === '<=')\n    const oppositeDirectionsLessThan =\n      cmp(this.semver, '<', comp.semver, options) &&\n      (this.operator === '>=' || this.operator === '>') &&\n        (comp.operator === '<=' || comp.operator === '<')\n    const oppositeDirectionsGreaterThan =\n      cmp(this.semver, '>', comp.semver, options) &&\n      (this.operator === '<=' || this.operator === '<') &&\n        (comp.operator === '>=' || comp.operator === '>')\n\n    return (\n      sameDirectionIncreasing ||\n      sameDirectionDecreasing ||\n      (sameSemVer && differentDirectionsInclusive) ||\n      oppositeDirectionsLessThan ||\n      oppositeDirectionsGreaterThan\n    )\n  }\n}\n\nmodule.exports = Comparator\n\nconst parseOptions = require('../internal/parse-options')\nconst { re, t } = require('../internal/re')\nconst cmp = require('../functions/cmp')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst Range = require('./range')\n","// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.format()\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First, split based on boolean or ||\n    this.raw = range\n    this.set = range\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.format()\n  }\n\n  format () {\n    this.range = this.set\n      .map((comps) => {\n        return comps.join(' ').trim()\n      })\n      .join('||')\n      .trim()\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    range = range.trim()\n\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts = Object.keys(this.options).join(',')\n    const memoKey = `parseRange:${memoOpts}:${range}`\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n\n    // normalize spaces\n    range = range.split(/\\s+/).join(' ')\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\nmodule.exports = Range\n\nconst LRU = require('lru-cache')\nconst cache = new LRU({ max: 1000 })\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = require('../internal/re')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceTilde(c, options)\n  }).join(' ')\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceCaret(c, options)\n  }).join(' ')\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map((c) => {\n    return replaceXRange(c, options)\n  }).join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp.trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return (`${from} ${to}`).trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n","const debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier)\n        this.inc('pre', identifier)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier)\n        }\n        this.inc('pre', identifier)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre':\n        if (this.prerelease.length === 0) {\n          this.prerelease = [0]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            this.prerelease.push(0)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = [identifier, 0]\n            }\n          } else {\n            this.prerelease = [identifier, 0]\n          }\n        }\n        break\n\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.format()\n    this.raw = this.version\n    return this\n  }\n}\n\nmodule.exports = SemVer\n","const parse = require('./parse')\nconst clean = (version, options) => {\n  const s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\nmodule.exports = clean\n","const eq = require('./eq')\nconst neq = require('./neq')\nconst gt = require('./gt')\nconst gte = require('./gte')\nconst lt = require('./lt')\nconst lte = require('./lte')\n\nconst cmp = (a, op, b, loose) => {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError(`Invalid operator: ${op}`)\n  }\n}\nmodule.exports = cmp\n","const SemVer = require('../classes/semver')\nconst parse = require('./parse')\nconst { re, t } = require('../internal/re')\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  let match = null\n  if (!options.rtl) {\n    match = version.match(re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    let next\n    while ((next = re[t.COERCERTL].exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    re[t.COERCERTL].lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  return parse(`${match[2]}.${match[3] || '0'}.${match[4] || '0'}`, options)\n}\nmodule.exports = coerce\n","const SemVer = require('../classes/semver')\nconst compareBuild = (a, b, loose) => {\n  const versionA = new SemVer(a, loose)\n  const versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\nmodule.exports = compareBuild\n","const compare = require('./compare')\nconst compareLoose = (a, b) => compare(a, b, true)\nmodule.exports = compareLoose\n","const SemVer = require('../classes/semver')\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n","const parse = require('./parse')\nconst eq = require('./eq')\n\nconst diff = (version1, version2) => {\n  if (eq(version1, version2)) {\n    return null\n  } else {\n    const v1 = parse(version1)\n    const v2 = parse(version2)\n    const hasPre = v1.prerelease.length || v2.prerelease.length\n    const prefix = hasPre ? 'pre' : ''\n    const defaultResult = hasPre ? 'prerelease' : ''\n    for (const key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n}\nmodule.exports = diff\n","const compare = require('./compare')\nconst eq = (a, b, loose) => compare(a, b, loose) === 0\nmodule.exports = eq\n","const compare = require('./compare')\nconst gt = (a, b, loose) => compare(a, b, loose) > 0\nmodule.exports = gt\n","const compare = require('./compare')\nconst gte = (a, b, loose) => compare(a, b, loose) >= 0\nmodule.exports = gte\n","const SemVer = require('../classes/semver')\n\nconst inc = (version, release, options, identifier) => {\n  if (typeof (options) === 'string') {\n    identifier = options\n    options = undefined\n  }\n\n  try {\n    return new SemVer(\n      version instanceof SemVer ? version.version : version,\n      options\n    ).inc(release, identifier).version\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = inc\n","const compare = require('./compare')\nconst lt = (a, b, loose) => compare(a, b, loose) < 0\nmodule.exports = lt\n","const compare = require('./compare')\nconst lte = (a, b, loose) => compare(a, b, loose) <= 0\nmodule.exports = lte\n","const SemVer = require('../classes/semver')\nconst major = (a, loose) => new SemVer(a, loose).major\nmodule.exports = major\n","const SemVer = require('../classes/semver')\nconst minor = (a, loose) => new SemVer(a, loose).minor\nmodule.exports = minor\n","const compare = require('./compare')\nconst neq = (a, b, loose) => compare(a, b, loose) !== 0\nmodule.exports = neq\n","const { MAX_LENGTH } = require('../internal/constants')\nconst { re, t } = require('../internal/re')\nconst SemVer = require('../classes/semver')\n\nconst parseOptions = require('../internal/parse-options')\nconst parse = (version, options) => {\n  options = parseOptions(options)\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  const r = options.loose ? re[t.LOOSE] : re[t.FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nmodule.exports = parse\n","const SemVer = require('../classes/semver')\nconst patch = (a, loose) => new SemVer(a, loose).patch\nmodule.exports = patch\n","const parse = require('./parse')\nconst prerelease = (version, options) => {\n  const parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\nmodule.exports = prerelease\n","const compare = require('./compare')\nconst rcompare = (a, b, loose) => compare(b, a, loose)\nmodule.exports = rcompare\n","const compareBuild = require('./compare-build')\nconst rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))\nmodule.exports = rsort\n","const Range = require('../classes/range')\nconst satisfies = (version, range, options) => {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\nmodule.exports = satisfies\n","const compareBuild = require('./compare-build')\nconst sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))\nmodule.exports = sort\n","const parse = require('./parse')\nconst valid = (version, options) => {\n  const v = parse(version, options)\n  return v ? v.version : null\n}\nmodule.exports = valid\n","// just pre-load all the stuff that index.js lazily exports\nconst internalRe = require('./internal/re')\nconst constants = require('./internal/constants')\nconst SemVer = require('./classes/semver')\nconst identifiers = require('./internal/identifiers')\nconst parse = require('./functions/parse')\nconst valid = require('./functions/valid')\nconst clean = require('./functions/clean')\nconst inc = require('./functions/inc')\nconst diff = require('./functions/diff')\nconst major = require('./functions/major')\nconst minor = require('./functions/minor')\nconst patch = require('./functions/patch')\nconst prerelease = require('./functions/prerelease')\nconst compare = require('./functions/compare')\nconst rcompare = require('./functions/rcompare')\nconst compareLoose = require('./functions/compare-loose')\nconst compareBuild = require('./functions/compare-build')\nconst sort = require('./functions/sort')\nconst rsort = require('./functions/rsort')\nconst gt = require('./functions/gt')\nconst lt = require('./functions/lt')\nconst eq = require('./functions/eq')\nconst neq = require('./functions/neq')\nconst gte = require('./functions/gte')\nconst lte = require('./functions/lte')\nconst cmp = require('./functions/cmp')\nconst coerce = require('./functions/coerce')\nconst Comparator = require('./classes/comparator')\nconst Range = require('./classes/range')\nconst satisfies = require('./functions/satisfies')\nconst toComparators = require('./ranges/to-comparators')\nconst maxSatisfying = require('./ranges/max-satisfying')\nconst minSatisfying = require('./ranges/min-satisfying')\nconst minVersion = require('./ranges/min-version')\nconst validRange = require('./ranges/valid')\nconst outside = require('./ranges/outside')\nconst gtr = require('./ranges/gtr')\nconst ltr = require('./ranges/ltr')\nconst intersects = require('./ranges/intersects')\nconst simplifyRange = require('./ranges/simplify')\nconst subset = require('./ranges/subset')\nmodule.exports = {\n  parse,\n  valid,\n  clean,\n  inc,\n  diff,\n  major,\n  minor,\n  patch,\n  prerelease,\n  compare,\n  rcompare,\n  compareLoose,\n  compareBuild,\n  sort,\n  rsort,\n  gt,\n  lt,\n  eq,\n  neq,\n  gte,\n  lte,\n  cmp,\n  coerce,\n  Comparator,\n  Range,\n  satisfies,\n  toComparators,\n  maxSatisfying,\n  minSatisfying,\n  minVersion,\n  validRange,\n  outside,\n  gtr,\n  ltr,\n  intersects,\n  simplifyRange,\n  subset,\n  SemVer,\n  re: internalRe.re,\n  src: internalRe.src,\n  tokens: internalRe.t,\n  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\n  compareIdentifiers: identifiers.compareIdentifiers,\n  rcompareIdentifiers: identifiers.rcompareIdentifiers,\n}\n","// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\nmodule.exports = {\n  SEMVER_SPEC_VERSION,\n  MAX_LENGTH,\n  MAX_SAFE_INTEGER,\n  MAX_SAFE_COMPONENT_LENGTH,\n}\n","const debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n","const numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers,\n}\n","// parse out just the options we care about so we always get a consistent\n// obj with keys in a consistent order.\nconst opts = ['includePrerelease', 'loose', 'rtl']\nconst parseOptions = options =>\n  !options ? {}\n  : typeof options !== 'object' ? { loose: true }\n  : opts.filter(k => options[k]).reduce((o, k) => {\n    o[k] = true\n    return o\n  }, {})\nmodule.exports = parseOptions\n","const { MAX_SAFE_COMPONENT_LENGTH } = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst createToken = (name, value, isGlobal) => {\n  const index = R++\n  debug(name, index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*')\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\n","// Determine if version is greater than all the versions possible in the range.\nconst outside = require('./outside')\nconst gtr = (version, range, options) => outside(version, range, '>', options)\nmodule.exports = gtr\n","const Range = require('../classes/range')\nconst intersects = (r1, r2, options) => {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\nmodule.exports = intersects\n","const outside = require('./outside')\n// Determine if version is less than all the versions possible in the range\nconst ltr = (version, range, options) => outside(version, range, '<', options)\nmodule.exports = ltr\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\n\nconst maxSatisfying = (versions, range, options) => {\n  let max = null\n  let maxSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\nmodule.exports = maxSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst minSatisfying = (versions, range, options) => {\n  let min = null\n  let minSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\nmodule.exports = minSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst gt = require('../functions/gt')\n\nconst minVersion = (range, loose) => {\n  range = new Range(range, loose)\n\n  let minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let setMin = null\n    comparators.forEach((comparator) => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!setMin || gt(compver, setMin)) {\n            setMin = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\n      }\n    })\n    if (setMin && (!minver || gt(minver, setMin))) {\n      minver = setMin\n    }\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\nmodule.exports = minVersion\n","const SemVer = require('../classes/semver')\nconst Comparator = require('../classes/comparator')\nconst { ANY } = Comparator\nconst Range = require('../classes/range')\nconst satisfies = require('../functions/satisfies')\nconst gt = require('../functions/gt')\nconst lt = require('../functions/lt')\nconst lte = require('../functions/lte')\nconst gte = require('../functions/gte')\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  let gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let high = null\n    let low = null\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = outside\n","// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let first = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!first) {\n        first = version\n      }\n    } else {\n      if (prev) {\n        set.push([first, prev])\n      }\n      prev = null\n      first = null\n    }\n  }\n  if (first) {\n    set.push([first, null])\n  }\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max) {\n      ranges.push(min)\n    } else if (!max && min === v[0]) {\n      ranges.push('*')\n    } else if (!max) {\n      ranges.push(`>=${min}`)\n    } else if (min === v[0]) {\n      ranges.push(`<=${max}`)\n    } else {\n      ranges.push(`${min} - ${max}`)\n    }\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n","const Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = [new Comparator('>=0.0.0-0')]\n    } else {\n      sub = [new Comparator('>=0.0.0')]\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = [new Comparator('>=0.0.0')]\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n","const Range = require('../classes/range')\n\n// Mostly just for testing and legacy API reasons\nconst toComparators = (range, options) =>\n  new Range(range, options).set\n    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))\n\nmodule.exports = toComparators\n","const Range = require('../classes/range')\nconst validRange = (range, options) => {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = validRange\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\nvar $Map = GetIntrinsic('%Map%', true);\n\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\nvar $mapGet = callBound('Map.prototype.get', true);\nvar $mapSet = callBound('Map.prototype.set', true);\nvar $mapHas = callBound('Map.prototype.has', true);\n\n/*\n * This function traverses the list returning the node corresponding to the\n * given key.\n *\n * That node is also moved to the head of the list, so that if it's accessed\n * again we don't need to traverse the whole list. By doing so, all the recently\n * used nodes can be accessed relatively quickly.\n */\nvar listGetNode = function (list, key) { // eslint-disable-line consistent-return\n\tfor (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {\n\t\tif (curr.key === key) {\n\t\t\tprev.next = curr.next;\n\t\t\tcurr.next = list.next;\n\t\t\tlist.next = curr; // eslint-disable-line no-param-reassign\n\t\t\treturn curr;\n\t\t}\n\t}\n};\n\nvar listGet = function (objects, key) {\n\tvar node = listGetNode(objects, key);\n\treturn node && node.value;\n};\nvar listSet = function (objects, key, value) {\n\tvar node = listGetNode(objects, key);\n\tif (node) {\n\t\tnode.value = value;\n\t} else {\n\t\t// Prepend the new node to the beginning of the list\n\t\tobjects.next = { // eslint-disable-line no-param-reassign\n\t\t\tkey: key,\n\t\t\tnext: objects.next,\n\t\t\tvalue: value\n\t\t};\n\t}\n};\nvar listHas = function (objects, key) {\n\treturn !!listGetNode(objects, key);\n};\n\nmodule.exports = function getSideChannel() {\n\tvar $wm;\n\tvar $m;\n\tvar $o;\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapGet($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapGet($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listGet($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapHas($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapHas($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listHas($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif (!$wm) {\n\t\t\t\t\t$wm = new $WeakMap();\n\t\t\t\t}\n\t\t\t\t$weakMapSet($wm, key, value);\n\t\t\t} else if ($Map) {\n\t\t\t\tif (!$m) {\n\t\t\t\t\t$m = new $Map();\n\t\t\t\t}\n\t\t\t\t$mapSet($m, key, value);\n\t\t\t} else {\n\t\t\t\tif (!$o) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Initialize the linked list as an empty node, so that we don't have\n\t\t\t\t\t * to special-case handling of the first node: we can always refer to\n\t\t\t\t\t * it as (previous node).next, instead of something like (list).head\n\t\t\t\t\t */\n\t\t\t\t\t$o = { key: {}, next: null };\n\t\t\t\t}\n\t\t\t\tlistSet($o, key, value);\n\t\t\t}\n\t\t}\n\t};\n\treturn channel;\n};\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","exports.get = function(belowFn) {\n  var oldLimit = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n\n  var dummyObject = {};\n\n  var v8Handler = Error.prepareStackTrace;\n  Error.prepareStackTrace = function(dummyObject, v8StackTrace) {\n    return v8StackTrace;\n  };\n  Error.captureStackTrace(dummyObject, belowFn || exports.get);\n\n  var v8StackTrace = dummyObject.stack;\n  Error.prepareStackTrace = v8Handler;\n  Error.stackTraceLimit = oldLimit;\n\n  return v8StackTrace;\n};\n\nexports.parse = function(err) {\n  if (!err.stack) {\n    return [];\n  }\n\n  var self = this;\n  var lines = err.stack.split('\\n').slice(1);\n\n  return lines\n    .map(function(line) {\n      if (line.match(/^\\s*[-]{4,}$/)) {\n        return self._createParsedCallSite({\n          fileName: line,\n          lineNumber: null,\n          functionName: null,\n          typeName: null,\n          methodName: null,\n          columnNumber: null,\n          'native': null,\n        });\n      }\n\n      var lineMatch = line.match(/at (?:(.+)\\s+\\()?(?:(.+?):(\\d+)(?::(\\d+))?|([^)]+))\\)?/);\n      if (!lineMatch) {\n        return;\n      }\n\n      var object = null;\n      var method = null;\n      var functionName = null;\n      var typeName = null;\n      var methodName = null;\n      var isNative = (lineMatch[5] === 'native');\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n        var methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart-1] == '.')\n          methodStart--;\n        if (methodStart > 0) {\n          object = functionName.substr(0, methodStart);\n          method = functionName.substr(methodStart + 1);\n          var objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.substr(objectEnd + 1);\n            object = object.substr(0, objectEnd);\n          }\n        }\n        typeName = null;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = null;\n        functionName = null;\n      }\n\n      var properties = {\n        fileName: lineMatch[2] || null,\n        lineNumber: parseInt(lineMatch[3], 10) || null,\n        functionName: functionName,\n        typeName: typeName,\n        methodName: methodName,\n        columnNumber: parseInt(lineMatch[4], 10) || null,\n        'native': isNative,\n      };\n\n      return self._createParsedCallSite(properties);\n    })\n    .filter(function(callSite) {\n      return !!callSite;\n    });\n};\n\nfunction CallSite(properties) {\n  for (var property in properties) {\n    this[property] = properties[property];\n  }\n}\n\nvar strProperties = [\n  'this',\n  'typeName',\n  'functionName',\n  'methodName',\n  'fileName',\n  'lineNumber',\n  'columnNumber',\n  'function',\n  'evalOrigin'\n];\nvar boolProperties = [\n  'topLevel',\n  'eval',\n  'native',\n  'constructor'\n];\nstrProperties.forEach(function (property) {\n  CallSite.prototype[property] = null;\n  CallSite.prototype['get' + property[0].toUpperCase() + property.substr(1)] = function () {\n    return this[property];\n  }\n});\nboolProperties.forEach(function (property) {\n  CallSite.prototype[property] = false;\n  CallSite.prototype['is' + property[0].toUpperCase() + property.substr(1)] = function () {\n    return this[property];\n  }\n});\n\nexports._createParsedCallSite = function(properties) {\n  return new CallSite(properties);\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction Agent() {\n  this._defaults = [];\n}\nfor (var _i = 0, _arr = ['use', 'on', 'once', 'set', 'query', 'type', 'accept', 'auth', 'withCredentials', 'sortQuery', 'retry', 'ok', 'redirects', 'timeout', 'buffer', 'serialize', 'parse', 'ca', 'key', 'pfx', 'cert', 'disableTLSCerts']; _i < _arr.length; _i++) {\n  const fn = _arr[_i];\n  // Default setting for all requests from this agent\n  Agent.prototype[fn] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._defaults.push({\n      fn,\n      args\n    });\n    return this;\n  };\n}\nAgent.prototype._setDefaults = function (request) {\n  var _iterator = _createForOfIteratorHelper(this._defaults),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      const def = _step.value;\n      request[def.fn](...def.args);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\nmodule.exports = Agent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBZ2VudCIsIl9kZWZhdWx0cyIsImZuIiwicHJvdG90eXBlIiwiYXJncyIsInB1c2giLCJfc2V0RGVmYXVsdHMiLCJyZXF1ZXN0IiwiZGVmIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9hZ2VudC1iYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIEFnZW50KCkge1xuICB0aGlzLl9kZWZhdWx0cyA9IFtdO1xufVxuXG5mb3IgKGNvbnN0IGZuIG9mIFtcbiAgJ3VzZScsXG4gICdvbicsXG4gICdvbmNlJyxcbiAgJ3NldCcsXG4gICdxdWVyeScsXG4gICd0eXBlJyxcbiAgJ2FjY2VwdCcsXG4gICdhdXRoJyxcbiAgJ3dpdGhDcmVkZW50aWFscycsXG4gICdzb3J0UXVlcnknLFxuICAncmV0cnknLFxuICAnb2snLFxuICAncmVkaXJlY3RzJyxcbiAgJ3RpbWVvdXQnLFxuICAnYnVmZmVyJyxcbiAgJ3NlcmlhbGl6ZScsXG4gICdwYXJzZScsXG4gICdjYScsXG4gICdrZXknLFxuICAncGZ4JyxcbiAgJ2NlcnQnLFxuICAnZGlzYWJsZVRMU0NlcnRzJ1xuXSkge1xuICAvLyBEZWZhdWx0IHNldHRpbmcgZm9yIGFsbCByZXF1ZXN0cyBmcm9tIHRoaXMgYWdlbnRcbiAgQWdlbnQucHJvdG90eXBlW2ZuXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgdGhpcy5fZGVmYXVsdHMucHVzaCh7IGZuLCBhcmdzIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xufVxuXG5BZ2VudC5wcm90b3R5cGUuX3NldERlZmF1bHRzID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgZm9yIChjb25zdCBkZWYgb2YgdGhpcy5fZGVmYXVsdHMpIHtcbiAgICByZXF1ZXN0W2RlZi5mbl0oLi4uZGVmLmFyZ3MpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFnZW50O1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLEtBQUssR0FBRztFQUNmLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEVBQUU7QUFDckI7QUFFQSx3QkFBaUIsQ0FDZixLQUFLLEVBQ0wsSUFBSSxFQUNKLE1BQU0sRUFDTixLQUFLLEVBQ0wsT0FBTyxFQUNQLE1BQU0sRUFDTixRQUFRLEVBQ1IsTUFBTSxFQUNOLGlCQUFpQixFQUNqQixXQUFXLEVBQ1gsT0FBTyxFQUNQLElBQUksRUFDSixXQUFXLEVBQ1gsU0FBUyxFQUNULFFBQVEsRUFDUixXQUFXLEVBQ1gsT0FBTyxFQUNQLElBQUksRUFDSixLQUFLLEVBQ0wsS0FBSyxFQUNMLE1BQU0sRUFDTixpQkFBaUIsQ0FDbEIsMEJBQUU7RUF2QkUsTUFBTUMsRUFBRTtFQXdCWDtFQUNBRixLQUFLLENBQUNHLFNBQVMsQ0FBQ0QsRUFBRSxDQUFDLEdBQUcsWUFBbUI7SUFBQSxrQ0FBTkUsSUFBSTtNQUFKQSxJQUFJO0lBQUE7SUFDckMsSUFBSSxDQUFDSCxTQUFTLENBQUNJLElBQUksQ0FBQztNQUFFSCxFQUFFO01BQUVFO0lBQUssQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sSUFBSTtFQUNiLENBQUM7QUFDSDtBQUVBSixLQUFLLENBQUNHLFNBQVMsQ0FBQ0csWUFBWSxHQUFHLFVBQVVDLE9BQU8sRUFBRTtFQUFBLDJDQUM5QixJQUFJLENBQUNOLFNBQVM7SUFBQTtFQUFBO0lBQWhDLG9EQUFrQztNQUFBLE1BQXZCTyxHQUFHO01BQ1pELE9BQU8sQ0FBQ0MsR0FBRyxDQUFDTixFQUFFLENBQUMsQ0FBQyxHQUFHTSxHQUFHLENBQUNKLElBQUksQ0FBQztJQUM5QjtFQUFDO0lBQUE7RUFBQTtJQUFBO0VBQUE7QUFDSCxDQUFDO0FBRURLLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVixLQUFLIn0=","\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * Module dependencies.\n */\n\n// eslint-disable-next-line node/no-deprecated-api\nconst _require = require('url'),\n  parse = _require.parse;\nconst _require2 = require('cookiejar'),\n  CookieJar = _require2.CookieJar;\nconst _require3 = require('cookiejar'),\n  CookieAccessInfo = _require3.CookieAccessInfo;\nconst methods = require('methods');\nconst request = require('../..');\nconst AgentBase = require('../agent-base');\n\n/**\n * Expose `Agent`.\n */\n\nmodule.exports = Agent;\n\n/**\n * Initialize a new `Agent`.\n *\n * @api public\n */\n\nfunction Agent(options) {\n  if (!(this instanceof Agent)) {\n    return new Agent(options);\n  }\n  AgentBase.call(this);\n  this.jar = new CookieJar();\n  if (options) {\n    if (options.ca) {\n      this.ca(options.ca);\n    }\n    if (options.key) {\n      this.key(options.key);\n    }\n    if (options.pfx) {\n      this.pfx(options.pfx);\n    }\n    if (options.cert) {\n      this.cert(options.cert);\n    }\n    if (options.rejectUnauthorized === false) {\n      this.disableTLSCerts();\n    }\n  }\n}\nAgent.prototype = Object.create(AgentBase.prototype);\n\n/**\n * Save the cookies in the given `res` to\n * the agent's cookie jar for persistence.\n *\n * @param {Response} res\n * @api private\n */\n\nAgent.prototype._saveCookies = function (res) {\n  const cookies = res.headers['set-cookie'];\n  if (cookies) {\n    var _res$request;\n    const url = parse(((_res$request = res.request) === null || _res$request === void 0 ? void 0 : _res$request.url) || '');\n    this.jar.setCookies(cookies, url.hostname, url.pathname);\n  }\n};\n\n/**\n * Attach cookies when available to the given `req`.\n *\n * @param {Request} req\n * @api private\n */\n\nAgent.prototype._attachCookies = function (request_) {\n  const url = parse(request_.url);\n  const access = new CookieAccessInfo(url.hostname, url.pathname, url.protocol === 'https:');\n  const cookies = this.jar.getCookies(access).toValueString();\n  request_.cookies = cookies;\n};\nvar _iterator = _createForOfIteratorHelper(methods),\n  _step;\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    const name = _step.value;\n    const method = name.toUpperCase();\n    Agent.prototype[name] = function (url, fn) {\n      const request_ = new request.Request(method, url);\n      request_.on('response', this._saveCookies.bind(this));\n      request_.on('redirect', this._saveCookies.bind(this));\n      request_.on('redirect', this._attachCookies.bind(this, request_));\n      this._setDefaults(request_);\n      this._attachCookies(request_);\n      if (fn) {\n        request_.end(fn);\n      }\n      return request_;\n    };\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\nAgent.prototype.del = Agent.prototype.delete;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwicGFyc2UiLCJDb29raWVKYXIiLCJDb29raWVBY2Nlc3NJbmZvIiwibWV0aG9kcyIsInJlcXVlc3QiLCJBZ2VudEJhc2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiQWdlbnQiLCJvcHRpb25zIiwiY2FsbCIsImphciIsImNhIiwia2V5IiwicGZ4IiwiY2VydCIsInJlamVjdFVuYXV0aG9yaXplZCIsImRpc2FibGVUTFNDZXJ0cyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9zYXZlQ29va2llcyIsInJlcyIsImNvb2tpZXMiLCJoZWFkZXJzIiwidXJsIiwic2V0Q29va2llcyIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJfYXR0YWNoQ29va2llcyIsInJlcXVlc3RfIiwiYWNjZXNzIiwicHJvdG9jb2wiLCJnZXRDb29raWVzIiwidG9WYWx1ZVN0cmluZyIsIm5hbWUiLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsImZuIiwiUmVxdWVzdCIsIm9uIiwiYmluZCIsIl9zZXREZWZhdWx0cyIsImVuZCIsImRlbCIsImRlbGV0ZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlL2FnZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby1kZXByZWNhdGVkLWFwaVxuY29uc3QgeyBwYXJzZSB9ID0gcmVxdWlyZSgndXJsJyk7XG5jb25zdCB7IENvb2tpZUphciB9ID0gcmVxdWlyZSgnY29va2llamFyJyk7XG5jb25zdCB7IENvb2tpZUFjY2Vzc0luZm8gfSA9IHJlcXVpcmUoJ2Nvb2tpZWphcicpO1xuY29uc3QgbWV0aG9kcyA9IHJlcXVpcmUoJ21ldGhvZHMnKTtcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCcuLi8uLicpO1xuY29uc3QgQWdlbnRCYXNlID0gcmVxdWlyZSgnLi4vYWdlbnQtYmFzZScpO1xuXG4vKipcbiAqIEV4cG9zZSBgQWdlbnRgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQWdlbnQ7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgQWdlbnRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQWdlbnQob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQWdlbnQpKSB7XG4gICAgcmV0dXJuIG5ldyBBZ2VudChvcHRpb25zKTtcbiAgfVxuXG4gIEFnZW50QmFzZS5jYWxsKHRoaXMpO1xuICB0aGlzLmphciA9IG5ldyBDb29raWVKYXIoKTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmNhKSB7XG4gICAgICB0aGlzLmNhKG9wdGlvbnMuY2EpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmtleSkge1xuICAgICAgdGhpcy5rZXkob3B0aW9ucy5rZXkpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnBmeCkge1xuICAgICAgdGhpcy5wZngob3B0aW9ucy5wZngpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNlcnQpIHtcbiAgICAgIHRoaXMuY2VydChvcHRpb25zLmNlcnQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuZGlzYWJsZVRMU0NlcnRzKCk7XG4gICAgfVxuICB9XG59XG5cbkFnZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQWdlbnRCYXNlLnByb3RvdHlwZSk7XG5cbi8qKlxuICogU2F2ZSB0aGUgY29va2llcyBpbiB0aGUgZ2l2ZW4gYHJlc2AgdG9cbiAqIHRoZSBhZ2VudCdzIGNvb2tpZSBqYXIgZm9yIHBlcnNpc3RlbmNlLlxuICpcbiAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQWdlbnQucHJvdG90eXBlLl9zYXZlQ29va2llcyA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgY29uc3QgY29va2llcyA9IHJlcy5oZWFkZXJzWydzZXQtY29va2llJ107XG4gIGlmIChjb29raWVzKSB7XG4gICAgY29uc3QgdXJsID0gcGFyc2UocmVzLnJlcXVlc3Q/LnVybCB8fCAnJylcbiAgICB0aGlzLmphci5zZXRDb29raWVzKGNvb2tpZXMsIHVybC5ob3N0bmFtZSwgdXJsLnBhdGhuYW1lKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBdHRhY2ggY29va2llcyB3aGVuIGF2YWlsYWJsZSB0byB0aGUgZ2l2ZW4gYHJlcWAuXG4gKlxuICogQHBhcmFtIHtSZXF1ZXN0fSByZXFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkFnZW50LnByb3RvdHlwZS5fYXR0YWNoQ29va2llcyA9IGZ1bmN0aW9uIChyZXF1ZXN0Xykge1xuICBjb25zdCB1cmwgPSBwYXJzZShyZXF1ZXN0Xy51cmwpO1xuICBjb25zdCBhY2Nlc3MgPSBuZXcgQ29va2llQWNjZXNzSW5mbyhcbiAgICB1cmwuaG9zdG5hbWUsXG4gICAgdXJsLnBhdGhuYW1lLFxuICAgIHVybC5wcm90b2NvbCA9PT0gJ2h0dHBzOidcbiAgKTtcbiAgY29uc3QgY29va2llcyA9IHRoaXMuamFyLmdldENvb2tpZXMoYWNjZXNzKS50b1ZhbHVlU3RyaW5nKCk7XG4gIHJlcXVlc3RfLmNvb2tpZXMgPSBjb29raWVzO1xufTtcblxuZm9yIChjb25zdCBuYW1lIG9mIG1ldGhvZHMpIHtcbiAgY29uc3QgbWV0aG9kID0gbmFtZS50b1VwcGVyQ2FzZSgpO1xuICBBZ2VudC5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAodXJsLCBmbikge1xuICAgIGNvbnN0IHJlcXVlc3RfID0gbmV3IHJlcXVlc3QuUmVxdWVzdChtZXRob2QsIHVybCk7XG5cbiAgICByZXF1ZXN0Xy5vbigncmVzcG9uc2UnLCB0aGlzLl9zYXZlQ29va2llcy5iaW5kKHRoaXMpKTtcbiAgICByZXF1ZXN0Xy5vbigncmVkaXJlY3QnLCB0aGlzLl9zYXZlQ29va2llcy5iaW5kKHRoaXMpKTtcbiAgICByZXF1ZXN0Xy5vbigncmVkaXJlY3QnLCB0aGlzLl9hdHRhY2hDb29raWVzLmJpbmQodGhpcywgcmVxdWVzdF8pKTtcbiAgICB0aGlzLl9zZXREZWZhdWx0cyhyZXF1ZXN0Xyk7XG4gICAgdGhpcy5fYXR0YWNoQ29va2llcyhyZXF1ZXN0Xyk7XG5cbiAgICBpZiAoZm4pIHtcbiAgICAgIHJlcXVlc3RfLmVuZChmbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcXVlc3RfO1xuICB9O1xufVxuXG5BZ2VudC5wcm90b3R5cGUuZGVsID0gQWdlbnQucHJvdG90eXBlLmRlbGV0ZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBa0JBLE9BQU8sQ0FBQyxLQUFLLENBQUM7RUFBeEJDLEtBQUssWUFBTEEsS0FBSztBQUNiLGtCQUFzQkQsT0FBTyxDQUFDLFdBQVcsQ0FBQztFQUFsQ0UsU0FBUyxhQUFUQSxTQUFTO0FBQ2pCLGtCQUE2QkYsT0FBTyxDQUFDLFdBQVcsQ0FBQztFQUF6Q0csZ0JBQWdCLGFBQWhCQSxnQkFBZ0I7QUFDeEIsTUFBTUMsT0FBTyxHQUFHSixPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2xDLE1BQU1LLE9BQU8sR0FBR0wsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUNoQyxNQUFNTSxTQUFTLEdBQUdOLE9BQU8sQ0FBQyxlQUFlLENBQUM7O0FBRTFDO0FBQ0E7QUFDQTs7QUFFQU8sTUFBTSxDQUFDQyxPQUFPLEdBQUdDLEtBQUs7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxDQUFDQyxPQUFPLEVBQUU7RUFDdEIsSUFBSSxFQUFFLElBQUksWUFBWUQsS0FBSyxDQUFDLEVBQUU7SUFDNUIsT0FBTyxJQUFJQSxLQUFLLENBQUNDLE9BQU8sQ0FBQztFQUMzQjtFQUVBSixTQUFTLENBQUNLLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDcEIsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSVYsU0FBUyxFQUFFO0VBRTFCLElBQUlRLE9BQU8sRUFBRTtJQUNYLElBQUlBLE9BQU8sQ0FBQ0csRUFBRSxFQUFFO01BQ2QsSUFBSSxDQUFDQSxFQUFFLENBQUNILE9BQU8sQ0FBQ0csRUFBRSxDQUFDO0lBQ3JCO0lBRUEsSUFBSUgsT0FBTyxDQUFDSSxHQUFHLEVBQUU7TUFDZixJQUFJLENBQUNBLEdBQUcsQ0FBQ0osT0FBTyxDQUFDSSxHQUFHLENBQUM7SUFDdkI7SUFFQSxJQUFJSixPQUFPLENBQUNLLEdBQUcsRUFBRTtNQUNmLElBQUksQ0FBQ0EsR0FBRyxDQUFDTCxPQUFPLENBQUNLLEdBQUcsQ0FBQztJQUN2QjtJQUVBLElBQUlMLE9BQU8sQ0FBQ00sSUFBSSxFQUFFO01BQ2hCLElBQUksQ0FBQ0EsSUFBSSxDQUFDTixPQUFPLENBQUNNLElBQUksQ0FBQztJQUN6QjtJQUVBLElBQUlOLE9BQU8sQ0FBQ08sa0JBQWtCLEtBQUssS0FBSyxFQUFFO01BQ3hDLElBQUksQ0FBQ0MsZUFBZSxFQUFFO0lBQ3hCO0VBQ0Y7QUFDRjtBQUVBVCxLQUFLLENBQUNVLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUNmLFNBQVMsQ0FBQ2EsU0FBUyxDQUFDOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVYsS0FBSyxDQUFDVSxTQUFTLENBQUNHLFlBQVksR0FBRyxVQUFVQyxHQUFHLEVBQUU7RUFDNUMsTUFBTUMsT0FBTyxHQUFHRCxHQUFHLENBQUNFLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDekMsSUFBSUQsT0FBTyxFQUFFO0lBQUE7SUFDWCxNQUFNRSxHQUFHLEdBQUd6QixLQUFLLENBQUMsaUJBQUFzQixHQUFHLENBQUNsQixPQUFPLGlEQUFYLGFBQWFxQixHQUFHLEtBQUksRUFBRSxDQUFDO0lBQ3pDLElBQUksQ0FBQ2QsR0FBRyxDQUFDZSxVQUFVLENBQUNILE9BQU8sRUFBRUUsR0FBRyxDQUFDRSxRQUFRLEVBQUVGLEdBQUcsQ0FBQ0csUUFBUSxDQUFDO0VBQzFEO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFwQixLQUFLLENBQUNVLFNBQVMsQ0FBQ1csY0FBYyxHQUFHLFVBQVVDLFFBQVEsRUFBRTtFQUNuRCxNQUFNTCxHQUFHLEdBQUd6QixLQUFLLENBQUM4QixRQUFRLENBQUNMLEdBQUcsQ0FBQztFQUMvQixNQUFNTSxNQUFNLEdBQUcsSUFBSTdCLGdCQUFnQixDQUNqQ3VCLEdBQUcsQ0FBQ0UsUUFBUSxFQUNaRixHQUFHLENBQUNHLFFBQVEsRUFDWkgsR0FBRyxDQUFDTyxRQUFRLEtBQUssUUFBUSxDQUMxQjtFQUNELE1BQU1ULE9BQU8sR0FBRyxJQUFJLENBQUNaLEdBQUcsQ0FBQ3NCLFVBQVUsQ0FBQ0YsTUFBTSxDQUFDLENBQUNHLGFBQWEsRUFBRTtFQUMzREosUUFBUSxDQUFDUCxPQUFPLEdBQUdBLE9BQU87QUFDNUIsQ0FBQztBQUFDLDJDQUVpQnBCLE9BQU87RUFBQTtBQUFBO0VBQTFCLG9EQUE0QjtJQUFBLE1BQWpCZ0MsSUFBSTtJQUNiLE1BQU1DLE1BQU0sR0FBR0QsSUFBSSxDQUFDRSxXQUFXLEVBQUU7SUFDakM3QixLQUFLLENBQUNVLFNBQVMsQ0FBQ2lCLElBQUksQ0FBQyxHQUFHLFVBQVVWLEdBQUcsRUFBRWEsRUFBRSxFQUFFO01BQ3pDLE1BQU1SLFFBQVEsR0FBRyxJQUFJMUIsT0FBTyxDQUFDbUMsT0FBTyxDQUFDSCxNQUFNLEVBQUVYLEdBQUcsQ0FBQztNQUVqREssUUFBUSxDQUFDVSxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQ25CLFlBQVksQ0FBQ29CLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUNyRFgsUUFBUSxDQUFDVSxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQ25CLFlBQVksQ0FBQ29CLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUNyRFgsUUFBUSxDQUFDVSxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQ1gsY0FBYyxDQUFDWSxJQUFJLENBQUMsSUFBSSxFQUFFWCxRQUFRLENBQUMsQ0FBQztNQUNqRSxJQUFJLENBQUNZLFlBQVksQ0FBQ1osUUFBUSxDQUFDO01BQzNCLElBQUksQ0FBQ0QsY0FBYyxDQUFDQyxRQUFRLENBQUM7TUFFN0IsSUFBSVEsRUFBRSxFQUFFO1FBQ05SLFFBQVEsQ0FBQ2EsR0FBRyxDQUFDTCxFQUFFLENBQUM7TUFDbEI7TUFFQSxPQUFPUixRQUFRO0lBQ2pCLENBQUM7RUFDSDtBQUFDO0VBQUE7QUFBQTtFQUFBO0FBQUE7QUFFRHRCLEtBQUssQ0FBQ1UsU0FBUyxDQUFDMEIsR0FBRyxHQUFHcEMsS0FBSyxDQUFDVSxTQUFTLENBQUMyQixNQUFNIn0=","\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst Stream = require('stream');\nconst util = require('util');\nconst net = require('net');\nconst tls = require('tls');\n// eslint-disable-next-line node/no-deprecated-api\nconst _require = require('url'),\n  parse = _require.parse;\nconst process = require('process');\nconst semverGte = require('semver/functions/gte');\nlet http2;\nif (semverGte(process.version, 'v10.10.0')) http2 = require('http2');else throw new Error('superagent: this version of Node.js does not support http2');\nconst _http2$constants = http2.constants,\n  HTTP2_HEADER_PATH = _http2$constants.HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS = _http2$constants.HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_METHOD = _http2$constants.HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_AUTHORITY = _http2$constants.HTTP2_HEADER_AUTHORITY,\n  HTTP2_HEADER_HOST = _http2$constants.HTTP2_HEADER_HOST,\n  HTTP2_HEADER_SET_COOKIE = _http2$constants.HTTP2_HEADER_SET_COOKIE,\n  NGHTTP2_CANCEL = _http2$constants.NGHTTP2_CANCEL;\nfunction setProtocol(protocol) {\n  return {\n    request(options) {\n      return new Request(protocol, options);\n    }\n  };\n}\nfunction Request(protocol, options) {\n  Stream.call(this);\n  const defaultPort = protocol === 'https:' ? 443 : 80;\n  const defaultHost = 'localhost';\n  const port = options.port || defaultPort;\n  const host = options.host || defaultHost;\n  delete options.port;\n  delete options.host;\n  this.method = options.method;\n  this.path = options.path;\n  this.protocol = protocol;\n  this.host = host;\n  delete options.method;\n  delete options.path;\n  const sessionOptions = _objectSpread({}, options);\n  if (options.socketPath) {\n    sessionOptions.socketPath = options.socketPath;\n    sessionOptions.createConnection = this.createUnixConnection.bind(this);\n  }\n  this._headers = {};\n  const session = http2.connect(`${protocol}//${host}:${port}`, sessionOptions);\n  this.setHeader('host', `${host}:${port}`);\n  session.on('error', error => this.emit('error', error));\n  this.session = session;\n}\n\n/**\n * Inherit from `Stream` (which inherits from `EventEmitter`).\n */\nutil.inherits(Request, Stream);\nRequest.prototype.createUnixConnection = function (authority, options) {\n  switch (this.protocol) {\n    case 'http:':\n      return net.connect(options.socketPath);\n    case 'https:':\n      options.ALPNProtocols = ['h2'];\n      options.servername = this.host;\n      options.allowHalfOpen = true;\n      return tls.connect(options.socketPath, options);\n    default:\n      throw new Error('Unsupported protocol', this.protocol);\n  }\n};\nRequest.prototype.setNoDelay = function (bool) {\n  // We can not use setNoDelay with HTTP/2.\n  // Node 10 limits http2session.socket methods to ones safe to use with HTTP/2.\n  // See also https://nodejs.org/api/http2.html#http2_http2session_socket\n};\nRequest.prototype.getFrame = function () {\n  if (this.frame) {\n    return this.frame;\n  }\n  const method = {\n    [HTTP2_HEADER_PATH]: this.path,\n    [HTTP2_HEADER_METHOD]: this.method\n  };\n  let headers = this.mapToHttp2Header(this._headers);\n  headers = Object.assign(headers, method);\n  const frame = this.session.request(headers);\n  frame.once('response', (headers, flags) => {\n    headers = this.mapToHttpHeader(headers);\n    frame.headers = headers;\n    frame.statusCode = headers[HTTP2_HEADER_STATUS];\n    frame.status = frame.statusCode;\n    this.emit('response', frame);\n  });\n  this._headerSent = true;\n  frame.once('drain', () => this.emit('drain'));\n  frame.on('error', error => this.emit('error', error));\n  frame.on('close', () => this.session.close());\n  this.frame = frame;\n  return frame;\n};\nRequest.prototype.mapToHttpHeader = function (headers) {\n  const keys = Object.keys(headers);\n  const http2Headers = {};\n  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n    let key = _keys[_i];\n    let value = headers[key];\n    key = key.toLowerCase();\n    switch (key) {\n      case HTTP2_HEADER_SET_COOKIE:\n        value = Array.isArray(value) ? value : [value];\n        break;\n      default:\n        break;\n    }\n    http2Headers[key] = value;\n  }\n  return http2Headers;\n};\nRequest.prototype.mapToHttp2Header = function (headers) {\n  const keys = Object.keys(headers);\n  const http2Headers = {};\n  for (var _i2 = 0, _keys2 = keys; _i2 < _keys2.length; _i2++) {\n    let key = _keys2[_i2];\n    let value = headers[key];\n    key = key.toLowerCase();\n    switch (key) {\n      case HTTP2_HEADER_HOST:\n        key = HTTP2_HEADER_AUTHORITY;\n        value = /^http:\\/\\/|^https:\\/\\//.test(value) ? parse(value).host : value;\n        break;\n      default:\n        break;\n    }\n    http2Headers[key] = value;\n  }\n  return http2Headers;\n};\nRequest.prototype.setHeader = function (name, value) {\n  this._headers[name.toLowerCase()] = value;\n};\nRequest.prototype.getHeader = function (name) {\n  return this._headers[name.toLowerCase()];\n};\nRequest.prototype.write = function (data, encoding) {\n  const frame = this.getFrame();\n  return frame.write(data, encoding);\n};\nRequest.prototype.pipe = function (stream, options) {\n  const frame = this.getFrame();\n  return frame.pipe(stream, options);\n};\nRequest.prototype.end = function (data) {\n  const frame = this.getFrame();\n  frame.end(data);\n};\nRequest.prototype.abort = function (data) {\n  const frame = this.getFrame();\n  frame.close(NGHTTP2_CANCEL);\n  this.session.destroy();\n};\nexports.setProtocol = setProtocol;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * Module dependencies.\n */\n\n// eslint-disable-next-line node/no-deprecated-api\nconst _require = require('url'),\n  parse = _require.parse,\n  format = _require.format,\n  resolve = _require.resolve;\nconst Stream = require('stream');\nconst https = require('https');\nconst http = require('http');\nconst fs = require('fs');\nconst zlib = require('zlib');\nconst util = require('util');\nconst qs = require('qs');\nconst mime = require('mime');\nlet methods = require('methods');\nconst FormData = require('form-data');\nconst formidable = require('formidable');\nconst debug = require('debug')('superagent');\nconst CookieJar = require('cookiejar');\nconst semverGte = require('semver/functions/gte');\nconst safeStringify = require('fast-safe-stringify');\nconst utils = require('../utils');\nconst RequestBase = require('../request-base');\nconst _require2 = require('./unzip'),\n  unzip = _require2.unzip;\nconst Response = require('./response');\nconst mixin = utils.mixin,\n  hasOwn = utils.hasOwn;\nlet http2;\nif (semverGte(process.version, 'v10.10.0')) http2 = require('./http2wrapper');\nfunction request(method, url) {\n  // callback\n  if (typeof url === 'function') {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (arguments.length === 1) {\n    return new exports.Request('GET', method);\n  }\n  return new exports.Request(method, url);\n}\nmodule.exports = request;\nexports = module.exports;\n\n/**\n * Expose `Request`.\n */\n\nexports.Request = Request;\n\n/**\n * Expose the agent function\n */\n\nexports.agent = require('./agent');\n\n/**\n * Noop.\n */\n\nfunction noop() {}\n\n/**\n * Expose `Response`.\n */\n\nexports.Response = Response;\n\n/**\n * Define \"form\" mime type.\n */\n\nmime.define({\n  'application/x-www-form-urlencoded': ['form', 'urlencoded', 'form-data']\n}, true);\n\n/**\n * Protocol map.\n */\n\nexports.protocols = {\n  'http:': http,\n  'https:': https,\n  'http2:': http2\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nexports.serialize = {\n  'application/x-www-form-urlencoded': qs.stringify,\n  'application/json': safeStringify\n};\n\n/**\n * Default parsers.\n *\n *     superagent.parse['application/xml'] = function(res, fn){\n *       fn(null, res);\n *     };\n *\n */\n\nexports.parse = require('./parsers');\n\n/**\n * Default buffering map. Can be used to set certain\n * response types to buffer/not buffer.\n *\n *     superagent.buffer['application/xml'] = true;\n */\nexports.buffer = {};\n\n/**\n * Initialize internal header tracking properties on a request instance.\n *\n * @param {Object} req the instance\n * @api private\n */\nfunction _initHeaders(request_) {\n  request_._header = {\n    // coerces header names to lowercase\n  };\n  request_.header = {\n    // preserves header name case\n  };\n}\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String|Object} url\n * @api public\n */\n\nfunction Request(method, url) {\n  Stream.call(this);\n  if (typeof url !== 'string') url = format(url);\n  this._enableHttp2 = Boolean(process.env.HTTP2_TEST); // internal only\n  this._agent = false;\n  this._formData = null;\n  this.method = method;\n  this.url = url;\n  _initHeaders(this);\n  this.writable = true;\n  this._redirects = 0;\n  this.redirects(method === 'HEAD' ? 0 : 5);\n  this.cookies = '';\n  this.qs = {};\n  this._query = [];\n  this.qsRaw = this._query; // Unused, for backwards compatibility only\n  this._redirectList = [];\n  this._streamRequest = false;\n  this._lookup = undefined;\n  this.once('end', this.clearTimeout.bind(this));\n}\n\n/**\n * Inherit from `Stream` (which inherits from `EventEmitter`).\n * Mixin `RequestBase`.\n */\nutil.inherits(Request, Stream);\nmixin(Request.prototype, RequestBase.prototype);\n\n/**\n * Enable or Disable http2.\n *\n * Enable http2.\n *\n * ``` js\n * request.get('http://localhost/')\n *   .http2()\n *   .end(callback);\n *\n * request.get('http://localhost/')\n *   .http2(true)\n *   .end(callback);\n * ```\n *\n * Disable http2.\n *\n * ``` js\n * request = request.http2();\n * request.get('http://localhost/')\n *   .http2(false)\n *   .end(callback);\n * ```\n *\n * @param {Boolean} enable\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.http2 = function (bool) {\n  if (exports.protocols['http2:'] === undefined) {\n    throw new Error('superagent: this version of Node.js does not support http2');\n  }\n  this._enableHttp2 = bool === undefined ? true : bool;\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('http://localhost/upload')\n *   .attach('field', Buffer.from('<b>Hello world</b>'), 'hello.html')\n *   .end(callback);\n * ```\n *\n * A filename may also be used:\n *\n * ``` js\n * request.post('http://localhost/upload')\n *   .attach('files', 'image.jpg')\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {String|fs.ReadStream|Buffer} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function (field, file, options) {\n  if (file) {\n    if (this._data) {\n      throw new Error(\"superagent can't mix .send() and .attach()\");\n    }\n    let o = options || {};\n    if (typeof options === 'string') {\n      o = {\n        filename: options\n      };\n    }\n    if (typeof file === 'string') {\n      if (!o.filename) o.filename = file;\n      debug('creating `fs.ReadStream` instance for file: %s', file);\n      file = fs.createReadStream(file);\n      file.on('error', error => {\n        const formData = this._getFormData();\n        formData.emit('error', error);\n      });\n    } else if (!o.filename && file.path) {\n      o.filename = file.path;\n    }\n    this._getFormData().append(field, file, o);\n  }\n  return this;\n};\nRequest.prototype._getFormData = function () {\n  if (!this._formData) {\n    this._formData = new FormData();\n    this._formData.on('error', error => {\n      debug('FormData error', error);\n      if (this.called) {\n        // The request has already finished and the callback was called.\n        // Silently ignore the error.\n        return;\n      }\n      this.callback(error);\n      this.abort();\n    });\n  }\n  return this._formData;\n};\n\n/**\n * Gets/sets the `Agent` to use for this HTTP request. The default (if this\n * function is not called) is to opt out of connection pooling (`agent: false`).\n *\n * @param {http.Agent} agent\n * @return {http.Agent}\n * @api public\n */\n\nRequest.prototype.agent = function (agent) {\n  if (arguments.length === 0) return this._agent;\n  this._agent = agent;\n  return this;\n};\n\n/**\n * Gets/sets the `lookup` function to use custom DNS resolver.\n *\n * @param {Function} lookup\n * @return {Function}\n * @api public\n */\n\nRequest.prototype.lookup = function (lookup) {\n  if (arguments.length === 0) return this._lookup;\n  this._lookup = lookup;\n  return this;\n};\n\n/**\n * Set _Content-Type_ response header passed through `mime.getType()`.\n *\n * Examples:\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('json')\n *        .send(jsonstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/json')\n *        .send(jsonstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function (type) {\n  return this.set('Content-Type', type.includes('/') ? type : mime.getType(type));\n};\n\n/**\n * Set _Accept_ response header passed through `mime.getType()`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function (type) {\n  return this.set('Accept', type.includes('/') ? type : mime.getType(type));\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function (value) {\n  if (typeof value === 'string') {\n    this._query.push(value);\n  } else {\n    Object.assign(this.qs, value);\n  }\n  return this;\n};\n\n/**\n * Write raw `data` / `encoding` to the socket.\n *\n * @param {Buffer|String} data\n * @param {String} encoding\n * @return {Boolean}\n * @api public\n */\n\nRequest.prototype.write = function (data, encoding) {\n  const request_ = this.request();\n  if (!this._streamRequest) {\n    this._streamRequest = true;\n  }\n  return request_.write(data, encoding);\n};\n\n/**\n * Pipe the request body to `stream`.\n *\n * @param {Stream} stream\n * @param {Object} options\n * @return {Stream}\n * @api public\n */\n\nRequest.prototype.pipe = function (stream, options) {\n  this.piped = true; // HACK...\n  this.buffer(false);\n  this.end();\n  return this._pipeContinue(stream, options);\n};\nRequest.prototype._pipeContinue = function (stream, options) {\n  this.req.once('response', res => {\n    // redirect\n    if (isRedirect(res.statusCode) && this._redirects++ !== this._maxRedirects) {\n      return this._redirect(res) === this ? this._pipeContinue(stream, options) : undefined;\n    }\n    this.res = res;\n    this._emitResponse();\n    if (this._aborted) return;\n    if (this._shouldUnzip(res)) {\n      const unzipObject = zlib.createUnzip();\n      unzipObject.on('error', error => {\n        if (error && error.code === 'Z_BUF_ERROR') {\n          // unexpected end of file is ignored by browsers and curl\n          stream.emit('end');\n          return;\n        }\n        stream.emit('error', error);\n      });\n      res.pipe(unzipObject).pipe(stream, options);\n    } else {\n      res.pipe(stream, options);\n    }\n    res.once('end', () => {\n      this.emit('end');\n    });\n  });\n  return stream;\n};\n\n/**\n * Enable / disable buffering.\n *\n * @return {Boolean} [val]\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.buffer = function (value) {\n  this._buffer = value !== false;\n  return this;\n};\n\n/**\n * Redirect to `url\n *\n * @param {IncomingMessage} res\n * @return {Request} for chaining\n * @api private\n */\n\nRequest.prototype._redirect = function (res) {\n  let url = res.headers.location;\n  if (!url) {\n    return this.callback(new Error('No location header for redirect'), res);\n  }\n  debug('redirect %s -> %s', this.url, url);\n\n  // location\n  url = resolve(this.url, url);\n\n  // ensure the response is being consumed\n  // this is required for Node v0.10+\n  res.resume();\n  let headers = this.req.getHeaders ? this.req.getHeaders() : this.req._headers;\n  const changesOrigin = parse(url).host !== parse(this.url).host;\n\n  // implementation of 302 following defacto standard\n  if (res.statusCode === 301 || res.statusCode === 302) {\n    // strip Content-* related fields\n    // in case of POST etc\n    headers = utils.cleanHeader(headers, changesOrigin);\n\n    // force GET\n    this.method = this.method === 'HEAD' ? 'HEAD' : 'GET';\n\n    // clear data\n    this._data = null;\n  }\n\n  // 303 is always GET\n  if (res.statusCode === 303) {\n    // strip Content-* related fields\n    // in case of POST etc\n    headers = utils.cleanHeader(headers, changesOrigin);\n\n    // force method\n    this.method = 'GET';\n\n    // clear data\n    this._data = null;\n  }\n\n  // 307 preserves method\n  // 308 preserves method\n  delete headers.host;\n  delete this.req;\n  delete this._formData;\n\n  // remove all add header except User-Agent\n  _initHeaders(this);\n\n  // redirect\n  this._endCalled = false;\n  this.url = url;\n  this.qs = {};\n  this._query.length = 0;\n  this.set(headers);\n  this.emit('redirect', res);\n  this._redirectList.push(this.url);\n  this.end(this._callback);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * Examples:\n *\n *   .auth('tobi', 'learnboost')\n *   .auth('tobi:learnboost')\n *   .auth('tobi')\n *   .auth(accessToken, { type: 'bearer' })\n *\n * @param {String} user\n * @param {String} [pass]\n * @param {Object} [options] options with authorization type 'basic' or 'bearer' ('basic' is default)\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function (user, pass, options) {\n  if (arguments.length === 1) pass = '';\n  if (typeof pass === 'object' && pass !== null) {\n    // pass is optional and can be replaced with options\n    options = pass;\n    pass = '';\n  }\n  if (!options) {\n    options = {\n      type: 'basic'\n    };\n  }\n  const encoder = string => Buffer.from(string).toString('base64');\n  return this._auth(user, pass, options, encoder);\n};\n\n/**\n * Set the certificate authority option for https request.\n *\n * @param {Buffer | Array} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.ca = function (cert) {\n  this._ca = cert;\n  return this;\n};\n\n/**\n * Set the client certificate key option for https request.\n *\n * @param {Buffer | String} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.key = function (cert) {\n  this._key = cert;\n  return this;\n};\n\n/**\n * Set the key, certificate, and CA certs of the client in PFX or PKCS12 format.\n *\n * @param {Buffer | String} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.pfx = function (cert) {\n  if (typeof cert === 'object' && !Buffer.isBuffer(cert)) {\n    this._pfx = cert.pfx;\n    this._passphrase = cert.passphrase;\n  } else {\n    this._pfx = cert;\n  }\n  return this;\n};\n\n/**\n * Set the client certificate option for https request.\n *\n * @param {Buffer | String} cert\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.cert = function (cert) {\n  this._cert = cert;\n  return this;\n};\n\n/**\n * Do not reject expired or invalid TLS certs.\n * sets `rejectUnauthorized=true`. Be warned that this allows MITM attacks.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.disableTLSCerts = function () {\n  this._disableTLSCerts = true;\n  return this;\n};\n\n/**\n * Return an http[s] request.\n *\n * @return {OutgoingMessage}\n * @api private\n */\n\n// eslint-disable-next-line complexity\nRequest.prototype.request = function () {\n  if (this.req) return this.req;\n  const options = {};\n  try {\n    const query = qs.stringify(this.qs, {\n      indices: false,\n      strictNullHandling: true\n    });\n    if (query) {\n      this.qs = {};\n      this._query.push(query);\n    }\n    this._finalizeQueryString();\n  } catch (err) {\n    return this.emit('error', err);\n  }\n  let url = this.url;\n  const retries = this._retries;\n\n  // Capture backticks as-is from the final query string built above.\n  // Note: this'll only find backticks entered in req.query(String)\n  // calls, because qs.stringify unconditionally encodes backticks.\n  let queryStringBackticks;\n  if (url.includes('`')) {\n    const queryStartIndex = url.indexOf('?');\n    if (queryStartIndex !== -1) {\n      const queryString = url.slice(queryStartIndex + 1);\n      queryStringBackticks = queryString.match(/`|%60/g);\n    }\n  }\n\n  // default to http://\n  if (url.indexOf('http') !== 0) url = `http://${url}`;\n  url = parse(url);\n\n  // See https://github.com/ladjs/superagent/issues/1367\n  if (queryStringBackticks) {\n    let i = 0;\n    url.query = url.query.replace(/%60/g, () => queryStringBackticks[i++]);\n    url.search = `?${url.query}`;\n    url.path = url.pathname + url.search;\n  }\n\n  // support unix sockets\n  if (/^https?\\+unix:/.test(url.protocol) === true) {\n    // get the protocol\n    url.protocol = `${url.protocol.split('+')[0]}:`;\n\n    // get the socket, path\n    const unixParts = url.path.match(/^([^/]+)(.+)$/);\n    options.socketPath = unixParts[1].replace(/%2F/g, '/');\n    url.path = unixParts[2];\n  }\n\n  // Override IP address of a hostname\n  if (this._connectOverride) {\n    const _url = url,\n      hostname = _url.hostname;\n    const match = hostname in this._connectOverride ? this._connectOverride[hostname] : this._connectOverride['*'];\n    if (match) {\n      // backup the real host\n      if (!this._header.host) {\n        this.set('host', url.host);\n      }\n      let newHost;\n      let newPort;\n      if (typeof match === 'object') {\n        newHost = match.host;\n        newPort = match.port;\n      } else {\n        newHost = match;\n        newPort = url.port;\n      }\n\n      // wrap [ipv6]\n      url.host = /:/.test(newHost) ? `[${newHost}]` : newHost;\n      if (newPort) {\n        url.host += `:${newPort}`;\n        url.port = newPort;\n      }\n      url.hostname = newHost;\n    }\n  }\n\n  // options\n  options.method = this.method;\n  options.port = url.port;\n  options.path = url.path;\n  options.host = url.hostname;\n  options.ca = this._ca;\n  options.key = this._key;\n  options.pfx = this._pfx;\n  options.cert = this._cert;\n  options.passphrase = this._passphrase;\n  options.agent = this._agent;\n  options.lookup = this._lookup;\n  options.rejectUnauthorized = typeof this._disableTLSCerts === 'boolean' ? !this._disableTLSCerts : process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0';\n\n  // Allows request.get('https://1.2.3.4/').set('Host', 'example.com')\n  if (this._header.host) {\n    options.servername = this._header.host.replace(/:\\d+$/, '');\n  }\n  if (this._trustLocalhost && /^(?:localhost|127\\.0\\.0\\.\\d+|(0*:)+:0*1)$/.test(url.hostname)) {\n    options.rejectUnauthorized = false;\n  }\n\n  // initiate request\n  const module_ = this._enableHttp2 ? exports.protocols['http2:'].setProtocol(url.protocol) : exports.protocols[url.protocol];\n\n  // request\n  this.req = module_.request(options);\n  const req = this.req;\n\n  // set tcp no delay\n  req.setNoDelay(true);\n  if (options.method !== 'HEAD') {\n    req.setHeader('Accept-Encoding', 'gzip, deflate');\n  }\n  this.protocol = url.protocol;\n  this.host = url.host;\n\n  // expose events\n  req.once('drain', () => {\n    this.emit('drain');\n  });\n  req.on('error', error => {\n    // flag abortion here for out timeouts\n    // because node will emit a faux-error \"socket hang up\"\n    // when request is aborted before a connection is made\n    if (this._aborted) return;\n    // if not the same, we are in the **old** (cancelled) request,\n    // so need to continue (same as for above)\n    if (this._retries !== retries) return;\n    // if we've received a response then we don't want to let\n    // an error in the request blow up the response\n    if (this.response) return;\n    this.callback(error);\n  });\n\n  // auth\n  if (url.auth) {\n    const auth = url.auth.split(':');\n    this.auth(auth[0], auth[1]);\n  }\n  if (this.username && this.password) {\n    this.auth(this.username, this.password);\n  }\n  for (const key in this.header) {\n    if (hasOwn(this.header, key)) req.setHeader(key, this.header[key]);\n  }\n\n  // add cookies\n  if (this.cookies) {\n    if (hasOwn(this._header, 'cookie')) {\n      // merge\n      const temporaryJar = new CookieJar.CookieJar();\n      temporaryJar.setCookies(this._header.cookie.split(';'));\n      temporaryJar.setCookies(this.cookies.split(';'));\n      req.setHeader('Cookie', temporaryJar.getCookies(CookieJar.CookieAccessInfo.All).toValueString());\n    } else {\n      req.setHeader('Cookie', this.cookies);\n    }\n  }\n  return req;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function (error, res) {\n  if (this._shouldRetry(error, res)) {\n    return this._retry();\n  }\n\n  // Avoid the error which is emitted from 'socket hang up' to cause the fn undefined error on JS runtime.\n  const fn = this._callback || noop;\n  this.clearTimeout();\n  if (this.called) return console.warn('superagent: double callback bug');\n  this.called = true;\n  if (!error) {\n    try {\n      if (!this._isResponseOK(res)) {\n        let message = 'Unsuccessful HTTP response';\n        if (res) {\n          message = http.STATUS_CODES[res.status] || message;\n        }\n        error = new Error(message);\n        error.status = res ? res.status : undefined;\n      }\n    } catch (err) {\n      error = err;\n      error.status = error.status || (res ? res.status : undefined);\n    }\n  }\n\n  // It's important that the callback is called outside try/catch\n  // to avoid double callback\n  if (!error) {\n    return fn(null, res);\n  }\n  error.response = res;\n  if (this._maxRetries) error.retries = this._retries - 1;\n\n  // only emit error event if there is a listener\n  // otherwise we assume the callback to `.end()` will get the error\n  if (error && this.listeners('error').length > 0) {\n    this.emit('error', error);\n  }\n  fn(error, res);\n};\n\n/**\n * Check if `obj` is a host object,\n *\n * @param {Object} obj host object\n * @return {Boolean} is a host object\n * @api private\n */\nRequest.prototype._isHost = function (object) {\n  return Buffer.isBuffer(object) || object instanceof Stream || object instanceof FormData;\n};\n\n/**\n * Initiate request, invoking callback `fn(err, res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype._emitResponse = function (body, files) {\n  const response = new Response(this);\n  this.response = response;\n  response.redirects = this._redirectList;\n  if (undefined !== body) {\n    response.body = body;\n  }\n  response.files = files;\n  if (this._endCalled) {\n    response.pipe = function () {\n      throw new Error(\"end() has already been called, so it's too late to start piping\");\n    };\n  }\n  this.emit('response', response);\n  return response;\n};\nRequest.prototype.end = function (fn) {\n  this.request();\n  debug('%s %s', this.method, this.url);\n  if (this._endCalled) {\n    throw new Error('.end() was called twice. This is not supported in superagent');\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n  this._end();\n};\nRequest.prototype._end = function () {\n  if (this._aborted) return this.callback(new Error('The request has been aborted even before .end() was called'));\n  let data = this._data;\n  const req = this.req;\n  const method = this.method;\n  this._setTimeouts();\n\n  // body\n  if (method !== 'HEAD' && !req._headerSent) {\n    // serialize stuff\n    if (typeof data !== 'string') {\n      let contentType = req.getHeader('Content-Type');\n      // Parse out just the content type from the header (ignore the charset)\n      if (contentType) contentType = contentType.split(';')[0];\n      let serialize = this._serializer || exports.serialize[contentType];\n      if (!serialize && isJSON(contentType)) {\n        serialize = exports.serialize['application/json'];\n      }\n      if (serialize) data = serialize(data);\n    }\n\n    // content-length\n    if (data && !req.getHeader('Content-Length')) {\n      req.setHeader('Content-Length', Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data));\n    }\n  }\n\n  // response\n  // eslint-disable-next-line complexity\n  req.once('response', res => {\n    debug('%s %s -> %s', this.method, this.url, res.statusCode);\n    if (this._responseTimeoutTimer) {\n      clearTimeout(this._responseTimeoutTimer);\n    }\n    if (this.piped) {\n      return;\n    }\n    const max = this._maxRedirects;\n    const mime = utils.type(res.headers['content-type'] || '') || 'text/plain';\n    let type = mime.split('/')[0];\n    if (type) type = type.toLowerCase().trim();\n    const multipart = type === 'multipart';\n    const redirect = isRedirect(res.statusCode);\n    const responseType = this._responseType;\n    this.res = res;\n\n    // redirect\n    if (redirect && this._redirects++ !== max) {\n      return this._redirect(res);\n    }\n    if (this.method === 'HEAD') {\n      this.emit('end');\n      this.callback(null, this._emitResponse());\n      return;\n    }\n\n    // zlib support\n    if (this._shouldUnzip(res)) {\n      unzip(req, res);\n    }\n    let buffer = this._buffer;\n    if (buffer === undefined && mime in exports.buffer) {\n      buffer = Boolean(exports.buffer[mime]);\n    }\n    let parser = this._parser;\n    if (undefined === buffer && parser) {\n      console.warn(\"A custom superagent parser has been set, but buffering strategy for the parser hasn't been configured. Call `req.buffer(true or false)` or set `superagent.buffer[mime] = true or false`\");\n      buffer = true;\n    }\n    if (!parser) {\n      if (responseType) {\n        parser = exports.parse.image; // It's actually a generic Buffer\n        buffer = true;\n      } else if (multipart) {\n        const form = formidable();\n        parser = form.parse.bind(form);\n        buffer = true;\n      } else if (isBinary(mime)) {\n        parser = exports.parse.image;\n        buffer = true; // For backwards-compatibility buffering default is ad-hoc MIME-dependent\n      } else if (exports.parse[mime]) {\n        parser = exports.parse[mime];\n      } else if (type === 'text') {\n        parser = exports.parse.text;\n        buffer = buffer !== false;\n        // everyone wants their own white-labeled json\n      } else if (isJSON(mime)) {\n        parser = exports.parse['application/json'];\n        buffer = buffer !== false;\n      } else if (buffer) {\n        parser = exports.parse.text;\n      } else if (undefined === buffer) {\n        parser = exports.parse.image; // It's actually a generic Buffer\n        buffer = true;\n      }\n    }\n\n    // by default only buffer text/*, json and messed up thing from hell\n    if (undefined === buffer && isText(mime) || isJSON(mime)) {\n      buffer = true;\n    }\n    this._resBuffered = buffer;\n    let parserHandlesEnd = false;\n    if (buffer) {\n      // Protectiona against zip bombs and other nuisance\n      let responseBytesLeft = this._maxResponseSize || 200000000;\n      res.on('data', buf => {\n        responseBytesLeft -= buf.byteLength || buf.length > 0 ? buf.length : 0;\n        if (responseBytesLeft < 0) {\n          // This will propagate through error event\n          const error = new Error('Maximum response size reached');\n          error.code = 'ETOOLARGE';\n          // Parsers aren't required to observe error event,\n          // so would incorrectly report success\n          parserHandlesEnd = false;\n          // Will not emit error event\n          res.destroy(error);\n          // so we do callback now\n          this.callback(error, null);\n        }\n      });\n    }\n    if (parser) {\n      try {\n        // Unbuffered parsers are supposed to emit response early,\n        // which is weird BTW, because response.body won't be there.\n        parserHandlesEnd = buffer;\n        parser(res, (error, object, files) => {\n          if (this.timedout) {\n            // Timeout has already handled all callbacks\n            return;\n          }\n\n          // Intentional (non-timeout) abort is supposed to preserve partial response,\n          // even if it doesn't parse.\n          if (error && !this._aborted) {\n            return this.callback(error);\n          }\n          if (parserHandlesEnd) {\n            this.emit('end');\n            this.callback(null, this._emitResponse(object, files));\n          }\n        });\n      } catch (err) {\n        this.callback(err);\n        return;\n      }\n    }\n    this.res = res;\n\n    // unbuffered\n    if (!buffer) {\n      debug('unbuffered %s %s', this.method, this.url);\n      this.callback(null, this._emitResponse());\n      if (multipart) return; // allow multipart to handle end event\n      res.once('end', () => {\n        debug('end %s %s', this.method, this.url);\n        this.emit('end');\n      });\n      return;\n    }\n\n    // terminating events\n    res.once('error', error => {\n      parserHandlesEnd = false;\n      this.callback(error, null);\n    });\n    if (!parserHandlesEnd) res.once('end', () => {\n      debug('end %s %s', this.method, this.url);\n      // TODO: unless buffering emit earlier to stream\n      this.emit('end');\n      this.callback(null, this._emitResponse());\n    });\n  });\n  this.emit('request', this);\n  const getProgressMonitor = () => {\n    const lengthComputable = true;\n    const total = req.getHeader('Content-Length');\n    let loaded = 0;\n    const progress = new Stream.Transform();\n    progress._transform = (chunk, encoding, callback) => {\n      loaded += chunk.length;\n      this.emit('progress', {\n        direction: 'upload',\n        lengthComputable,\n        loaded,\n        total\n      });\n      callback(null, chunk);\n    };\n    return progress;\n  };\n  const bufferToChunks = buffer => {\n    const chunkSize = 16 * 1024; // default highWaterMark value\n    const chunking = new Stream.Readable();\n    const totalLength = buffer.length;\n    const remainder = totalLength % chunkSize;\n    const cutoff = totalLength - remainder;\n    for (let i = 0; i < cutoff; i += chunkSize) {\n      const chunk = buffer.slice(i, i + chunkSize);\n      chunking.push(chunk);\n    }\n    if (remainder > 0) {\n      const remainderBuffer = buffer.slice(-remainder);\n      chunking.push(remainderBuffer);\n    }\n    chunking.push(null); // no more data\n\n    return chunking;\n  };\n\n  // if a FormData instance got created, then we send that as the request body\n  const formData = this._formData;\n  if (formData) {\n    // set headers\n    const headers = formData.getHeaders();\n    for (const i in headers) {\n      if (hasOwn(headers, i)) {\n        debug('setting FormData header: \"%s: %s\"', i, headers[i]);\n        req.setHeader(i, headers[i]);\n      }\n    }\n\n    // attempt to get \"Content-Length\" header\n    formData.getLength((error, length) => {\n      // TODO: Add chunked encoding when no length (if err)\n      if (error) debug('formData.getLength had error', error, length);\n      debug('got FormData Content-Length: %s', length);\n      if (typeof length === 'number') {\n        req.setHeader('Content-Length', length);\n      }\n      formData.pipe(getProgressMonitor()).pipe(req);\n    });\n  } else if (Buffer.isBuffer(data)) {\n    bufferToChunks(data).pipe(getProgressMonitor()).pipe(req);\n  } else {\n    req.end(data);\n  }\n};\n\n// Check whether response has a non-0-sized gzip-encoded body\nRequest.prototype._shouldUnzip = res => {\n  if (res.statusCode === 204 || res.statusCode === 304) {\n    // These aren't supposed to have any body\n    return false;\n  }\n\n  // header content is a string, and distinction between 0 and no information is crucial\n  if (res.headers['content-length'] === '0') {\n    // We know that the body is empty (unfortunately, this check does not cover chunked encoding)\n    return false;\n  }\n\n  // console.log(res);\n  return /^\\s*(?:deflate|gzip)\\s*$/.test(res.headers['content-encoding']);\n};\n\n/**\n * Overrides DNS for selected hostnames. Takes object mapping hostnames to IP addresses.\n *\n * When making a request to a URL with a hostname exactly matching a key in the object,\n * use the given IP address to connect, instead of using DNS to resolve the hostname.\n *\n * A special host `*` matches every hostname (keep redirects in mind!)\n *\n *      request.connect({\n *        'test.example.com': '127.0.0.1',\n *        'ipv6.example.com': '::1',\n *      })\n */\nRequest.prototype.connect = function (connectOverride) {\n  if (typeof connectOverride === 'string') {\n    this._connectOverride = {\n      '*': connectOverride\n    };\n  } else if (typeof connectOverride === 'object') {\n    this._connectOverride = connectOverride;\n  } else {\n    this._connectOverride = undefined;\n  }\n  return this;\n};\nRequest.prototype.trustLocalhost = function (toggle) {\n  this._trustLocalhost = toggle === undefined ? true : toggle;\n  return this;\n};\n\n// generate HTTP verb methods\nif (!methods.includes('del')) {\n  // create a copy so we don't cause conflicts with\n  // other packages using the methods package and\n  // npm 3.x\n  methods = [...methods];\n  methods.push('del');\n}\nvar _iterator = _createForOfIteratorHelper(methods),\n  _step;\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    let method = _step.value;\n    const name = method;\n    method = method === 'del' ? 'delete' : method;\n    method = method.toUpperCase();\n    request[name] = (url, data, fn) => {\n      const request_ = request(method, url);\n      if (typeof data === 'function') {\n        fn = data;\n        data = null;\n      }\n      if (data) {\n        if (method === 'GET' || method === 'HEAD') {\n          request_.query(data);\n        } else {\n          request_.send(data);\n        }\n      }\n      if (fn) request_.end(fn);\n      return request_;\n    };\n  }\n\n  /**\n   * Check if `mime` is text and should be buffered.\n   *\n   * @param {String} mime\n   * @return {Boolean}\n   * @api public\n   */\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\nfunction isText(mime) {\n  const parts = mime.split('/');\n  let type = parts[0];\n  if (type) type = type.toLowerCase().trim();\n  let subtype = parts[1];\n  if (subtype) subtype = subtype.toLowerCase().trim();\n  return type === 'text' || subtype === 'x-www-form-urlencoded';\n}\n\n// This is not a catchall, but a start. It might be useful\n// in the long run to have file that includes all binary\n// content types from https://www.iana.org/assignments/media-types/media-types.xhtml\nfunction isBinary(mime) {\n  let _mime$split = mime.split('/'),\n    _mime$split2 = _slicedToArray(_mime$split, 2),\n    registry = _mime$split2[0],\n    name = _mime$split2[1];\n  if (registry) registry = registry.toLowerCase().trim();\n  if (name) name = name.toLowerCase().trim();\n  return ['audio', 'font', 'image', 'video'].includes(registry) || ['gz', 'gzip'].includes(name);\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  // should match /json or +json\n  // but not /json-seq\n  return /[/+]json($|[^-\\w])/i.test(mime);\n}\n\n/**\n * Check if we should follow the redirect `code`.\n *\n * @param {Number} code\n * @return {Boolean}\n * @api private\n */\n\nfunction isRedirect(code) {\n  return [301, 302, 303, 305, 307, 308].includes(code);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nmodule.exports = (res, fn) => {\n  const data = []; // Binary data needs binary storage\n\n  res.on('data', chunk => {\n    data.push(chunk);\n  });\n  res.on('end', () => {\n    fn(null, Buffer.concat(data));\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVzIiwiZm4iLCJkYXRhIiwib24iLCJjaHVuayIsInB1c2giLCJCdWZmZXIiLCJjb25jYXQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbm9kZS9wYXJzZXJzL2ltYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKHJlcywgZm4pID0+IHtcbiAgY29uc3QgZGF0YSA9IFtdOyAvLyBCaW5hcnkgZGF0YSBuZWVkcyBiaW5hcnkgc3RvcmFnZVxuXG4gIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgIGRhdGEucHVzaChjaHVuayk7XG4gIH0pO1xuICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICBmbihudWxsLCBCdWZmZXIuY29uY2F0KGRhdGEpKTtcbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxHQUFHLEVBQUVDLEVBQUUsS0FBSztFQUM1QixNQUFNQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7O0VBRWpCRixHQUFHLENBQUNHLEVBQUUsQ0FBQyxNQUFNLEVBQUdDLEtBQUssSUFBSztJQUN4QkYsSUFBSSxDQUFDRyxJQUFJLENBQUNELEtBQUssQ0FBQztFQUNsQixDQUFDLENBQUM7RUFDRkosR0FBRyxDQUFDRyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU07SUFDbEJGLEVBQUUsQ0FBQyxJQUFJLEVBQUVLLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDTCxJQUFJLENBQUMsQ0FBQztFQUMvQixDQUFDLENBQUM7QUFDSixDQUFDIn0=","\"use strict\";\n\nexports['application/x-www-form-urlencoded'] = require('./urlencoded');\nexports['application/json'] = require('./json');\nexports.text = require('./text');\nexports['application/json-seq'] = exports.text;\nconst binary = require('./image');\nexports['application/octet-stream'] = binary;\nexports['application/pdf'] = binary;\nexports.image = binary;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwicmVxdWlyZSIsInRleHQiLCJiaW5hcnkiLCJpbWFnZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ub2RlL3BhcnNlcnMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0c1snYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ10gPSByZXF1aXJlKCcuL3VybGVuY29kZWQnKTtcbmV4cG9ydHNbJ2FwcGxpY2F0aW9uL2pzb24nXSA9IHJlcXVpcmUoJy4vanNvbicpO1xuZXhwb3J0cy50ZXh0ID0gcmVxdWlyZSgnLi90ZXh0Jyk7XG5cbmV4cG9ydHNbJ2FwcGxpY2F0aW9uL2pzb24tc2VxJ10gPSBleHBvcnRzLnRleHQ7XG5cbmNvbnN0IGJpbmFyeSA9IHJlcXVpcmUoJy4vaW1hZ2UnKTtcblxuZXhwb3J0c1snYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10gPSBiaW5hcnk7XG5leHBvcnRzWydhcHBsaWNhdGlvbi9wZGYnXSA9IGJpbmFyeTtcbmV4cG9ydHMuaW1hZ2UgPSBiaW5hcnk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxHQUFHQyxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3RFRCxPQUFPLENBQUMsa0JBQWtCLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUMvQ0QsT0FBTyxDQUFDRSxJQUFJLEdBQUdELE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFFaENELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHQSxPQUFPLENBQUNFLElBQUk7QUFFOUMsTUFBTUMsTUFBTSxHQUFHRixPQUFPLENBQUMsU0FBUyxDQUFDO0FBRWpDRCxPQUFPLENBQUMsMEJBQTBCLENBQUMsR0FBR0csTUFBTTtBQUM1Q0gsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUdHLE1BQU07QUFDbkNILE9BQU8sQ0FBQ0ksS0FBSyxHQUFHRCxNQUFNIn0=","\"use strict\";\n\nmodule.exports = function (res, fn) {\n  res.text = '';\n  res.setEncoding('utf8');\n  res.on('data', chunk => {\n    res.text += chunk;\n  });\n  res.on('end', () => {\n    let body;\n    let error;\n    try {\n      body = res.text && JSON.parse(res.text);\n    } catch (err) {\n      error = err;\n      // issue #675: return the raw response if the response parsing fails\n      error.rawResponse = res.text || null;\n      // issue #876: return the http status code if the response parsing fails\n      error.statusCode = res.statusCode;\n    } finally {\n      fn(error, body);\n    }\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVzIiwiZm4iLCJ0ZXh0Iiwic2V0RW5jb2RpbmciLCJvbiIsImNodW5rIiwiYm9keSIsImVycm9yIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwicmF3UmVzcG9uc2UiLCJzdGF0dXNDb2RlIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25vZGUvcGFyc2Vycy9qc29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlcywgZm4pIHtcbiAgcmVzLnRleHQgPSAnJztcbiAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgIHJlcy50ZXh0ICs9IGNodW5rO1xuICB9KTtcbiAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgbGV0IGJvZHk7XG4gICAgbGV0IGVycm9yO1xuICAgIHRyeSB7XG4gICAgICBib2R5ID0gcmVzLnRleHQgJiYgSlNPTi5wYXJzZShyZXMudGV4dCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBlcnJvciA9IGVycjtcbiAgICAgIC8vIGlzc3VlICM2NzU6IHJldHVybiB0aGUgcmF3IHJlc3BvbnNlIGlmIHRoZSByZXNwb25zZSBwYXJzaW5nIGZhaWxzXG4gICAgICBlcnJvci5yYXdSZXNwb25zZSA9IHJlcy50ZXh0IHx8IG51bGw7XG4gICAgICAvLyBpc3N1ZSAjODc2OiByZXR1cm4gdGhlIGh0dHAgc3RhdHVzIGNvZGUgaWYgdGhlIHJlc3BvbnNlIHBhcnNpbmcgZmFpbHNcbiAgICAgIGVycm9yLnN0YXR1c0NvZGUgPSByZXMuc3RhdHVzQ29kZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZm4oZXJyb3IsIGJvZHkpO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLEVBQUUsRUFBRTtFQUNsQ0QsR0FBRyxDQUFDRSxJQUFJLEdBQUcsRUFBRTtFQUNiRixHQUFHLENBQUNHLFdBQVcsQ0FBQyxNQUFNLENBQUM7RUFDdkJILEdBQUcsQ0FBQ0ksRUFBRSxDQUFDLE1BQU0sRUFBR0MsS0FBSyxJQUFLO0lBQ3hCTCxHQUFHLENBQUNFLElBQUksSUFBSUcsS0FBSztFQUNuQixDQUFDLENBQUM7RUFDRkwsR0FBRyxDQUFDSSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU07SUFDbEIsSUFBSUUsSUFBSTtJQUNSLElBQUlDLEtBQUs7SUFDVCxJQUFJO01BQ0ZELElBQUksR0FBR04sR0FBRyxDQUFDRSxJQUFJLElBQUlNLElBQUksQ0FBQ0MsS0FBSyxDQUFDVCxHQUFHLENBQUNFLElBQUksQ0FBQztJQUN6QyxDQUFDLENBQUMsT0FBT1EsR0FBRyxFQUFFO01BQ1pILEtBQUssR0FBR0csR0FBRztNQUNYO01BQ0FILEtBQUssQ0FBQ0ksV0FBVyxHQUFHWCxHQUFHLENBQUNFLElBQUksSUFBSSxJQUFJO01BQ3BDO01BQ0FLLEtBQUssQ0FBQ0ssVUFBVSxHQUFHWixHQUFHLENBQUNZLFVBQVU7SUFDbkMsQ0FBQyxTQUFTO01BQ1JYLEVBQUUsQ0FBQ00sS0FBSyxFQUFFRCxJQUFJLENBQUM7SUFDakI7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDIn0=","\"use strict\";\n\nmodule.exports = (res, fn) => {\n  res.text = '';\n  res.setEncoding('utf8');\n  res.on('data', chunk => {\n    res.text += chunk;\n  });\n  res.on('end', fn);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVzIiwiZm4iLCJ0ZXh0Iiwic2V0RW5jb2RpbmciLCJvbiIsImNodW5rIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25vZGUvcGFyc2Vycy90ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKHJlcywgZm4pID0+IHtcbiAgcmVzLnRleHQgPSAnJztcbiAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgIHJlcy50ZXh0ICs9IGNodW5rO1xuICB9KTtcbiAgcmVzLm9uKCdlbmQnLCBmbik7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxHQUFHLEVBQUVDLEVBQUUsS0FBSztFQUM1QkQsR0FBRyxDQUFDRSxJQUFJLEdBQUcsRUFBRTtFQUNiRixHQUFHLENBQUNHLFdBQVcsQ0FBQyxNQUFNLENBQUM7RUFDdkJILEdBQUcsQ0FBQ0ksRUFBRSxDQUFDLE1BQU0sRUFBR0MsS0FBSyxJQUFLO0lBQ3hCTCxHQUFHLENBQUNFLElBQUksSUFBSUcsS0FBSztFQUNuQixDQUFDLENBQUM7RUFDRkwsR0FBRyxDQUFDSSxFQUFFLENBQUMsS0FBSyxFQUFFSCxFQUFFLENBQUM7QUFDbkIsQ0FBQyJ9","\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nconst qs = require('qs');\nmodule.exports = (res, fn) => {\n  res.text = '';\n  res.setEncoding('ascii');\n  res.on('data', chunk => {\n    res.text += chunk;\n  });\n  res.on('end', () => {\n    try {\n      fn(null, qs.parse(res.text));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJxcyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVzIiwiZm4iLCJ0ZXh0Iiwic2V0RW5jb2RpbmciLCJvbiIsImNodW5rIiwicGFyc2UiLCJlcnIiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbm9kZS9wYXJzZXJzL3VybGVuY29kZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IHFzID0gcmVxdWlyZSgncXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAocmVzLCBmbikgPT4ge1xuICByZXMudGV4dCA9ICcnO1xuICByZXMuc2V0RW5jb2RpbmcoJ2FzY2lpJyk7XG4gIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgIHJlcy50ZXh0ICs9IGNodW5rO1xuICB9KTtcbiAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKG51bGwsIHFzLnBhcnNlKHJlcy50ZXh0KSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBmbihlcnIpO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFFeEJDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLENBQUNDLEdBQUcsRUFBRUMsRUFBRSxLQUFLO0VBQzVCRCxHQUFHLENBQUNFLElBQUksR0FBRyxFQUFFO0VBQ2JGLEdBQUcsQ0FBQ0csV0FBVyxDQUFDLE9BQU8sQ0FBQztFQUN4QkgsR0FBRyxDQUFDSSxFQUFFLENBQUMsTUFBTSxFQUFHQyxLQUFLLElBQUs7SUFDeEJMLEdBQUcsQ0FBQ0UsSUFBSSxJQUFJRyxLQUFLO0VBQ25CLENBQUMsQ0FBQztFQUNGTCxHQUFHLENBQUNJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTTtJQUNsQixJQUFJO01BQ0ZILEVBQUUsQ0FBQyxJQUFJLEVBQUVMLEVBQUUsQ0FBQ1UsS0FBSyxDQUFDTixHQUFHLENBQUNFLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxPQUFPSyxHQUFHLEVBQUU7TUFDWk4sRUFBRSxDQUFDTSxHQUFHLENBQUM7SUFDVDtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMifQ==","\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nconst util = require('util');\nconst Stream = require('stream');\nconst ResponseBase = require('../response-base');\nconst _require = require('../utils'),\n  mixin = _require.mixin;\n\n/**\n * Expose `Response`.\n */\n\nmodule.exports = Response;\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * @param {Request} req\n * @param {Object} options\n * @constructor\n * @extends {Stream}\n * @implements {ReadableStream}\n * @api private\n */\n\nfunction Response(request) {\n  Stream.call(this);\n  this.res = request.res;\n  const res = this.res;\n  this.request = request;\n  this.req = request.req;\n  this.text = res.text;\n  this.files = res.files || {};\n  this.buffered = request._resBuffered;\n  this.headers = res.headers;\n  this.header = this.headers;\n  this._setStatusProperties(res.statusCode);\n  this._setHeaderProperties(this.header);\n  this.setEncoding = res.setEncoding.bind(res);\n  res.on('data', this.emit.bind(this, 'data'));\n  res.on('end', this.emit.bind(this, 'end'));\n  res.on('close', this.emit.bind(this, 'close'));\n  res.on('error', this.emit.bind(this, 'error'));\n}\n\n// Lazy access res.body.\n// https://github.com/nodejs/node/pull/39520#issuecomment-889697136\nObject.defineProperty(Response.prototype, 'body', {\n  get() {\n    return this._body !== undefined ? this._body : this.res.body !== undefined ? this.res.body : {};\n  },\n  set(value) {\n    this._body = value;\n  }\n});\n\n/**\n * Inherit from `Stream`.\n */\n\nutil.inherits(Response, Stream);\nmixin(Response.prototype, ResponseBase.prototype);\n\n/**\n * Implements methods of a `ReadableStream`\n */\n\nResponse.prototype.destroy = function (error) {\n  this.res.destroy(error);\n};\n\n/**\n * Pause.\n */\n\nResponse.prototype.pause = function () {\n  this.res.pause();\n};\n\n/**\n * Resume.\n */\n\nResponse.prototype.resume = function () {\n  this.res.resume();\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function () {\n  const req = this.req;\n  const method = req.method;\n  const path = req.path;\n  const message = `cannot ${method} ${path} (${this.status})`;\n  const error = new Error(message);\n  error.status = this.status;\n  error.text = this.text;\n  error.method = method;\n  error.path = path;\n  return error;\n};\nResponse.prototype.setStatusProperties = function (status) {\n  console.warn('In superagent 2.x setStatusProperties is a private method');\n  return this._setStatusProperties(status);\n};\n\n/**\n * To json.\n *\n * @return {Object}\n * @api public\n */\n\nResponse.prototype.toJSON = function () {\n  return {\n    req: this.request.toJSON(),\n    header: this.header,\n    status: this.status,\n    text: this.text\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nconst _require = require('string_decoder'),\n  StringDecoder = _require.StringDecoder;\nconst Stream = require('stream');\nconst zlib = require('zlib');\n\n/**\n * Buffers response data events and re-emits when they're unzipped.\n *\n * @param {Request} req\n * @param {Response} res\n * @api private\n */\n\nexports.unzip = (request, res) => {\n  const unzip = zlib.createUnzip();\n  const stream = new Stream();\n  let decoder;\n\n  // make node responseOnEnd() happy\n  stream.req = request;\n  unzip.on('error', error => {\n    if (error && error.code === 'Z_BUF_ERROR') {\n      // unexpected end of file is ignored by browsers and curl\n      stream.emit('end');\n      return;\n    }\n    stream.emit('error', error);\n  });\n\n  // pipe to unzip\n  res.pipe(unzip);\n\n  // override `setEncoding` to capture encoding\n  res.setEncoding = type => {\n    decoder = new StringDecoder(type);\n  };\n\n  // decode upon decompressing with captured encoding\n  unzip.on('data', buf => {\n    if (decoder) {\n      const string_ = decoder.write(buf);\n      if (string_.length > 0) stream.emit('data', string_);\n    } else {\n      stream.emit('data', buf);\n    }\n  });\n  unzip.on('end', () => {\n    stream.emit('end');\n  });\n\n  // override `on` to capture data listeners\n  const _on = res.on;\n  res.on = function (type, fn) {\n    if (type === 'data' || type === 'end') {\n      stream.on(type, fn.bind(res));\n    } else if (type === 'error') {\n      stream.on(type, fn.bind(res));\n      _on.call(res, type, fn);\n    } else {\n      _on.call(res, type, fn);\n    }\n    return this;\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiU3RyaW5nRGVjb2RlciIsIlN0cmVhbSIsInpsaWIiLCJleHBvcnRzIiwidW56aXAiLCJyZXF1ZXN0IiwicmVzIiwiY3JlYXRlVW56aXAiLCJzdHJlYW0iLCJkZWNvZGVyIiwicmVxIiwib24iLCJlcnJvciIsImNvZGUiLCJlbWl0IiwicGlwZSIsInNldEVuY29kaW5nIiwidHlwZSIsImJ1ZiIsInN0cmluZ18iLCJ3cml0ZSIsImxlbmd0aCIsIl9vbiIsImZuIiwiYmluZCIsImNhbGwiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbm9kZS91bnppcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgeyBTdHJpbmdEZWNvZGVyIH0gPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpO1xuY29uc3QgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5jb25zdCB6bGliID0gcmVxdWlyZSgnemxpYicpO1xuXG4vKipcbiAqIEJ1ZmZlcnMgcmVzcG9uc2UgZGF0YSBldmVudHMgYW5kIHJlLWVtaXRzIHdoZW4gdGhleSdyZSB1bnppcHBlZC5cbiAqXG4gKiBAcGFyYW0ge1JlcXVlc3R9IHJlcVxuICogQHBhcmFtIHtSZXNwb25zZX0gcmVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnVuemlwID0gKHJlcXVlc3QsIHJlcykgPT4ge1xuICBjb25zdCB1bnppcCA9IHpsaWIuY3JlYXRlVW56aXAoKTtcbiAgY29uc3Qgc3RyZWFtID0gbmV3IFN0cmVhbSgpO1xuICBsZXQgZGVjb2RlcjtcblxuICAvLyBtYWtlIG5vZGUgcmVzcG9uc2VPbkVuZCgpIGhhcHB5XG4gIHN0cmVhbS5yZXEgPSByZXF1ZXN0O1xuXG4gIHVuemlwLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvciAmJiBlcnJvci5jb2RlID09PSAnWl9CVUZfRVJST1InKSB7XG4gICAgICAvLyB1bmV4cGVjdGVkIGVuZCBvZiBmaWxlIGlzIGlnbm9yZWQgYnkgYnJvd3NlcnMgYW5kIGN1cmxcbiAgICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gIH0pO1xuXG4gIC8vIHBpcGUgdG8gdW56aXBcbiAgcmVzLnBpcGUodW56aXApO1xuXG4gIC8vIG92ZXJyaWRlIGBzZXRFbmNvZGluZ2AgdG8gY2FwdHVyZSBlbmNvZGluZ1xuICByZXMuc2V0RW5jb2RpbmcgPSAodHlwZSkgPT4ge1xuICAgIGRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2Rlcih0eXBlKTtcbiAgfTtcblxuICAvLyBkZWNvZGUgdXBvbiBkZWNvbXByZXNzaW5nIHdpdGggY2FwdHVyZWQgZW5jb2RpbmdcbiAgdW56aXAub24oJ2RhdGEnLCAoYnVmKSA9PiB7XG4gICAgaWYgKGRlY29kZXIpIHtcbiAgICAgIGNvbnN0IHN0cmluZ18gPSBkZWNvZGVyLndyaXRlKGJ1Zik7XG4gICAgICBpZiAoc3RyaW5nXy5sZW5ndGggPiAwKSBzdHJlYW0uZW1pdCgnZGF0YScsIHN0cmluZ18pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGJ1Zik7XG4gICAgfVxuICB9KTtcblxuICB1bnppcC5vbignZW5kJywgKCkgPT4ge1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfSk7XG5cbiAgLy8gb3ZlcnJpZGUgYG9uYCB0byBjYXB0dXJlIGRhdGEgbGlzdGVuZXJzXG4gIGNvbnN0IF9vbiA9IHJlcy5vbjtcbiAgcmVzLm9uID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gICAgaWYgKHR5cGUgPT09ICdkYXRhJyB8fCB0eXBlID09PSAnZW5kJykge1xuICAgICAgc3RyZWFtLm9uKHR5cGUsIGZuLmJpbmQocmVzKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgICBzdHJlYW0ub24odHlwZSwgZm4uYmluZChyZXMpKTtcbiAgICAgIF9vbi5jYWxsKHJlcywgdHlwZSwgZm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfb24uY2FsbChyZXMsIHR5cGUsIGZuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBOztBQUVBLGlCQUEwQkEsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0VBQTNDQyxhQUFhLFlBQWJBLGFBQWE7QUFDckIsTUFBTUMsTUFBTSxHQUFHRixPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ2hDLE1BQU1HLElBQUksR0FBR0gsT0FBTyxDQUFDLE1BQU0sQ0FBQzs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFJLE9BQU8sQ0FBQ0MsS0FBSyxHQUFHLENBQUNDLE9BQU8sRUFBRUMsR0FBRyxLQUFLO0VBQ2hDLE1BQU1GLEtBQUssR0FBR0YsSUFBSSxDQUFDSyxXQUFXLEVBQUU7RUFDaEMsTUFBTUMsTUFBTSxHQUFHLElBQUlQLE1BQU0sRUFBRTtFQUMzQixJQUFJUSxPQUFPOztFQUVYO0VBQ0FELE1BQU0sQ0FBQ0UsR0FBRyxHQUFHTCxPQUFPO0VBRXBCRCxLQUFLLENBQUNPLEVBQUUsQ0FBQyxPQUFPLEVBQUdDLEtBQUssSUFBSztJQUMzQixJQUFJQSxLQUFLLElBQUlBLEtBQUssQ0FBQ0MsSUFBSSxLQUFLLGFBQWEsRUFBRTtNQUN6QztNQUNBTCxNQUFNLENBQUNNLElBQUksQ0FBQyxLQUFLLENBQUM7TUFDbEI7SUFDRjtJQUVBTixNQUFNLENBQUNNLElBQUksQ0FBQyxPQUFPLEVBQUVGLEtBQUssQ0FBQztFQUM3QixDQUFDLENBQUM7O0VBRUY7RUFDQU4sR0FBRyxDQUFDUyxJQUFJLENBQUNYLEtBQUssQ0FBQzs7RUFFZjtFQUNBRSxHQUFHLENBQUNVLFdBQVcsR0FBSUMsSUFBSSxJQUFLO0lBQzFCUixPQUFPLEdBQUcsSUFBSVQsYUFBYSxDQUFDaUIsSUFBSSxDQUFDO0VBQ25DLENBQUM7O0VBRUQ7RUFDQWIsS0FBSyxDQUFDTyxFQUFFLENBQUMsTUFBTSxFQUFHTyxHQUFHLElBQUs7SUFDeEIsSUFBSVQsT0FBTyxFQUFFO01BQ1gsTUFBTVUsT0FBTyxHQUFHVixPQUFPLENBQUNXLEtBQUssQ0FBQ0YsR0FBRyxDQUFDO01BQ2xDLElBQUlDLE9BQU8sQ0FBQ0UsTUFBTSxHQUFHLENBQUMsRUFBRWIsTUFBTSxDQUFDTSxJQUFJLENBQUMsTUFBTSxFQUFFSyxPQUFPLENBQUM7SUFDdEQsQ0FBQyxNQUFNO01BQ0xYLE1BQU0sQ0FBQ00sSUFBSSxDQUFDLE1BQU0sRUFBRUksR0FBRyxDQUFDO0lBQzFCO0VBQ0YsQ0FBQyxDQUFDO0VBRUZkLEtBQUssQ0FBQ08sRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNO0lBQ3BCSCxNQUFNLENBQUNNLElBQUksQ0FBQyxLQUFLLENBQUM7RUFDcEIsQ0FBQyxDQUFDOztFQUVGO0VBQ0EsTUFBTVEsR0FBRyxHQUFHaEIsR0FBRyxDQUFDSyxFQUFFO0VBQ2xCTCxHQUFHLENBQUNLLEVBQUUsR0FBRyxVQUFVTSxJQUFJLEVBQUVNLEVBQUUsRUFBRTtJQUMzQixJQUFJTixJQUFJLEtBQUssTUFBTSxJQUFJQSxJQUFJLEtBQUssS0FBSyxFQUFFO01BQ3JDVCxNQUFNLENBQUNHLEVBQUUsQ0FBQ00sSUFBSSxFQUFFTSxFQUFFLENBQUNDLElBQUksQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUMsTUFBTSxJQUFJVyxJQUFJLEtBQUssT0FBTyxFQUFFO01BQzNCVCxNQUFNLENBQUNHLEVBQUUsQ0FBQ00sSUFBSSxFQUFFTSxFQUFFLENBQUNDLElBQUksQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDO01BQzdCZ0IsR0FBRyxDQUFDRyxJQUFJLENBQUNuQixHQUFHLEVBQUVXLElBQUksRUFBRU0sRUFBRSxDQUFDO0lBQ3pCLENBQUMsTUFBTTtNQUNMRCxHQUFHLENBQUNHLElBQUksQ0FBQ25CLEdBQUcsRUFBRVcsSUFBSSxFQUFFTSxFQUFFLENBQUM7SUFDekI7SUFFQSxPQUFPLElBQUk7RUFDYixDQUFDO0FBQ0gsQ0FBQyJ9","\"use strict\";\n\nconst semver = require('semver');\n\n/**\n * Module of mixed-in functions shared between node and client code\n */\nconst _require = require('./utils'),\n  isObject = _require.isObject,\n  hasOwn = _require.hasOwn;\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase() {}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function () {\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  clearTimeout(this._uploadTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  delete this._uploadTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function (fn) {\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function (value) {\n  this._responseType = value;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function (fn) {\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n * - upload is the time  since last bit of data was sent or received. This timeout works only if deadline timeout is off\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function (options) {\n  if (!options || typeof options !== 'object') {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    this._uploadTimeout = 0;\n    return this;\n  }\n  for (const option in options) {\n    if (hasOwn(options, option)) {\n      switch (option) {\n        case 'deadline':\n          this._timeout = options.deadline;\n          break;\n        case 'response':\n          this._responseTimeout = options.response;\n          break;\n        case 'upload':\n          this._uploadTimeout = options.upload;\n          break;\n        default:\n          console.warn('Unknown timeout option', option);\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @param {Function} [fn]\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function (count, fn) {\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  this._retryCallback = fn;\n  return this;\n};\n\n//\n// NOTE: we do not include ESOCKETTIMEDOUT because that is from `request` package\n//       <https://github.com/sindresorhus/got/pull/537>\n//\n// NOTE: we do not include EADDRINFO because it was removed from libuv in 2014\n//       <https://github.com/libuv/libuv/commit/02e1ebd40b807be5af46343ea873331b2ee4e9c1>\n//       <https://github.com/request/request/search?q=ESOCKETTIMEDOUT&unscoped_q=ESOCKETTIMEDOUT>\n//\n//\n// TODO: expose these as configurable defaults\n//\nconst ERROR_CODES = new Set(['ETIMEDOUT', 'ECONNRESET', 'EADDRINUSE', 'ECONNREFUSED', 'EPIPE', 'ENOTFOUND', 'ENETUNREACH', 'EAI_AGAIN']);\nconst STATUS_CODES = new Set([408, 413, 429, 500, 502, 503, 504, 521, 522, 524]);\n\n// TODO: we would need to make this easily configurable before adding it in (e.g. some might want to add POST)\n// const METHODS = new Set(['GET', 'PUT', 'HEAD', 'DELETE', 'OPTIONS', 'TRACE']);\n\n/**\n * Determine if a request should be retried.\n * (Inspired by https://github.com/sindresorhus/got#retry)\n *\n * @param {Error} err an error\n * @param {Response} [res] response\n * @returns {Boolean} if segment should be retried\n */\nRequestBase.prototype._shouldRetry = function (error, res) {\n  if (!this._maxRetries || this._retries++ >= this._maxRetries) {\n    return false;\n  }\n  if (this._retryCallback) {\n    try {\n      const override = this._retryCallback(error, res);\n      if (override === true) return true;\n      if (override === false) return false;\n      // undefined falls back to defaults\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  // TODO: we would need to make this easily configurable before adding it in (e.g. some might want to add POST)\n  /*\n  if (\n    this.req &&\n    this.req.method &&\n    !METHODS.has(this.req.method.toUpperCase())\n  )\n    return false;\n  */\n  if (res && res.status && STATUS_CODES.has(res.status)) return true;\n  if (error) {\n    if (error.code && ERROR_CODES.has(error.code)) return true;\n    // Superagent timeout\n    if (error.timeout && error.code === 'ECONNABORTED') return true;\n    if (error.crossDomain) return true;\n  }\n  return false;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function () {\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n  this._aborted = false;\n  this.timedout = false;\n  this.timedoutError = null;\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function (resolve, reject) {\n  if (!this._fullfilledPromise) {\n    const self = this;\n    if (this._endCalled) {\n      console.warn('Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises');\n    }\n    this._fullfilledPromise = new Promise((resolve, reject) => {\n      self.on('abort', () => {\n        if (this._maxRetries && this._maxRetries > this._retries) {\n          return;\n        }\n        if (this.timedout && this.timedoutError) {\n          reject(this.timedoutError);\n          return;\n        }\n        const error = new Error('Aborted');\n        error.code = 'ABORTED';\n        error.status = this.status;\n        error.method = this.method;\n        error.url = this.url;\n        reject(error);\n      });\n      self.end((error, res) => {\n        if (error) reject(error);else resolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n};\nRequestBase.prototype.catch = function (callback) {\n  return this.then(undefined, callback);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function (fn) {\n  fn(this);\n  return this;\n};\nRequestBase.prototype.ok = function (callback) {\n  if (typeof callback !== 'function') throw new Error('Callback required');\n  this._okCallback = callback;\n  return this;\n};\nRequestBase.prototype._isResponseOK = function (res) {\n  if (!res) {\n    return false;\n  }\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n  return res.status >= 200 && res.status < 300;\n};\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function (field) {\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function (field, value) {\n  if (isObject(field)) {\n    for (const key in field) {\n      if (hasOwn(field, key)) this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = value;\n  this.header[field] = value;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field field name\n */\nRequestBase.prototype.unset = function (field) {\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name name of field\n * @param {String|Blob|File|Buffer|fs.ReadStream} val value of field\n * @param {String} options extra options, e.g. 'blob'\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function (name, value, options) {\n  // name should be either a string or an object.\n  if (name === null || undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n  if (this._data) {\n    throw new Error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n  if (isObject(name)) {\n    for (const key in name) {\n      if (hasOwn(name, key)) this.field(key, name[key]);\n    }\n    return this;\n  }\n  if (Array.isArray(value)) {\n    for (const i in value) {\n      if (hasOwn(value, i)) this.field(name, value[i]);\n    }\n    return this;\n  }\n\n  // val should be defined now\n  if (value === null || undefined === value) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  // fix https://github.com/ladjs/superagent/issues/1680\n  if (options) this._getFormData().append(name, value, options);else this._getFormData().append(name, value);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request} request\n * @api public\n */\nRequestBase.prototype.abort = function () {\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  if (this.xhr) this.xhr.abort(); // browser\n  if (this.req) {\n    // Node v13 has major differences in `abort()`\n    // https://github.com/nodejs/node/blob/v12.x/lib/internal/streams/end-of-stream.js\n    // https://github.com/nodejs/node/blob/v13.x/lib/internal/streams/end-of-stream.js\n    // https://github.com/nodejs/node/blob/v14.x/lib/internal/streams/end-of-stream.js\n    // (if you run a diff across these you will see the differences)\n    //\n    // References:\n    // <https://github.com/nodejs/node/issues/31630>\n    // <https://github.com/ladjs/superagent/pull/1084/commits/dc18679a7c5ccfc6046d882015e5126888973bc8>\n    //\n    // Thanks to @shadowgate15 and @niftylettuce\n    if (semver.gte(process.version, 'v13.0.0') && semver.lt(process.version, 'v14.0.0')) {\n      // Note that the reason this doesn't work is because in v13 as compared to v14\n      // there is no `callback = nop` set in end-of-stream.js above\n      throw new Error('Superagent does not work in v13 properly with abort() due to Node.js core changes');\n    } else if (semver.gte(process.version, 'v14.0.0')) {\n      // We have to manually set `destroyed` to `true` in order for this to work\n      // (see core internals of end-of-stream.js above in v14 branch as compared to v12)\n      this.req.destroyed = true;\n    }\n    this.req.abort(); // node\n  }\n\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\nRequestBase.prototype._auth = function (user, pass, options, base64Encoder) {\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', `Basic ${base64Encoder(`${user}:${pass}`)}`);\n      break;\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n    case 'bearer':\n      // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', `Bearer ${user}`);\n      break;\n    default:\n      break;\n  }\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n * @param {Boolean} [on=true] - Set 'withCredentials' state\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function (on) {\n  // This is browser-only functionality. Node side is no-op.\n  if (on === undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does nothing in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function (n) {\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Maximum size of buffered response body, in bytes. Counts uncompressed size.\n * Default 200MB.\n *\n * @param {Number} n number of bytes\n * @return {Request} for chaining\n */\nRequestBase.prototype.maxResponseSize = function (n) {\n  if (typeof n !== 'number') {\n    throw new TypeError('Invalid argument');\n  }\n  this._maxResponseSize = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function () {\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header\n  };\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\n// eslint-disable-next-line complexity\nRequestBase.prototype.send = function (data) {\n  const isObject_ = isObject(data);\n  let type = this._header['content-type'];\n  if (this._formData) {\n    throw new Error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n  if (isObject_ && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw new Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObject_ && isObject(this._data)) {\n    for (const key in data) {\n      if (hasOwn(data, key)) this._data[key] = data[key];\n    }\n  } else if (typeof data === 'string') {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if (type) type = type.toLowerCase().trim();\n    if (type === 'application/x-www-form-urlencoded') {\n      this._data = this._data ? `${this._data}&${data}` : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n  if (!isObject_ || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function (sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\nRequestBase.prototype._finalizeQueryString = function () {\n  const query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.includes('?') ? '&' : '?') + query;\n  }\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    const index = this.url.indexOf('?');\n    if (index >= 0) {\n      const queryArray = this.url.slice(index + 1).split('&');\n      if (typeof this._sort === 'function') {\n        queryArray.sort(this._sort);\n      } else {\n        queryArray.sort();\n      }\n      this.url = this.url.slice(0, index) + '?' + queryArray.join('&');\n    }\n  }\n};\n\n// For backwards compat only\nRequestBase.prototype._appendQueryString = () => {\n  console.warn('Unsupported');\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function (reason, timeout, errno) {\n  if (this._aborted) {\n    return;\n  }\n  const error = new Error(`${reason + timeout}ms exceeded`);\n  error.timeout = timeout;\n  error.code = 'ECONNABORTED';\n  error.errno = errno;\n  this.timedout = true;\n  this.timedoutError = error;\n  this.abort();\n  this.callback(error);\n};\nRequestBase.prototype._setTimeouts = function () {\n  const self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(() => {\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(() => {\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nconst utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase() {}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n\n  // content-type\n  const ct = header['content-type'] || '';\n  this.type = utils.type(ct);\n\n  // params\n  const parameters = utils.params(ct);\n  for (const key in parameters) {\n    if (Object.prototype.hasOwnProperty.call(parameters, key)) this[key] = parameters[key];\n  }\n  this.links = {};\n\n  // links\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch (err) {\n    // ignore\n  }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  const type = Math.trunc(status / 100);\n\n  // status / class\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type;\n\n  // basics\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false;\n\n  // sugar\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiUmVzcG9uc2VCYXNlIiwicHJvdG90eXBlIiwiZ2V0IiwiZmllbGQiLCJoZWFkZXIiLCJ0b0xvd2VyQ2FzZSIsIl9zZXRIZWFkZXJQcm9wZXJ0aWVzIiwiY3QiLCJ0eXBlIiwicGFyYW1ldGVycyIsInBhcmFtcyIsImtleSIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImxpbmtzIiwibGluayIsInBhcnNlTGlua3MiLCJlcnIiLCJfc2V0U3RhdHVzUHJvcGVydGllcyIsInN0YXR1cyIsIk1hdGgiLCJ0cnVuYyIsInN0YXR1c0NvZGUiLCJzdGF0dXNUeXBlIiwiaW5mbyIsIm9rIiwicmVkaXJlY3QiLCJjbGllbnRFcnJvciIsInNlcnZlckVycm9yIiwiZXJyb3IiLCJ0b0Vycm9yIiwiY3JlYXRlZCIsImFjY2VwdGVkIiwibm9Db250ZW50IiwiYmFkUmVxdWVzdCIsInVuYXV0aG9yaXplZCIsIm5vdEFjY2VwdGFibGUiLCJmb3JiaWRkZW4iLCJub3RGb3VuZCIsInVucHJvY2Vzc2FibGVFbnRpdHkiXSwic291cmNlcyI6WyIuLi9zcmMvcmVzcG9uc2UtYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8qKlxuICogRXhwb3NlIGBSZXNwb25zZUJhc2VgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2VCYXNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlc3BvbnNlQmFzZWAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXNwb25zZUJhc2UoKSB7fVxuXG4vKipcbiAqIEdldCBjYXNlLWluc2Vuc2l0aXZlIGBmaWVsZGAgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlQmFzZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gIHJldHVybiB0aGlzLmhlYWRlcltmaWVsZC50b0xvd2VyQ2FzZSgpXTtcbn07XG5cbi8qKlxuICogU2V0IGhlYWRlciByZWxhdGVkIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGAudHlwZWAgdGhlIGNvbnRlbnQgdHlwZSB3aXRob3V0IHBhcmFtc1xuICpcbiAqIEEgcmVzcG9uc2Ugb2YgXCJDb250ZW50LVR5cGU6IHRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThcIlxuICogd2lsbCBwcm92aWRlIHlvdSB3aXRoIGEgYC50eXBlYCBvZiBcInRleHQvcGxhaW5cIi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXNwb25zZUJhc2UucHJvdG90eXBlLl9zZXRIZWFkZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGhlYWRlcikge1xuICAvLyBUT0RPOiBtb2FyIVxuICAvLyBUT0RPOiBtYWtlIHRoaXMgYSB1dGlsXG5cbiAgLy8gY29udGVudC10eXBlXG4gIGNvbnN0IGN0ID0gaGVhZGVyWydjb250ZW50LXR5cGUnXSB8fCAnJztcbiAgdGhpcy50eXBlID0gdXRpbHMudHlwZShjdCk7XG5cbiAgLy8gcGFyYW1zXG4gIGNvbnN0IHBhcmFtZXRlcnMgPSB1dGlscy5wYXJhbXMoY3QpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbWV0ZXJzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbWV0ZXJzLCBrZXkpKVxuICAgICAgdGhpc1trZXldID0gcGFyYW1ldGVyc1trZXldO1xuICB9XG5cbiAgdGhpcy5saW5rcyA9IHt9O1xuXG4gIC8vIGxpbmtzXG4gIHRyeSB7XG4gICAgaWYgKGhlYWRlci5saW5rKSB7XG4gICAgICB0aGlzLmxpbmtzID0gdXRpbHMucGFyc2VMaW5rcyhoZWFkZXIubGluayk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBpZ25vcmVcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgZmxhZ3Mgc3VjaCBhcyBgLm9rYCBiYXNlZCBvbiBgc3RhdHVzYC5cbiAqXG4gKiBGb3IgZXhhbXBsZSBhIDJ4eCByZXNwb25zZSB3aWxsIGdpdmUgeW91IGEgYC5va2Agb2YgX190cnVlX19cbiAqIHdoZXJlYXMgNXh4IHdpbGwgYmUgX19mYWxzZV9fIGFuZCBgLmVycm9yYCB3aWxsIGJlIF9fdHJ1ZV9fLiBUaGVcbiAqIGAuY2xpZW50RXJyb3JgIGFuZCBgLnNlcnZlckVycm9yYCBhcmUgYWxzbyBhdmFpbGFibGUgdG8gYmUgbW9yZVxuICogc3BlY2lmaWMsIGFuZCBgLnN0YXR1c1R5cGVgIGlzIHRoZSBjbGFzcyBvZiBlcnJvciByYW5naW5nIGZyb20gMS4uNVxuICogc29tZXRpbWVzIHVzZWZ1bCBmb3IgbWFwcGluZyByZXNwb25kIGNvbG9ycyBldGMuXG4gKlxuICogXCJzdWdhclwiIHByb3BlcnRpZXMgYXJlIGFsc28gZGVmaW5lZCBmb3IgY29tbW9uIGNhc2VzLiBDdXJyZW50bHkgcHJvdmlkaW5nOlxuICpcbiAqICAgLSAubm9Db250ZW50XG4gKiAgIC0gLmJhZFJlcXVlc3RcbiAqICAgLSAudW5hdXRob3JpemVkXG4gKiAgIC0gLm5vdEFjY2VwdGFibGVcbiAqICAgLSAubm90Rm91bmRcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXNwb25zZUJhc2UucHJvdG90eXBlLl9zZXRTdGF0dXNQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICBjb25zdCB0eXBlID0gTWF0aC50cnVuYyhzdGF0dXMgLyAxMDApO1xuXG4gIC8vIHN0YXR1cyAvIGNsYXNzXG4gIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1cztcbiAgdGhpcy5zdGF0dXMgPSB0aGlzLnN0YXR1c0NvZGU7XG4gIHRoaXMuc3RhdHVzVHlwZSA9IHR5cGU7XG5cbiAgLy8gYmFzaWNzXG4gIHRoaXMuaW5mbyA9IHR5cGUgPT09IDE7XG4gIHRoaXMub2sgPSB0eXBlID09PSAyO1xuICB0aGlzLnJlZGlyZWN0ID0gdHlwZSA9PT0gMztcbiAgdGhpcy5jbGllbnRFcnJvciA9IHR5cGUgPT09IDQ7XG4gIHRoaXMuc2VydmVyRXJyb3IgPSB0eXBlID09PSA1O1xuICB0aGlzLmVycm9yID0gdHlwZSA9PT0gNCB8fCB0eXBlID09PSA1ID8gdGhpcy50b0Vycm9yKCkgOiBmYWxzZTtcblxuICAvLyBzdWdhclxuICB0aGlzLmNyZWF0ZWQgPSBzdGF0dXMgPT09IDIwMTtcbiAgdGhpcy5hY2NlcHRlZCA9IHN0YXR1cyA9PT0gMjAyO1xuICB0aGlzLm5vQ29udGVudCA9IHN0YXR1cyA9PT0gMjA0O1xuICB0aGlzLmJhZFJlcXVlc3QgPSBzdGF0dXMgPT09IDQwMDtcbiAgdGhpcy51bmF1dGhvcml6ZWQgPSBzdGF0dXMgPT09IDQwMTtcbiAgdGhpcy5ub3RBY2NlcHRhYmxlID0gc3RhdHVzID09PSA0MDY7XG4gIHRoaXMuZm9yYmlkZGVuID0gc3RhdHVzID09PSA0MDM7XG4gIHRoaXMubm90Rm91bmQgPSBzdGF0dXMgPT09IDQwNDtcbiAgdGhpcy51bnByb2Nlc3NhYmxlRW50aXR5ID0gc3RhdHVzID09PSA0MjI7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsWUFBWSxHQUFHLENBQUM7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBQSxZQUFZLENBQUNDLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFVBQVVDLEtBQUssRUFBRTtFQUM1QyxPQUFPLElBQUksQ0FBQ0MsTUFBTSxDQUFDRCxLQUFLLENBQUNFLFdBQVcsRUFBRSxDQUFDO0FBQ3pDLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUwsWUFBWSxDQUFDQyxTQUFTLENBQUNLLG9CQUFvQixHQUFHLFVBQVVGLE1BQU0sRUFBRTtFQUM5RDtFQUNBOztFQUVBO0VBQ0EsTUFBTUcsRUFBRSxHQUFHSCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRTtFQUN2QyxJQUFJLENBQUNJLElBQUksR0FBR1osS0FBSyxDQUFDWSxJQUFJLENBQUNELEVBQUUsQ0FBQzs7RUFFMUI7RUFDQSxNQUFNRSxVQUFVLEdBQUdiLEtBQUssQ0FBQ2MsTUFBTSxDQUFDSCxFQUFFLENBQUM7RUFDbkMsS0FBSyxNQUFNSSxHQUFHLElBQUlGLFVBQVUsRUFBRTtJQUM1QixJQUFJRyxNQUFNLENBQUNYLFNBQVMsQ0FBQ1ksY0FBYyxDQUFDQyxJQUFJLENBQUNMLFVBQVUsRUFBRUUsR0FBRyxDQUFDLEVBQ3ZELElBQUksQ0FBQ0EsR0FBRyxDQUFDLEdBQUdGLFVBQVUsQ0FBQ0UsR0FBRyxDQUFDO0VBQy9CO0VBRUEsSUFBSSxDQUFDSSxLQUFLLEdBQUcsQ0FBQyxDQUFDOztFQUVmO0VBQ0EsSUFBSTtJQUNGLElBQUlYLE1BQU0sQ0FBQ1ksSUFBSSxFQUFFO01BQ2YsSUFBSSxDQUFDRCxLQUFLLEdBQUduQixLQUFLLENBQUNxQixVQUFVLENBQUNiLE1BQU0sQ0FBQ1ksSUFBSSxDQUFDO0lBQzVDO0VBQ0YsQ0FBQyxDQUFDLE9BQU9FLEdBQUcsRUFBRTtJQUNaO0VBQUE7QUFFSixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFsQixZQUFZLENBQUNDLFNBQVMsQ0FBQ2tCLG9CQUFvQixHQUFHLFVBQVVDLE1BQU0sRUFBRTtFQUM5RCxNQUFNWixJQUFJLEdBQUdhLElBQUksQ0FBQ0MsS0FBSyxDQUFDRixNQUFNLEdBQUcsR0FBRyxDQUFDOztFQUVyQztFQUNBLElBQUksQ0FBQ0csVUFBVSxHQUFHSCxNQUFNO0VBQ3hCLElBQUksQ0FBQ0EsTUFBTSxHQUFHLElBQUksQ0FBQ0csVUFBVTtFQUM3QixJQUFJLENBQUNDLFVBQVUsR0FBR2hCLElBQUk7O0VBRXRCO0VBQ0EsSUFBSSxDQUFDaUIsSUFBSSxHQUFHakIsSUFBSSxLQUFLLENBQUM7RUFDdEIsSUFBSSxDQUFDa0IsRUFBRSxHQUFHbEIsSUFBSSxLQUFLLENBQUM7RUFDcEIsSUFBSSxDQUFDbUIsUUFBUSxHQUFHbkIsSUFBSSxLQUFLLENBQUM7RUFDMUIsSUFBSSxDQUFDb0IsV0FBVyxHQUFHcEIsSUFBSSxLQUFLLENBQUM7RUFDN0IsSUFBSSxDQUFDcUIsV0FBVyxHQUFHckIsSUFBSSxLQUFLLENBQUM7RUFDN0IsSUFBSSxDQUFDc0IsS0FBSyxHQUFHdEIsSUFBSSxLQUFLLENBQUMsSUFBSUEsSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUN1QixPQUFPLEVBQUUsR0FBRyxLQUFLOztFQUU5RDtFQUNBLElBQUksQ0FBQ0MsT0FBTyxHQUFHWixNQUFNLEtBQUssR0FBRztFQUM3QixJQUFJLENBQUNhLFFBQVEsR0FBR2IsTUFBTSxLQUFLLEdBQUc7RUFDOUIsSUFBSSxDQUFDYyxTQUFTLEdBQUdkLE1BQU0sS0FBSyxHQUFHO0VBQy9CLElBQUksQ0FBQ2UsVUFBVSxHQUFHZixNQUFNLEtBQUssR0FBRztFQUNoQyxJQUFJLENBQUNnQixZQUFZLEdBQUdoQixNQUFNLEtBQUssR0FBRztFQUNsQyxJQUFJLENBQUNpQixhQUFhLEdBQUdqQixNQUFNLEtBQUssR0FBRztFQUNuQyxJQUFJLENBQUNrQixTQUFTLEdBQUdsQixNQUFNLEtBQUssR0FBRztFQUMvQixJQUFJLENBQUNtQixRQUFRLEdBQUduQixNQUFNLEtBQUssR0FBRztFQUM5QixJQUFJLENBQUNvQixtQkFBbUIsR0FBR3BCLE1BQU0sS0FBSyxHQUFHO0FBQzNDLENBQUMifQ==","\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = string_ => string_.split(/ *; */).shift();\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = value => {\n  const object = {};\n  var _iterator = _createForOfIteratorHelper(value.split(/ *; */)),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      const string_ = _step.value;\n      const parts = string_.split(/ *= */);\n      const key = parts.shift();\n      const value = parts.shift();\n      if (key && value) object[key] = value;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return object;\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = value => {\n  const object = {};\n  var _iterator2 = _createForOfIteratorHelper(value.split(/ *, */)),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      const string_ = _step2.value;\n      const parts = string_.split(/ *; */);\n      const url = parts[0].slice(1, -1);\n      const rel = parts[1].split(/ *= */)[1].slice(1, -1);\n      object[rel] = url;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return object;\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = (header, changesOrigin) => {\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header.host;\n  // secuirty\n  if (changesOrigin) {\n    delete header.authorization;\n    delete header.cookie;\n  }\n  return header;\n};\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} object\n * @return {Boolean}\n * @api private\n */\nexports.isObject = object => {\n  return object !== null && typeof object === 'object';\n};\n\n/**\n * Object.hasOwn fallback/polyfill.\n *\n * @type {(object: object, property: string) => boolean} object\n * @api private\n */\nexports.hasOwn = Object.hasOwn || function (object, property) {\n  if (object == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  return Object.prototype.hasOwnProperty.call(new Object(object), property);\n};\nexports.mixin = (target, source) => {\n  for (const key in source) {\n    if (exports.hasOwn(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwidHlwZSIsInN0cmluZ18iLCJzcGxpdCIsInNoaWZ0IiwicGFyYW1zIiwidmFsdWUiLCJvYmplY3QiLCJwYXJ0cyIsImtleSIsInBhcnNlTGlua3MiLCJ1cmwiLCJzbGljZSIsInJlbCIsImNsZWFuSGVhZGVyIiwiaGVhZGVyIiwiY2hhbmdlc09yaWdpbiIsImhvc3QiLCJhdXRob3JpemF0aW9uIiwiY29va2llIiwiaXNPYmplY3QiLCJoYXNPd24iLCJPYmplY3QiLCJwcm9wZXJ0eSIsIlR5cGVFcnJvciIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1peGluIiwidGFyZ2V0Iiwic291cmNlIl0sInNvdXJjZXMiOlsiLi4vc3JjL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmV0dXJuIHRoZSBtaW1lIHR5cGUgZm9yIHRoZSBnaXZlbiBgc3RyYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnR5cGUgPSAoc3RyaW5nXykgPT4gc3RyaW5nXy5zcGxpdCgvICo7ICovKS5zaGlmdCgpO1xuXG4vKipcbiAqIFJldHVybiBoZWFkZXIgZmllbGQgcGFyYW1ldGVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnBhcmFtcyA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCBvYmplY3QgPSB7fTtcbiAgZm9yIChjb25zdCBzdHJpbmdfIG9mIHZhbHVlLnNwbGl0KC8gKjsgKi8pKSB7XG4gICAgY29uc3QgcGFydHMgPSBzdHJpbmdfLnNwbGl0KC8gKj0gKi8pO1xuICAgIGNvbnN0IGtleSA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgY29uc3QgdmFsdWUgPSBwYXJ0cy5zaGlmdCgpO1xuXG4gICAgaWYgKGtleSAmJiB2YWx1ZSkgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG4vKipcbiAqIFBhcnNlIExpbmsgaGVhZGVyIGZpZWxkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnBhcnNlTGlua3MgPSAodmFsdWUpID0+IHtcbiAgY29uc3Qgb2JqZWN0ID0ge307XG4gIGZvciAoY29uc3Qgc3RyaW5nXyBvZiB2YWx1ZS5zcGxpdCgvICosICovKSkge1xuICAgIGNvbnN0IHBhcnRzID0gc3RyaW5nXy5zcGxpdCgvICo7ICovKTtcbiAgICBjb25zdCB1cmwgPSBwYXJ0c1swXS5zbGljZSgxLCAtMSk7XG4gICAgY29uc3QgcmVsID0gcGFydHNbMV0uc3BsaXQoLyAqPSAqLylbMV0uc2xpY2UoMSwgLTEpO1xuICAgIG9iamVjdFtyZWxdID0gdXJsO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbi8qKlxuICogU3RyaXAgY29udGVudCByZWxhdGVkIGZpZWxkcyBmcm9tIGBoZWFkZXJgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJcbiAqIEByZXR1cm4ge09iamVjdH0gaGVhZGVyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmNsZWFuSGVhZGVyID0gKGhlYWRlciwgY2hhbmdlc09yaWdpbikgPT4ge1xuICBkZWxldGUgaGVhZGVyWydjb250ZW50LXR5cGUnXTtcbiAgZGVsZXRlIGhlYWRlclsnY29udGVudC1sZW5ndGgnXTtcbiAgZGVsZXRlIGhlYWRlclsndHJhbnNmZXItZW5jb2RpbmcnXTtcbiAgZGVsZXRlIGhlYWRlci5ob3N0O1xuICAvLyBzZWN1aXJ0eVxuICBpZiAoY2hhbmdlc09yaWdpbikge1xuICAgIGRlbGV0ZSBoZWFkZXIuYXV0aG9yaXphdGlvbjtcbiAgICBkZWxldGUgaGVhZGVyLmNvb2tpZTtcbiAgfVxuXG4gIHJldHVybiBoZWFkZXI7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGBvYmpgIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cbmV4cG9ydHMuaXNPYmplY3QgPSAob2JqZWN0KSA9PiB7XG4gIHJldHVybiBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG59O1xuXG4vKipcbiAqIE9iamVjdC5oYXNPd24gZmFsbGJhY2svcG9seWZpbGwuXG4gKlxuICogQHR5cGUgeyhvYmplY3Q6IG9iamVjdCwgcHJvcGVydHk6IHN0cmluZykgPT4gYm9vbGVhbn0gb2JqZWN0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZXhwb3J0cy5oYXNPd24gPVxuICBPYmplY3QuaGFzT3duIHx8XG4gIGZ1bmN0aW9uIChvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5ldyBPYmplY3Qob2JqZWN0KSwgcHJvcGVydHkpO1xuICB9O1xuXG5leHBvcnRzLm1peGluID0gKHRhcmdldCwgc291cmNlKSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgIGlmIChleHBvcnRzLmhhc093bihzb3VyY2UsIGtleSkpIHtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBQSxPQUFPLENBQUNDLElBQUksR0FBSUMsT0FBTyxJQUFLQSxPQUFPLENBQUNDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQ0MsS0FBSyxFQUFFOztBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUosT0FBTyxDQUFDSyxNQUFNLEdBQUlDLEtBQUssSUFBSztFQUMxQixNQUFNQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQUMsMkNBQ0lELEtBQUssQ0FBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUFBO0VBQUE7SUFBMUMsb0RBQTRDO01BQUEsTUFBakNELE9BQU87TUFDaEIsTUFBTU0sS0FBSyxHQUFHTixPQUFPLENBQUNDLEtBQUssQ0FBQyxPQUFPLENBQUM7TUFDcEMsTUFBTU0sR0FBRyxHQUFHRCxLQUFLLENBQUNKLEtBQUssRUFBRTtNQUN6QixNQUFNRSxLQUFLLEdBQUdFLEtBQUssQ0FBQ0osS0FBSyxFQUFFO01BRTNCLElBQUlLLEdBQUcsSUFBSUgsS0FBSyxFQUFFQyxNQUFNLENBQUNFLEdBQUcsQ0FBQyxHQUFHSCxLQUFLO0lBQ3ZDO0VBQUM7SUFBQTtFQUFBO0lBQUE7RUFBQTtFQUVELE9BQU9DLE1BQU07QUFDZixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBUCxPQUFPLENBQUNVLFVBQVUsR0FBSUosS0FBSyxJQUFLO0VBQzlCLE1BQU1DLE1BQU0sR0FBRyxDQUFDLENBQUM7RUFBQyw0Q0FDSUQsS0FBSyxDQUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQUE7RUFBQTtJQUExQyx1REFBNEM7TUFBQSxNQUFqQ0QsT0FBTztNQUNoQixNQUFNTSxLQUFLLEdBQUdOLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLE9BQU8sQ0FBQztNQUNwQyxNQUFNUSxHQUFHLEdBQUdILEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0ksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztNQUNqQyxNQUFNQyxHQUFHLEdBQUdMLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDUyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO01BQ25ETCxNQUFNLENBQUNNLEdBQUcsQ0FBQyxHQUFHRixHQUFHO0lBQ25CO0VBQUM7SUFBQTtFQUFBO0lBQUE7RUFBQTtFQUVELE9BQU9KLE1BQU07QUFDZixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBUCxPQUFPLENBQUNjLFdBQVcsR0FBRyxDQUFDQyxNQUFNLEVBQUVDLGFBQWEsS0FBSztFQUMvQyxPQUFPRCxNQUFNLENBQUMsY0FBYyxDQUFDO0VBQzdCLE9BQU9BLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztFQUMvQixPQUFPQSxNQUFNLENBQUMsbUJBQW1CLENBQUM7RUFDbEMsT0FBT0EsTUFBTSxDQUFDRSxJQUFJO0VBQ2xCO0VBQ0EsSUFBSUQsYUFBYSxFQUFFO0lBQ2pCLE9BQU9ELE1BQU0sQ0FBQ0csYUFBYTtJQUMzQixPQUFPSCxNQUFNLENBQUNJLE1BQU07RUFDdEI7RUFFQSxPQUFPSixNQUFNO0FBQ2YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBZixPQUFPLENBQUNvQixRQUFRLEdBQUliLE1BQU0sSUFBSztFQUM3QixPQUFPQSxNQUFNLEtBQUssSUFBSSxJQUFJLE9BQU9BLE1BQU0sS0FBSyxRQUFRO0FBQ3RELENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FQLE9BQU8sQ0FBQ3FCLE1BQU0sR0FDWkMsTUFBTSxDQUFDRCxNQUFNLElBQ2IsVUFBVWQsTUFBTSxFQUFFZ0IsUUFBUSxFQUFFO0VBQzFCLElBQUloQixNQUFNLElBQUksSUFBSSxFQUFFO0lBQ2xCLE1BQU0sSUFBSWlCLFNBQVMsQ0FBQyw0Q0FBNEMsQ0FBQztFQUNuRTtFQUVBLE9BQU9GLE1BQU0sQ0FBQ0csU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQyxJQUFJTCxNQUFNLENBQUNmLE1BQU0sQ0FBQyxFQUFFZ0IsUUFBUSxDQUFDO0FBQzNFLENBQUM7QUFFSHZCLE9BQU8sQ0FBQzRCLEtBQUssR0FBRyxDQUFDQyxNQUFNLEVBQUVDLE1BQU0sS0FBSztFQUNsQyxLQUFLLE1BQU1yQixHQUFHLElBQUlxQixNQUFNLEVBQUU7SUFDeEIsSUFBSTlCLE9BQU8sQ0FBQ3FCLE1BQU0sQ0FBQ1MsTUFBTSxFQUFFckIsR0FBRyxDQUFDLEVBQUU7TUFDL0JvQixNQUFNLENBQUNwQixHQUFHLENBQUMsR0FBR3FCLE1BQU0sQ0FBQ3JCLEdBQUcsQ0FBQztJQUMzQjtFQUNGO0FBQ0YsQ0FBQyJ9","var CombinedStream = require('combined-stream');\nvar util = require('util');\nvar path = require('path');\nvar http = require('http');\nvar https = require('https');\nvar parseUrl = require('url').parse;\nvar fs = require('fs');\nvar Stream = require('stream').Stream;\nvar mime = require('mime-types');\nvar asynckit = require('asynckit');\nvar populate = require('./populate.js');\n\n// Public API\nmodule.exports = FormData;\n\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */\nfunction FormData(options) {\n  if (!(this instanceof FormData)) {\n    return new FormData(options);\n  }\n\n  this._overheadLength = 0;\n  this._valueLength = 0;\n  this._valuesToMeasure = [];\n\n  CombinedStream.call(this);\n\n  options = options || {};\n  for (var option in options) {\n    this[option] = options[option];\n  }\n}\n\nFormData.LINE_BREAK = '\\r\\n';\nFormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';\n\nFormData.prototype.append = function(field, value, options) {\n\n  options = options || {};\n\n  // allow filename as single option\n  if (typeof options == 'string') {\n    options = {filename: options};\n  }\n\n  var append = CombinedStream.prototype.append.bind(this);\n\n  // all that streamy business can't handle numbers\n  if (typeof value == 'number') {\n    value = '' + value;\n  }\n\n  // https://github.com/felixge/node-form-data/issues/38\n  if (util.isArray(value)) {\n    // Please convert your array into string\n    // the way web server expects it\n    this._error(new Error('Arrays are not supported.'));\n    return;\n  }\n\n  var header = this._multiPartHeader(field, value, options);\n  var footer = this._multiPartFooter();\n\n  append(header);\n  append(value);\n  append(footer);\n\n  // pass along options.knownLength\n  this._trackLength(header, value, options);\n};\n\nFormData.prototype._trackLength = function(header, value, options) {\n  var valueLength = 0;\n\n  // used w/ getLengthSync(), when length is known.\n  // e.g. for streaming directly from a remote server,\n  // w/ a known file a size, and not wanting to wait for\n  // incoming file to finish to get its size.\n  if (options.knownLength != null) {\n    valueLength += +options.knownLength;\n  } else if (Buffer.isBuffer(value)) {\n    valueLength = value.length;\n  } else if (typeof value === 'string') {\n    valueLength = Buffer.byteLength(value);\n  }\n\n  this._valueLength += valueLength;\n\n  // @check why add CRLF? does this account for custom/multiple CRLFs?\n  this._overheadLength +=\n    Buffer.byteLength(header) +\n    FormData.LINE_BREAK.length;\n\n  // empty or either doesn't have path or not an http response or not a stream\n  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream))) {\n    return;\n  }\n\n  // no need to bother with the length\n  if (!options.knownLength) {\n    this._valuesToMeasure.push(value);\n  }\n};\n\nFormData.prototype._lengthRetriever = function(value, callback) {\n\n  if (value.hasOwnProperty('fd')) {\n\n    // take read range into a account\n    // `end` = Infinity –> read file till the end\n    //\n    // TODO: Looks like there is bug in Node fs.createReadStream\n    // it doesn't respect `end` options without `start` options\n    // Fix it when node fixes it.\n    // https://github.com/joyent/node/issues/7819\n    if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n\n      // when end specified\n      // no need to calculate range\n      // inclusive, starts with 0\n      callback(null, value.end + 1 - (value.start ? value.start : 0));\n\n    // not that fast snoopy\n    } else {\n      // still need to fetch file size from fs\n      fs.stat(value.path, function(err, stat) {\n\n        var fileSize;\n\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        // update final size based on the range options\n        fileSize = stat.size - (value.start ? value.start : 0);\n        callback(null, fileSize);\n      });\n    }\n\n  // or http response\n  } else if (value.hasOwnProperty('httpVersion')) {\n    callback(null, +value.headers['content-length']);\n\n  // or request stream http://github.com/mikeal/request\n  } else if (value.hasOwnProperty('httpModule')) {\n    // wait till response come back\n    value.on('response', function(response) {\n      value.pause();\n      callback(null, +response.headers['content-length']);\n    });\n    value.resume();\n\n  // something else\n  } else {\n    callback('Unknown stream');\n  }\n};\n\nFormData.prototype._multiPartHeader = function(field, value, options) {\n  // custom header specified (as string)?\n  // it becomes responsible for boundary\n  // (e.g. to handle extra CRLFs on .NET servers)\n  if (typeof options.header == 'string') {\n    return options.header;\n  }\n\n  var contentDisposition = this._getContentDisposition(value, options);\n  var contentType = this._getContentType(value, options);\n\n  var contents = '';\n  var headers  = {\n    // add custom disposition as third element or keep it two elements if not\n    'Content-Disposition': ['form-data', 'name=\"' + field + '\"'].concat(contentDisposition || []),\n    // if no content type. allow it to be empty array\n    'Content-Type': [].concat(contentType || [])\n  };\n\n  // allow custom headers.\n  if (typeof options.header == 'object') {\n    populate(headers, options.header);\n  }\n\n  var header;\n  for (var prop in headers) {\n    if (!headers.hasOwnProperty(prop)) continue;\n    header = headers[prop];\n\n    // skip nullish headers.\n    if (header == null) {\n      continue;\n    }\n\n    // convert all headers to arrays.\n    if (!Array.isArray(header)) {\n      header = [header];\n    }\n\n    // add non-empty headers.\n    if (header.length) {\n      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;\n    }\n  }\n\n  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\n\nFormData.prototype._getContentDisposition = function(value, options) {\n\n  var filename\n    , contentDisposition\n    ;\n\n  if (typeof options.filepath === 'string') {\n    // custom filepath for relative paths\n    filename = path.normalize(options.filepath).replace(/\\\\/g, '/');\n  } else if (options.filename || value.name || value.path) {\n    // custom filename take precedence\n    // formidable and the browser add a name property\n    // fs- and request- streams have path property\n    filename = path.basename(options.filename || value.name || value.path);\n  } else if (value.readable && value.hasOwnProperty('httpVersion')) {\n    // or try http response\n    filename = path.basename(value.client._httpMessage.path || '');\n  }\n\n  if (filename) {\n    contentDisposition = 'filename=\"' + filename + '\"';\n  }\n\n  return contentDisposition;\n};\n\nFormData.prototype._getContentType = function(value, options) {\n\n  // use custom content-type above all\n  var contentType = options.contentType;\n\n  // or try `name` from formidable, browser\n  if (!contentType && value.name) {\n    contentType = mime.lookup(value.name);\n  }\n\n  // or try `path` from fs-, request- streams\n  if (!contentType && value.path) {\n    contentType = mime.lookup(value.path);\n  }\n\n  // or if it's http-reponse\n  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {\n    contentType = value.headers['content-type'];\n  }\n\n  // or guess it from the filepath or filename\n  if (!contentType && (options.filepath || options.filename)) {\n    contentType = mime.lookup(options.filepath || options.filename);\n  }\n\n  // fallback to the default content type if `value` is not simple value\n  if (!contentType && typeof value == 'object') {\n    contentType = FormData.DEFAULT_CONTENT_TYPE;\n  }\n\n  return contentType;\n};\n\nFormData.prototype._multiPartFooter = function() {\n  return function(next) {\n    var footer = FormData.LINE_BREAK;\n\n    var lastPart = (this._streams.length === 0);\n    if (lastPart) {\n      footer += this._lastBoundary();\n    }\n\n    next(footer);\n  }.bind(this);\n};\n\nFormData.prototype._lastBoundary = function() {\n  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;\n};\n\nFormData.prototype.getHeaders = function(userHeaders) {\n  var header;\n  var formHeaders = {\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n  };\n\n  for (header in userHeaders) {\n    if (userHeaders.hasOwnProperty(header)) {\n      formHeaders[header.toLowerCase()] = userHeaders[header];\n    }\n  }\n\n  return formHeaders;\n};\n\nFormData.prototype.setBoundary = function(boundary) {\n  this._boundary = boundary;\n};\n\nFormData.prototype.getBoundary = function() {\n  if (!this._boundary) {\n    this._generateBoundary();\n  }\n\n  return this._boundary;\n};\n\nFormData.prototype.getBuffer = function() {\n  var dataBuffer = new Buffer.alloc( 0 );\n  var boundary = this.getBoundary();\n\n  // Create the form content. Add Line breaks to the end of data.\n  for (var i = 0, len = this._streams.length; i < len; i++) {\n    if (typeof this._streams[i] !== 'function') {\n\n      // Add content to the buffer.\n      if(Buffer.isBuffer(this._streams[i])) {\n        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);\n      }else {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);\n      }\n\n      // Add break after content.\n      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );\n      }\n    }\n  }\n\n  // Add the footer and return the Buffer object.\n  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );\n};\n\nFormData.prototype._generateBoundary = function() {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  var boundary = '--------------------------';\n  for (var i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  this._boundary = boundary;\n};\n\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n  // so it basically checks if there is any value added to the form\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  // https://github.com/form-data/form-data/issues/40\n  if (!this.hasKnownLength()) {\n    // Some async length retrievers are present\n    // therefore synchronous length calculation is false.\n    // Please use getLength(callback) to get proper length\n    this._error(new Error('Cannot calculate proper length in synchronous way.'));\n  }\n\n  return knownLength;\n};\n\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n  var hasKnownLength = true;\n\n  if (this._valuesToMeasure.length) {\n    hasKnownLength = false;\n  }\n\n  return hasKnownLength;\n};\n\nFormData.prototype.getLength = function(cb) {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  if (!this._valuesToMeasure.length) {\n    process.nextTick(cb.bind(this, null, knownLength));\n    return;\n  }\n\n  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    values.forEach(function(length) {\n      knownLength += length;\n    });\n\n    cb(null, knownLength);\n  });\n};\n\nFormData.prototype.submit = function(params, cb) {\n  var request\n    , options\n    , defaults = {method: 'post'}\n    ;\n\n  // parse provided url if it's string\n  // or treat it as options object\n  if (typeof params == 'string') {\n\n    params = parseUrl(params);\n    options = populate({\n      port: params.port,\n      path: params.pathname,\n      host: params.hostname,\n      protocol: params.protocol\n    }, defaults);\n\n  // use custom params\n  } else {\n\n    options = populate(params, defaults);\n    // if no port provided use default one\n    if (!options.port) {\n      options.port = options.protocol == 'https:' ? 443 : 80;\n    }\n  }\n\n  // put that good code in getHeaders to some use\n  options.headers = this.getHeaders(params.headers);\n\n  // https if specified, fallback to http in any other case\n  if (options.protocol == 'https:') {\n    request = https.request(options);\n  } else {\n    request = http.request(options);\n  }\n\n  // get content length and fire away\n  this.getLength(function(err, length) {\n    if (err && err !== 'Unknown stream') {\n      this._error(err);\n      return;\n    }\n\n    // add content length\n    if (length) {\n      request.setHeader('Content-Length', length);\n    }\n\n    this.pipe(request);\n    if (cb) {\n      var onResponse;\n\n      var callback = function (error, responce) {\n        request.removeListener('error', callback);\n        request.removeListener('response', onResponse);\n\n        return cb.call(this, error, responce);\n      };\n\n      onResponse = callback.bind(this, null);\n\n      request.on('error', callback);\n      request.on('response', onResponse);\n    }\n  }.bind(this));\n\n  return request;\n};\n\nFormData.prototype._error = function(err) {\n  if (!this.error) {\n    this.error = err;\n    this.pause();\n    this.emit('error', err);\n  }\n};\n\nFormData.prototype.toString = function () {\n  return '[object FormData]';\n};\n","// populates missing values\nmodule.exports = function(dst, src) {\n\n  Object.keys(src).forEach(function(prop)\n  {\n    dst[prop] = dst[prop] || src[prop];\n  });\n\n  return dst;\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","'use strict';\n\n/***\n * Convert string to hex color.\n *\n * @param {String} str Text to hash and convert to hex.\n * @returns {String}\n * @api public\n */\nmodule.exports = function hex(str) {\n  for (\n    var i = 0, hash = 0;\n    i < str.length;\n    hash = str.charCodeAt(i++) + ((hash << 5) - hash)\n  );\n\n  var color = Math.floor(\n    Math.abs(\n      (Math.sin(hash) * 10000) % 1 * 16777216\n    )\n  ).toString(16);\n\n  return '#' + Array(6 - color.length + 1).join('0') + color;\n};\n","/**\n * cli.js: Config that conform to commonly used CLI logging levels.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\n/**\n * Default levels for the CLI configuration.\n * @type {Object}\n */\nexports.levels = {\n  error: 0,\n  warn: 1,\n  help: 2,\n  data: 3,\n  info: 4,\n  debug: 5,\n  prompt: 6,\n  verbose: 7,\n  input: 8,\n  silly: 9\n};\n\n/**\n * Default colors for the CLI configuration.\n * @type {Object}\n */\nexports.colors = {\n  error: 'red',\n  warn: 'yellow',\n  help: 'cyan',\n  data: 'grey',\n  info: 'green',\n  debug: 'blue',\n  prompt: 'grey',\n  verbose: 'cyan',\n  input: 'grey',\n  silly: 'magenta'\n};\n","/**\n * index.js: Default settings for all levels that winston knows about.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\n/**\n * Export config set for the CLI.\n * @type {Object}\n */\nObject.defineProperty(exports, 'cli', {\n  value: require('./cli')\n});\n\n/**\n * Export config set for npm.\n * @type {Object}\n */\nObject.defineProperty(exports, 'npm', {\n  value: require('./npm')\n});\n\n/**\n * Export config set for the syslog.\n * @type {Object}\n */\nObject.defineProperty(exports, 'syslog', {\n  value: require('./syslog')\n});\n","/**\n * npm.js: Config that conform to npm logging levels.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\n/**\n * Default levels for the npm configuration.\n * @type {Object}\n */\nexports.levels = {\n  error: 0,\n  warn: 1,\n  info: 2,\n  http: 3,\n  verbose: 4,\n  debug: 5,\n  silly: 6\n};\n\n/**\n * Default levels for the npm configuration.\n * @type {Object}\n */\nexports.colors = {\n  error: 'red',\n  warn: 'yellow',\n  info: 'green',\n  http: 'green',\n  verbose: 'cyan',\n  debug: 'blue',\n  silly: 'magenta'\n};\n","/**\n * syslog.js: Config that conform to syslog logging levels.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\n/**\n * Default levels for the syslog configuration.\n * @type {Object}\n */\nexports.levels = {\n  emerg: 0,\n  alert: 1,\n  crit: 2,\n  error: 3,\n  warning: 4,\n  notice: 5,\n  info: 6,\n  debug: 7\n};\n\n/**\n * Default levels for the syslog configuration.\n * @type {Object}\n */\nexports.colors = {\n  emerg: 'red',\n  alert: 'yellow',\n  crit: 'red',\n  error: 'red',\n  warning: 'red',\n  notice: 'yellow',\n  info: 'green',\n  debug: 'blue'\n};\n","'use strict';\n\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden level identifier\n * to allow the readable level property to be mutable for\n * operations like colorization\n *\n * @type {Symbol}\n */\nObject.defineProperty(exports, 'LEVEL', {\n  value: Symbol.for('level')\n});\n\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden message identifier\n * to allow the final message property to not have\n * side effects on another.\n *\n * @type {Symbol}\n */\nObject.defineProperty(exports, 'MESSAGE', {\n  value: Symbol.for('message')\n});\n\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden message identifier\n * to allow the extracted splat property be hidden\n *\n * @type {Symbol}\n */\nObject.defineProperty(exports, 'SPLAT', {\n  value: Symbol.for('splat')\n});\n\n/**\n * A shareable object constant  that can be used\n * as a standard configuration for winston@3.\n *\n * @type {Object}\n */\nObject.defineProperty(exports, 'configs', {\n  value: require('./config')\n});\n","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","\n/**\n * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nmodule.exports = require('util').deprecate;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function () {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function () {\n    return _version.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function () {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return _parse.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('md5').update(bytes).digest();\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\n\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    _crypto.default.randomFillSync(rnds8Pool);\n\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('sha1').update(bytes).digest();\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nvar _default = version;\nexports.default = _default;","'use strict';\n\nconst util = require('util');\nconst Writable = require('readable-stream/lib/_stream_writable.js');\nconst { LEVEL } = require('triple-beam');\n\n/**\n * Constructor function for the TransportStream. This is the base prototype\n * that all `winston >= 3` transports should inherit from.\n * @param {Object} options - Options for this TransportStream instance\n * @param {String} options.level - Highest level according to RFC5424.\n * @param {Boolean} options.handleExceptions - If true, info with\n * { exception: true } will be written.\n * @param {Function} options.log - Custom log function for simple Transport\n * creation\n * @param {Function} options.close - Called on \"unpipe\" from parent.\n */\nconst TransportStream = module.exports = function TransportStream(options = {}) {\n  Writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });\n\n  this.format = options.format;\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions;\n  this.handleRejections = options.handleRejections;\n  this.silent = options.silent;\n\n  if (options.log) this.log = options.log;\n  if (options.logv) this.logv = options.logv;\n  if (options.close) this.close = options.close;\n\n  // Get the levels from the source we are piped from.\n  this.once('pipe', logger => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    this.levels = logger.levels;\n    this.parent = logger;\n  });\n\n  // If and/or when the transport is removed from this instance\n  this.once('unpipe', src => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    if (src === this.parent) {\n      this.parent = null;\n      if (this.close) {\n        this.close();\n      }\n    }\n  });\n};\n\n/*\n * Inherit from Writeable using Node.js built-ins\n */\nutil.inherits(TransportStream, Writable);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || (info.exception === true && !this.handleExceptions)) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream. We always\n  // prefer any explicit level set on the Transport itself falling back to\n  // any level set on the parent.\n  const level = this.level || (this.parent && this.parent.level);\n\n  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    if (info && !this.format) {\n      return this.log(info, callback);\n    }\n\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(Object.assign({}, info), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      callback();\n      if (errState) throw errState;\n      return;\n    }\n\n    return this.log(transformed, callback);\n  }\n  this._writableState.sync = false;\n  return callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nTransportStream.prototype._writev = function _writev(chunks, callback) {\n  if (this.logv) {\n    const infos = chunks.filter(this._accept, this);\n    if (!infos.length) {\n      return callback(null);\n    }\n\n    // Remark (indexzero): from a performance perspective if Transport\n    // implementers do choose to implement logv should we make it their\n    // responsibility to invoke their format?\n    return this.logv(infos, callback);\n  }\n\n  for (let i = 0; i < chunks.length; i++) {\n    if (!this._accept(chunks[i])) continue;\n\n    if (chunks[i].chunk && !this.format) {\n      this.log(chunks[i].chunk, chunks[i].callback);\n      continue;\n    }\n\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(\n        Object.assign({}, chunks[i].chunk),\n        this.format.options\n      );\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      chunks[i].callback();\n      if (errState) {\n        // eslint-disable-next-line callback-return\n        callback(null);\n        throw errState;\n      }\n    } else {\n      this.log(transformed, chunks[i].callback);\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Predicate function that returns true if the specfied `info` on the\n * WriteReq, `write`, should be passed down into the derived\n * TransportStream's I/O via `.log(info, callback)`.\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\n * representing the log message.\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\n * logged.\n */\nTransportStream.prototype._accept = function _accept(write) {\n  const info = write.chunk;\n  if (this.silent) {\n    return false;\n  }\n\n  // We always prefer any explicit level set on the Transport itself\n  // falling back to any level set on the parent.\n  const level = this.level || (this.parent && this.parent.level);\n\n  // Immediately check the average case: log level filtering.\n  if (\n    info.exception === true ||\n    !level ||\n    this.levels[level] >= this.levels[info[LEVEL]]\n  ) {\n    // Ensure the info object is valid based on `{ exception }`:\n    // 1. { handleExceptions: true }: all `info` objects are valid\n    // 2. { exception: false }: accepted by all transports.\n    if (this.handleExceptions || info.exception !== true) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * _nop is short for \"No operation\"\n * @returns {Boolean} Intentionally false.\n */\nTransportStream.prototype._nop = function _nop() {\n  // eslint-disable-next-line no-undefined\n  return void undefined;\n};\n\n\n// Expose legacy stream\nmodule.exports.LegacyTransportStream = require('./legacy');\n","'use strict';\n\nconst util = require('util');\nconst { LEVEL } = require('triple-beam');\nconst TransportStream = require('./');\n\n/**\n * Constructor function for the LegacyTransportStream. This is an internal\n * wrapper `winston >= 3` uses to wrap older transports implementing\n * log(level, message, meta).\n * @param {Object} options - Options for this TransportStream instance.\n * @param {Transpot} options.transport - winston@2 or older Transport to wrap.\n */\n\nconst LegacyTransportStream = module.exports = function LegacyTransportStream(options = {}) {\n  TransportStream.call(this, options);\n  if (!options.transport || typeof options.transport.log !== 'function') {\n    throw new Error('Invalid transport, must be an object with a log method.');\n  }\n\n  this.transport = options.transport;\n  this.level = this.level || options.transport.level;\n  this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;\n\n  // Display our deprecation notice.\n  this._deprecated();\n\n  // Properly bubble up errors from the transport to the\n  // LegacyTransportStream instance, but only once no matter how many times\n  // this transport is shared.\n  function transportError(err) {\n    this.emit('error', err, this.transport);\n  }\n\n  if (!this.transport.__winstonError) {\n    this.transport.__winstonError = transportError.bind(this);\n    this.transport.on('error', this.transport.__winstonError);\n  }\n};\n\n/*\n * Inherit from TransportStream using Node.js built-ins\n */\nutil.inherits(LegacyTransportStream, TransportStream);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nLegacyTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || (info.exception === true && !this.handleExceptions)) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream.\n  if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {\n    this.transport.log(info[LEVEL], info.message, info, this._nop);\n  }\n\n  callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nLegacyTransportStream.prototype._writev = function _writev(chunks, callback) {\n  for (let i = 0; i < chunks.length; i++) {\n    if (this._accept(chunks[i])) {\n      this.transport.log(\n        chunks[i].chunk[LEVEL],\n        chunks[i].chunk.message,\n        chunks[i].chunk,\n        this._nop\n      );\n      chunks[i].callback();\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Displays a deprecation notice. Defined as a function so it can be\n * overriden in tests.\n * @returns {undefined}\n */\nLegacyTransportStream.prototype._deprecated = function _deprecated() {\n  // eslint-disable-next-line no-console\n  console.error([\n    `${this.transport.name} is a legacy winston transport. Consider upgrading: `,\n    '- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md'\n  ].join('\\n'));\n};\n\n/**\n * Clean up error handling state on the legacy transport associated\n * with this instance.\n * @returns {undefined}\n */\nLegacyTransportStream.prototype.close = function close() {\n  if (this.transport.close) {\n    this.transport.close();\n  }\n\n  if (this.transport.__winstonError) {\n    this.transport.removeListener('error', this.transport.__winstonError);\n    this.transport.__winstonError = null;\n  }\n};\n","/**\r\n * winston.js: Top-level include defining Winston.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst logform = require('logform');\r\nconst { warn } = require('./winston/common');\r\n\r\n/**\r\n * Expose version. Use `require` method for `webpack` support.\r\n * @type {string}\r\n */\r\nexports.version = require('../package.json').version;\r\n/**\r\n * Include transports defined by default by winston\r\n * @type {Array}\r\n */\r\nexports.transports = require('./winston/transports');\r\n/**\r\n * Expose utility methods\r\n * @type {Object}\r\n */\r\nexports.config = require('./winston/config');\r\n/**\r\n * Hoist format-related functionality from logform.\r\n * @type {Object}\r\n */\r\nexports.addColors = logform.levels;\r\n/**\r\n * Hoist format-related functionality from logform.\r\n * @type {Object}\r\n */\r\nexports.format = logform.format;\r\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {function}\r\n */\r\nexports.createLogger = require('./winston/create-logger');\r\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Object}\r\n */\r\nexports.ExceptionHandler = require('./winston/exception-handler');\r\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Object}\r\n */\r\nexports.RejectionHandler = require('./winston/rejection-handler');\r\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Container}\r\n */\r\nexports.Container = require('./winston/container');\r\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Object}\r\n */\r\nexports.Transport = require('winston-transport');\r\n/**\r\n * We create and expose a default `Container` to `winston.loggers` so that the\r\n * programmer may manage multiple `winston.Logger` instances without any\r\n * additional overhead.\r\n * @example\r\n *   // some-file1.js\r\n *   const logger = require('winston').loggers.get('something');\r\n *\r\n *   // some-file2.js\r\n *   const logger = require('winston').loggers.get('something');\r\n */\r\nexports.loggers = new exports.Container();\r\n\r\n/**\r\n * We create and expose a 'defaultLogger' so that the programmer may do the\r\n * following without the need to create an instance of winston.Logger directly:\r\n * @example\r\n *   const winston = require('winston');\r\n *   winston.log('info', 'some message');\r\n *   winston.error('some error');\r\n */\r\nconst defaultLogger = exports.createLogger();\r\n\r\n// Pass through the target methods onto `winston.\r\nObject.keys(exports.config.npm.levels)\r\n  .concat([\r\n    'log',\r\n    'query',\r\n    'stream',\r\n    'add',\r\n    'remove',\r\n    'clear',\r\n    'profile',\r\n    'startTimer',\r\n    'handleExceptions',\r\n    'unhandleExceptions',\r\n    'handleRejections',\r\n    'unhandleRejections',\r\n    'configure',\r\n    'child'\r\n  ])\r\n  .forEach(\r\n    method => (exports[method] = (...args) => defaultLogger[method](...args))\r\n  );\r\n\r\n/**\r\n * Define getter / setter for the default logger level which need to be exposed\r\n * by winston.\r\n * @type {string}\r\n */\r\nObject.defineProperty(exports, 'level', {\r\n  get() {\r\n    return defaultLogger.level;\r\n  },\r\n  set(val) {\r\n    defaultLogger.level = val;\r\n  }\r\n});\r\n\r\n/**\r\n * Define getter for `exceptions` which replaces `handleExceptions` and\r\n * `unhandleExceptions`.\r\n * @type {Object}\r\n */\r\nObject.defineProperty(exports, 'exceptions', {\r\n  get() {\r\n    return defaultLogger.exceptions;\r\n  }\r\n});\r\n\r\n/**\r\n * Define getters / setters for appropriate properties of the default logger\r\n * which need to be exposed by winston.\r\n * @type {Logger}\r\n */\r\n['exitOnError'].forEach(prop => {\r\n  Object.defineProperty(exports, prop, {\r\n    get() {\r\n      return defaultLogger[prop];\r\n    },\r\n    set(val) {\r\n      defaultLogger[prop] = val;\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * The default transports and exceptionHandlers for the default winston logger.\r\n * @type {Object}\r\n */\r\nObject.defineProperty(exports, 'default', {\r\n  get() {\r\n    return {\r\n      exceptionHandlers: defaultLogger.exceptionHandlers,\r\n      rejectionHandlers: defaultLogger.rejectionHandlers,\r\n      transports: defaultLogger.transports\r\n    };\r\n  }\r\n});\r\n\r\n// Have friendlier breakage notices for properties that were exposed by default\r\n// on winston < 3.0.\r\nwarn.deprecated(exports, 'setLevels');\r\nwarn.forFunctions(exports, 'useFormat', ['cli']);\r\nwarn.forProperties(exports, 'useFormat', ['padLevels', 'stripColors']);\r\nwarn.forFunctions(exports, 'deprecated', [\r\n  'addRewriter',\r\n  'addFilter',\r\n  'clone',\r\n  'extend'\r\n]);\r\nwarn.forProperties(exports, 'deprecated', ['emitErrs', 'levelLength']);\r\n// Throw a useful error when users attempt to run `new winston.Logger`.\r\nwarn.moved(exports, 'createLogger', 'Logger');\r\n","/**\r\n * common.js: Internal helper and utility functions for winston.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst { format } = require('util');\r\n\r\n/**\r\n * Set of simple deprecation notices and a way to expose them for a set of\r\n * properties.\r\n * @type {Object}\r\n * @private\r\n */\r\nexports.warn = {\r\n  deprecated(prop) {\r\n    return () => {\r\n      throw new Error(format('{ %s } was removed in winston@3.0.0.', prop));\r\n    };\r\n  },\r\n  useFormat(prop) {\r\n    return () => {\r\n      throw new Error([\r\n        format('{ %s } was removed in winston@3.0.0.', prop),\r\n        'Use a custom winston.format = winston.format(function) instead.'\r\n      ].join('\\n'));\r\n    };\r\n  },\r\n  forFunctions(obj, type, props) {\r\n    props.forEach(prop => {\r\n      obj[prop] = exports.warn[type](prop);\r\n    });\r\n  },\r\n  moved(obj, movedTo, prop) {\r\n    function movedNotice() {\r\n      return () => {\r\n        throw new Error([\r\n          format('winston.%s was moved in winston@3.0.0.', prop),\r\n          format('Use a winston.%s instead.', movedTo)\r\n        ].join('\\n'));\r\n      };\r\n    }\r\n\r\n    Object.defineProperty(obj, prop, {\r\n      get: movedNotice,\r\n      set: movedNotice\r\n    });\r\n  },\r\n  forProperties(obj, type, props) {\r\n    props.forEach(prop => {\r\n      const notice = exports.warn[type](prop);\r\n      Object.defineProperty(obj, prop, {\r\n        get: notice,\r\n        set: notice\r\n      });\r\n    });\r\n  }\r\n};\r\n","/**\r\n * index.js: Default settings for all levels that winston knows about.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst logform = require('logform');\r\nconst { configs } = require('triple-beam');\r\n\r\n/**\r\n * Export config set for the CLI.\r\n * @type {Object}\r\n */\r\nexports.cli = logform.levels(configs.cli);\r\n\r\n/**\r\n * Export config set for npm.\r\n * @type {Object}\r\n */\r\nexports.npm = logform.levels(configs.npm);\r\n\r\n/**\r\n * Export config set for the syslog.\r\n * @type {Object}\r\n */\r\nexports.syslog = logform.levels(configs.syslog);\r\n\r\n/**\r\n * Hoist addColors from logform where it was refactored into in winston@3.\r\n * @type {Object}\r\n */\r\nexports.addColors = logform.levels;\r\n","/**\r\n * container.js: Inversion of control container for winston logger instances.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst createLogger = require('./create-logger');\r\n\r\n/**\r\n * Inversion of control container for winston logger instances.\r\n * @type {Container}\r\n */\r\nmodule.exports = class Container {\r\n  /**\r\n   * Constructor function for the Container object responsible for managing a\r\n   * set of `winston.Logger` instances based on string ids.\r\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\r\n   */\r\n  constructor(options = {}) {\r\n    this.loggers = new Map();\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\r\n   * instance does not exist, one is created.\r\n   * @param {!string} id - The id of the Logger to get.\r\n   * @param {?Object} [options] - Options for the Logger instance.\r\n   * @returns {Logger} - A configured Logger instance with a specified id.\r\n   */\r\n  add(id, options) {\r\n    if (!this.loggers.has(id)) {\r\n      // Remark: Simple shallow clone for configuration options in case we pass\r\n      // in instantiated protoypal objects\r\n      options = Object.assign({}, options || this.options);\r\n      const existing = options.transports || this.options.transports;\r\n\r\n      // Remark: Make sure if we have an array of transports we slice it to\r\n      // make copies of those references.\r\n      options.transports = existing ? existing.slice() : [];\r\n\r\n      const logger = createLogger(options);\r\n      logger.on('close', () => this._delete(id));\r\n      this.loggers.set(id, logger);\r\n    }\r\n\r\n    return this.loggers.get(id);\r\n  }\r\n\r\n  /**\r\n   * Retreives a `winston.Logger` instance for the specified `id`. If\r\n   * an instance does not exist, one is created.\r\n   * @param {!string} id - The id of the Logger to get.\r\n   * @param {?Object} [options] - Options for the Logger instance.\r\n   * @returns {Logger} - A configured Logger instance with a specified id.\r\n   */\r\n  get(id, options) {\r\n    return this.add(id, options);\r\n  }\r\n\r\n  /**\r\n   * Check if the container has a logger with the id.\r\n   * @param {?string} id - The id of the Logger instance to find.\r\n   * @returns {boolean} - Boolean value indicating if this instance has a\r\n   * logger with the specified `id`.\r\n   */\r\n  has(id) {\r\n    return !!this.loggers.has(id);\r\n  }\r\n\r\n  /**\r\n   * Closes a `Logger` instance with the specified `id` if it exists.\r\n   * If no `id` is supplied then all Loggers are closed.\r\n   * @param {?string} id - The id of the Logger instance to close.\r\n   * @returns {undefined}\r\n   */\r\n  close(id) {\r\n    if (id) {\r\n      return this._removeLogger(id);\r\n    }\r\n\r\n    this.loggers.forEach((val, key) => this._removeLogger(key));\r\n  }\r\n\r\n  /**\r\n   * Remove a logger based on the id.\r\n   * @param {!string} id - The id of the logger to remove.\r\n   * @returns {undefined}\r\n   * @private\r\n   */\r\n  _removeLogger(id) {\r\n    if (!this.loggers.has(id)) {\r\n      return;\r\n    }\r\n\r\n    const logger = this.loggers.get(id);\r\n    logger.close();\r\n    this._delete(id);\r\n  }\r\n\r\n  /**\r\n   * Deletes a `Logger` instance with the specified `id`.\r\n   * @param {!string} id - The id of the Logger instance to delete from\r\n   * container.\r\n   * @returns {undefined}\r\n   * @private\r\n   */\r\n  _delete(id) {\r\n    this.loggers.delete(id);\r\n  }\r\n};\r\n","/**\r\n * create-logger.js: Logger factory for winston logger instances.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst { LEVEL } = require('triple-beam');\r\nconst config = require('./config');\r\nconst Logger = require('./logger');\r\nconst debug = require('@dabh/diagnostics')('winston:create-logger');\r\n\r\nfunction isLevelEnabledFunctionName(level) {\r\n  return 'is' + level.charAt(0).toUpperCase() + level.slice(1) + 'Enabled';\r\n}\r\n\r\n/**\r\n * Create a new instance of a winston Logger. Creates a new\r\n * prototype for each instance.\r\n * @param {!Object} opts - Options for the created logger.\r\n * @returns {Logger} - A newly created logger instance.\r\n */\r\nmodule.exports = function (opts = {}) {\r\n  //\r\n  // Default levels: npm\r\n  //\r\n  opts.levels = opts.levels || config.npm.levels;\r\n\r\n  /**\r\n   * DerivedLogger to attach the logs level methods.\r\n   * @type {DerivedLogger}\r\n   * @extends {Logger}\r\n   */\r\n  class DerivedLogger extends Logger {\r\n    /**\r\n     * Create a new class derived logger for which the levels can be attached to\r\n     * the prototype of. This is a V8 optimization that is well know to increase\r\n     * performance of prototype functions.\r\n     * @param {!Object} options - Options for the created logger.\r\n     */\r\n    constructor(options) {\r\n      super(options);\r\n    }\r\n  }\r\n\r\n  const logger = new DerivedLogger(opts);\r\n\r\n  //\r\n  // Create the log level methods for the derived logger.\r\n  //\r\n  Object.keys(opts.levels).forEach(function (level) {\r\n    debug('Define prototype method for \"%s\"', level);\r\n    if (level === 'log') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('Level \"log\" not defined: conflicts with the method \"log\". Use a different level name.');\r\n      return;\r\n    }\r\n\r\n    //\r\n    // Define prototype methods for each log level e.g.:\r\n    // logger.log('info', msg) implies these methods are defined:\r\n    // - logger.info(msg)\r\n    // - logger.isInfoEnabled()\r\n    //\r\n    // Remark: to support logger.child this **MUST** be a function\r\n    // so it'll always be called on the instance instead of a fixed\r\n    // place in the prototype chain.\r\n    //\r\n    DerivedLogger.prototype[level] = function (...args) {\r\n      // Prefer any instance scope, but default to \"root\" logger\r\n      const self = this || logger;\r\n\r\n      // Optimize the hot-path which is the single object.\r\n      if (args.length === 1) {\r\n        const [msg] = args;\r\n        const info = msg && msg.message && msg || { message: msg };\r\n        info.level = info[LEVEL] = level;\r\n        self._addDefaultMeta(info);\r\n        self.write(info);\r\n        return (this || logger);\r\n      }\r\n\r\n      // When provided nothing assume the empty string\r\n      if (args.length === 0) {\r\n        self.log(level, '');\r\n        return self;\r\n      }\r\n\r\n      // Otherwise build argument list which could potentially conform to\r\n      // either:\r\n      // . v3 API: log(obj)\r\n      // 2. v1/v2 API: log(level, msg, ... [string interpolate], [{metadata}], [callback])\r\n      return self.log(level, ...args);\r\n    };\r\n\r\n    DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function () {\r\n      return (this || logger).isLevelEnabled(level);\r\n    };\r\n  });\r\n\r\n  return logger;\r\n};\r\n","/**\r\n * exception-handler.js: Object for handling uncaughtException events.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst os = require('os');\r\nconst asyncForEach = require('async/forEach');\r\nconst debug = require('@dabh/diagnostics')('winston:exception');\r\nconst once = require('one-time');\r\nconst stackTrace = require('stack-trace');\r\nconst ExceptionStream = require('./exception-stream');\r\n\r\n/**\r\n * Object for handling uncaughtException events.\r\n * @type {ExceptionHandler}\r\n */\r\nmodule.exports = class ExceptionHandler {\r\n  /**\r\n   * TODO: add contructor description\r\n   * @param {!Logger} logger - TODO: add param description\r\n   */\r\n  constructor(logger) {\r\n    if (!logger) {\r\n      throw new Error('Logger is required to handle exceptions');\r\n    }\r\n\r\n    this.logger = logger;\r\n    this.handlers = new Map();\r\n  }\r\n\r\n  /**\r\n   * Handles `uncaughtException` events for the current process by adding any\r\n   * handlers passed in.\r\n   * @returns {undefined}\r\n   */\r\n  handle(...args) {\r\n    args.forEach(arg => {\r\n      if (Array.isArray(arg)) {\r\n        return arg.forEach(handler => this._addHandler(handler));\r\n      }\r\n\r\n      this._addHandler(arg);\r\n    });\r\n\r\n    if (!this.catcher) {\r\n      this.catcher = this._uncaughtException.bind(this);\r\n      process.on('uncaughtException', this.catcher);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes any handlers to `uncaughtException` events for the current\r\n   * process. This does not modify the state of the `this.handlers` set.\r\n   * @returns {undefined}\r\n   */\r\n  unhandle() {\r\n    if (this.catcher) {\r\n      process.removeListener('uncaughtException', this.catcher);\r\n      this.catcher = false;\r\n\r\n      Array.from(this.handlers.values())\r\n        .forEach(wrapper => this.logger.unpipe(wrapper));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TODO: add method description\r\n   * @param {Error} err - Error to get information about.\r\n   * @returns {mixed} - TODO: add return description.\r\n   */\r\n  getAllInfo(err) {\r\n    let { message } = err;\r\n    if (!message && typeof err === 'string') {\r\n      message = err;\r\n    }\r\n\r\n    return {\r\n      error: err,\r\n      // TODO (indexzero): how do we configure this?\r\n      level: 'error',\r\n      message: [\r\n        `uncaughtException: ${(message || '(no error message)')}`,\r\n        err.stack || '  No stack trace'\r\n      ].join('\\n'),\r\n      stack: err.stack,\r\n      exception: true,\r\n      date: new Date().toString(),\r\n      process: this.getProcessInfo(),\r\n      os: this.getOsInfo(),\r\n      trace: this.getTrace(err)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets all relevant process information for the currently running process.\r\n   * @returns {mixed} - TODO: add return description.\r\n   */\r\n  getProcessInfo() {\r\n    return {\r\n      pid: process.pid,\r\n      uid: process.getuid ? process.getuid() : null,\r\n      gid: process.getgid ? process.getgid() : null,\r\n      cwd: process.cwd(),\r\n      execPath: process.execPath,\r\n      version: process.version,\r\n      argv: process.argv,\r\n      memoryUsage: process.memoryUsage()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets all relevant OS information for the currently running process.\r\n   * @returns {mixed} - TODO: add return description.\r\n   */\r\n  getOsInfo() {\r\n    return {\r\n      loadavg: os.loadavg(),\r\n      uptime: os.uptime()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets a stack trace for the specified error.\r\n   * @param {mixed} err - TODO: add param description.\r\n   * @returns {mixed} - TODO: add return description.\r\n   */\r\n  getTrace(err) {\r\n    const trace = err ? stackTrace.parse(err) : stackTrace.get();\r\n    return trace.map(site => {\r\n      return {\r\n        column: site.getColumnNumber(),\r\n        file: site.getFileName(),\r\n        function: site.getFunctionName(),\r\n        line: site.getLineNumber(),\r\n        method: site.getMethodName(),\r\n        native: site.isNative()\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper method to add a transport as an exception handler.\r\n   * @param {Transport} handler - The transport to add as an exception handler.\r\n   * @returns {void}\r\n   */\r\n  _addHandler(handler) {\r\n    if (!this.handlers.has(handler)) {\r\n      handler.handleExceptions = true;\r\n      const wrapper = new ExceptionStream(handler);\r\n      this.handlers.set(handler, wrapper);\r\n      this.logger.pipe(wrapper);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs all relevant information around the `err` and exits the current\r\n   * process.\r\n   * @param {Error} err - Error to handle\r\n   * @returns {mixed} - TODO: add return description.\r\n   * @private\r\n   */\r\n  _uncaughtException(err) {\r\n    const info = this.getAllInfo(err);\r\n    const handlers = this._getExceptionHandlers();\r\n    // Calculate if we should exit on this error\r\n    let doExit = typeof this.logger.exitOnError === 'function'\r\n      ? this.logger.exitOnError(err)\r\n      : this.logger.exitOnError;\r\n    let timeout;\r\n\r\n    if (!handlers.length && doExit) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('winston: exitOnError cannot be true with no exception handlers.');\r\n      // eslint-disable-next-line no-console\r\n      console.warn('winston: not exiting process.');\r\n      doExit = false;\r\n    }\r\n\r\n    function gracefulExit() {\r\n      debug('doExit', doExit);\r\n      debug('process._exiting', process._exiting);\r\n\r\n      if (doExit && !process._exiting) {\r\n        // Remark: Currently ignoring any exceptions from transports when\r\n        // catching uncaught exceptions.\r\n        if (timeout) {\r\n          clearTimeout(timeout);\r\n        }\r\n        // eslint-disable-next-line no-process-exit\r\n        process.exit(1);\r\n      }\r\n    }\r\n\r\n    if (!handlers || handlers.length === 0) {\r\n      return process.nextTick(gracefulExit);\r\n    }\r\n\r\n    // Log to all transports attempting to listen for when they are completed.\r\n    asyncForEach(handlers, (handler, next) => {\r\n      const done = once(next);\r\n      const transport = handler.transport || handler;\r\n\r\n      // Debug wrapping so that we can inspect what's going on under the covers.\r\n      function onDone(event) {\r\n        return () => {\r\n          debug(event);\r\n          done();\r\n        };\r\n      }\r\n\r\n      transport._ending = true;\r\n      transport.once('finish', onDone('finished'));\r\n      transport.once('error', onDone('error'));\r\n    }, () => doExit && gracefulExit());\r\n\r\n    this.logger.log(info);\r\n\r\n    // If exitOnError is true, then only allow the logging of exceptions to\r\n    // take up to `3000ms`.\r\n    if (doExit) {\r\n      timeout = setTimeout(gracefulExit, 3000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the list of transports and exceptionHandlers for this instance.\r\n   * @returns {Array} - List of transports and exceptionHandlers for this\r\n   * instance.\r\n   * @private\r\n   */\r\n  _getExceptionHandlers() {\r\n    // Remark (indexzero): since `logger.transports` returns all of the pipes\r\n    // from the _readableState of the stream we actually get the join of the\r\n    // explicit handlers and the implicit transports with\r\n    // `handleExceptions: true`\r\n    return this.logger.transports.filter(wrap => {\r\n      const transport = wrap.transport || wrap;\r\n      return transport.handleExceptions;\r\n    });\r\n  }\r\n};\r\n","/**\r\n * exception-stream.js: TODO: add file header handler.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst { Writable } = require('readable-stream');\r\n\r\n/**\r\n * TODO: add class description.\r\n * @type {ExceptionStream}\r\n * @extends {Writable}\r\n */\r\nmodule.exports = class ExceptionStream extends Writable {\r\n  /**\r\n   * Constructor function for the ExceptionStream responsible for wrapping a\r\n   * TransportStream; only allowing writes of `info` objects with\r\n   * `info.exception` set to true.\r\n   * @param {!TransportStream} transport - Stream to filter to exceptions\r\n   */\r\n  constructor(transport) {\r\n    super({ objectMode: true });\r\n\r\n    if (!transport) {\r\n      throw new Error('ExceptionStream requires a TransportStream instance.');\r\n    }\r\n\r\n    // Remark (indexzero): we set `handleExceptions` here because it's the\r\n    // predicate checked in ExceptionHandler.prototype.__getExceptionHandlers\r\n    this.handleExceptions = true;\r\n    this.transport = transport;\r\n  }\r\n\r\n  /**\r\n   * Writes the info object to our transport instance if (and only if) the\r\n   * `exception` property is set on the info.\r\n   * @param {mixed} info - TODO: add param description.\r\n   * @param {mixed} enc - TODO: add param description.\r\n   * @param {mixed} callback - TODO: add param description.\r\n   * @returns {mixed} - TODO: add return description.\r\n   * @private\r\n   */\r\n  _write(info, enc, callback) {\r\n    if (info.exception) {\r\n      return this.transport.log(info, callback);\r\n    }\r\n\r\n    callback();\r\n    return true;\r\n  }\r\n};\r\n","/**\r\n * logger.js: TODO: add file header description.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst { Stream, Transform } = require('readable-stream');\r\nconst asyncForEach = require('async/forEach');\r\nconst { LEVEL, SPLAT } = require('triple-beam');\r\nconst isStream = require('is-stream');\r\nconst ExceptionHandler = require('./exception-handler');\r\nconst RejectionHandler = require('./rejection-handler');\r\nconst LegacyTransportStream = require('winston-transport/legacy');\r\nconst Profiler = require('./profiler');\r\nconst { warn } = require('./common');\r\nconst config = require('./config');\r\n\r\n/**\r\n * Captures the number of format (i.e. %s strings) in a given string.\r\n * Based on `util.format`, see Node.js source:\r\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\r\n * @type {RegExp}\r\n */\r\nconst formatRegExp = /%[scdjifoO%]/g;\r\n\r\n/**\r\n * TODO: add class description.\r\n * @type {Logger}\r\n * @extends {Transform}\r\n */\r\nclass Logger extends Transform {\r\n  /**\r\n   * Constructor function for the Logger object responsible for persisting log\r\n   * messages and metadata to one or more transports.\r\n   * @param {!Object} options - foo\r\n   */\r\n  constructor(options) {\r\n    super({ objectMode: true });\r\n    this.configure(options);\r\n  }\r\n\r\n  child(defaultRequestMetadata) {\r\n    const logger = this;\r\n    return Object.create(logger, {\r\n      write: {\r\n        value: function (info) {\r\n          const infoClone = Object.assign(\r\n            {},\r\n            defaultRequestMetadata,\r\n            info\r\n          );\r\n\r\n          // Object.assign doesn't copy inherited Error\r\n          // properties so we have to do that explicitly\r\n          //\r\n          // Remark (indexzero): we should remove this\r\n          // since the errors format will handle this case.\r\n          //\r\n          if (info instanceof Error) {\r\n            infoClone.stack = info.stack;\r\n            infoClone.message = info.message;\r\n          }\r\n\r\n          logger.write(infoClone);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This will wholesale reconfigure this instance by:\r\n   * 1. Resetting all transports. Older transports will be removed implicitly.\r\n   * 2. Set all other options including levels, colors, rewriters, filters,\r\n   *    exceptionHandlers, etc.\r\n   * @param {!Object} options - TODO: add param description.\r\n   * @returns {undefined}\r\n   */\r\n  configure({\r\n    silent,\r\n    format,\r\n    defaultMeta,\r\n    levels,\r\n    level = 'info',\r\n    exitOnError = true,\r\n    transports,\r\n    colors,\r\n    emitErrs,\r\n    formatters,\r\n    padLevels,\r\n    rewriters,\r\n    stripColors,\r\n    exceptionHandlers,\r\n    rejectionHandlers\r\n  } = {}) {\r\n    // Reset transports if we already have them\r\n    if (this.transports.length) {\r\n      this.clear();\r\n    }\r\n\r\n    this.silent = silent;\r\n    this.format = format || this.format || require('logform/json')();\r\n\r\n    this.defaultMeta = defaultMeta || null;\r\n    // Hoist other options onto this instance.\r\n    this.levels = levels || this.levels || config.npm.levels;\r\n    this.level = level;\r\n    if (this.exceptions) {\r\n      this.exceptions.unhandle();\r\n    }\r\n    if (this.rejections) {\r\n      this.rejections.unhandle();\r\n    }\r\n    this.exceptions = new ExceptionHandler(this);\r\n    this.rejections = new RejectionHandler(this);\r\n    this.profilers = {};\r\n    this.exitOnError = exitOnError;\r\n\r\n    // Add all transports we have been provided.\r\n    if (transports) {\r\n      transports = Array.isArray(transports) ? transports : [transports];\r\n      transports.forEach(transport => this.add(transport));\r\n    }\r\n\r\n    if (\r\n      colors ||\r\n      emitErrs ||\r\n      formatters ||\r\n      padLevels ||\r\n      rewriters ||\r\n      stripColors\r\n    ) {\r\n      throw new Error(\r\n        [\r\n          '{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.',\r\n          'Use a custom winston.format(function) instead.',\r\n          'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'\r\n        ].join('\\n')\r\n      );\r\n    }\r\n\r\n    if (exceptionHandlers) {\r\n      this.exceptions.handle(exceptionHandlers);\r\n    }\r\n    if (rejectionHandlers) {\r\n      this.rejections.handle(rejectionHandlers);\r\n    }\r\n  }\r\n\r\n  isLevelEnabled(level) {\r\n    const givenLevelValue = getLevelValue(this.levels, level);\r\n    if (givenLevelValue === null) {\r\n      return false;\r\n    }\r\n\r\n    const configuredLevelValue = getLevelValue(this.levels, this.level);\r\n    if (configuredLevelValue === null) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.transports || this.transports.length === 0) {\r\n      return configuredLevelValue >= givenLevelValue;\r\n    }\r\n\r\n    const index = this.transports.findIndex(transport => {\r\n      let transportLevelValue = getLevelValue(this.levels, transport.level);\r\n      if (transportLevelValue === null) {\r\n        transportLevelValue = configuredLevelValue;\r\n      }\r\n      return transportLevelValue >= givenLevelValue;\r\n    });\r\n    return index !== -1;\r\n  }\r\n\r\n  /* eslint-disable valid-jsdoc */\r\n  /**\r\n   * Ensure backwards compatibility with a `log` method\r\n   * @param {mixed} level - Level the log message is written at.\r\n   * @param {mixed} msg - TODO: add param description.\r\n   * @param {mixed} meta - TODO: add param description.\r\n   * @returns {Logger} - TODO: add return description.\r\n   *\r\n   * @example\r\n   *    // Supports the existing API:\r\n   *    logger.log('info', 'Hello world', { custom: true });\r\n   *    logger.log('info', new Error('Yo, it\\'s on fire'));\r\n   *\r\n   *    // Requires winston.format.splat()\r\n   *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });\r\n   *\r\n   *    // And the new API with a single JSON literal:\r\n   *    logger.log({ level: 'info', message: 'Hello world', custom: true });\r\n   *    logger.log({ level: 'info', message: new Error('Yo, it\\'s on fire') });\r\n   *\r\n   *    // Also requires winston.format.splat()\r\n   *    logger.log({\r\n   *      level: 'info',\r\n   *      message: '%s %d%%',\r\n   *      [SPLAT]: ['A string', 50],\r\n   *      meta: { thisIsMeta: true }\r\n   *    });\r\n   *\r\n   */\r\n  /* eslint-enable valid-jsdoc */\r\n  log(level, msg, ...splat) {\r\n    // eslint-disable-line max-params\r\n    // Optimize for the hotpath of logging JSON literals\r\n    if (arguments.length === 1) {\r\n      // Yo dawg, I heard you like levels ... seriously ...\r\n      // In this context the LHS `level` here is actually the `info` so read\r\n      // this as: info[LEVEL] = info.level;\r\n      level[LEVEL] = level.level;\r\n      this._addDefaultMeta(level);\r\n      this.write(level);\r\n      return this;\r\n    }\r\n\r\n    // Slightly less hotpath, but worth optimizing for.\r\n    if (arguments.length === 2) {\r\n      if (msg && typeof msg === 'object') {\r\n        msg[LEVEL] = msg.level = level;\r\n        this._addDefaultMeta(msg);\r\n        this.write(msg);\r\n        return this;\r\n      }\r\n\r\n      msg = { [LEVEL]: level, level, message: msg };\r\n      this._addDefaultMeta(msg);\r\n      this.write(msg);\r\n      return this;\r\n    }\r\n\r\n    const [meta] = splat;\r\n    if (typeof meta === 'object' && meta !== null) {\r\n      // Extract tokens, if none available default to empty array to\r\n      // ensure consistancy in expected results\r\n      const tokens = msg && msg.match && msg.match(formatRegExp);\r\n\r\n      if (!tokens) {\r\n        const info = Object.assign({}, this.defaultMeta, meta, {\r\n          [LEVEL]: level,\r\n          [SPLAT]: splat,\r\n          level,\r\n          message: msg\r\n        });\r\n\r\n        if (meta.message) info.message = `${info.message} ${meta.message}`;\r\n        if (meta.stack) info.stack = meta.stack;\r\n\r\n        this.write(info);\r\n        return this;\r\n      }\r\n    }\r\n\r\n    this.write(Object.assign({}, this.defaultMeta, {\r\n      [LEVEL]: level,\r\n      [SPLAT]: splat,\r\n      level,\r\n      message: msg\r\n    }));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Pushes data so that it can be picked up by all of our pipe targets.\r\n   * @param {mixed} info - TODO: add param description.\r\n   * @param {mixed} enc - TODO: add param description.\r\n   * @param {mixed} callback - Continues stream processing.\r\n   * @returns {undefined}\r\n   * @private\r\n   */\r\n  _transform(info, enc, callback) {\r\n    if (this.silent) {\r\n      return callback();\r\n    }\r\n\r\n    // [LEVEL] is only soft guaranteed to be set here since we are a proper\r\n    // stream. It is likely that `info` came in through `.log(info)` or\r\n    // `.info(info)`. If it is not defined, however, define it.\r\n    // This LEVEL symbol is provided by `triple-beam` and also used in:\r\n    // - logform\r\n    // - winston-transport\r\n    // - abstract-winston-transport\r\n    if (!info[LEVEL]) {\r\n      info[LEVEL] = info.level;\r\n    }\r\n\r\n    // Remark: really not sure what to do here, but this has been reported as\r\n    // very confusing by pre winston@2.0.0 users as quite confusing when using\r\n    // custom levels.\r\n    if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {\r\n      // eslint-disable-next-line no-console\r\n      console.error('[winston] Unknown logger level: %s', info[LEVEL]);\r\n    }\r\n\r\n    // Remark: not sure if we should simply error here.\r\n    if (!this._readableState.pipes) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(\r\n        '[winston] Attempt to write logs with no transports, which can increase memory usage: %j',\r\n        info\r\n      );\r\n    }\r\n\r\n    // Here we write to the `format` pipe-chain, which on `readable` above will\r\n    // push the formatted `info` Object onto the buffer for this instance. We trap\r\n    // (and re-throw) any errors generated by the user-provided format, but also\r\n    // guarantee that the streams callback is invoked so that we can continue flowing.\r\n    try {\r\n      this.push(this.format.transform(info, this.format.options));\r\n    } finally {\r\n      this._writableState.sync = false;\r\n      // eslint-disable-next-line callback-return\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delays the 'finish' event until all transport pipe targets have\r\n   * also emitted 'finish' or are already finished.\r\n   * @param {mixed} callback - Continues stream processing.\r\n   */\r\n  _final(callback) {\r\n    const transports = this.transports.slice();\r\n    asyncForEach(\r\n      transports,\r\n      (transport, next) => {\r\n        if (!transport || transport.finished) return setImmediate(next);\r\n        transport.once('finish', next);\r\n        transport.end();\r\n      },\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds the transport to this logger instance by piping to it.\r\n   * @param {mixed} transport - TODO: add param description.\r\n   * @returns {Logger} - TODO: add return description.\r\n   */\r\n  add(transport) {\r\n    // Support backwards compatibility with all existing `winston < 3.x.x`\r\n    // transports which meet one of two criteria:\r\n    // 1. They inherit from winston.Transport in  < 3.x.x which is NOT a stream.\r\n    // 2. They expose a log method which has a length greater than 2 (i.e. more then\r\n    //    just `log(info, callback)`.\r\n    const target =\r\n      !isStream(transport) || transport.log.length > 2\r\n        ? new LegacyTransportStream({ transport })\r\n        : transport;\r\n\r\n    if (!target._writableState || !target._writableState.objectMode) {\r\n      throw new Error(\r\n        'Transports must WritableStreams in objectMode. Set { objectMode: true }.'\r\n      );\r\n    }\r\n\r\n    // Listen for the `error` event and the `warn` event on the new Transport.\r\n    this._onEvent('error', target);\r\n    this._onEvent('warn', target);\r\n    this.pipe(target);\r\n\r\n    if (transport.handleExceptions) {\r\n      this.exceptions.handle();\r\n    }\r\n\r\n    if (transport.handleRejections) {\r\n      this.rejections.handle();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the transport from this logger instance by unpiping from it.\r\n   * @param {mixed} transport - TODO: add param description.\r\n   * @returns {Logger} - TODO: add return description.\r\n   */\r\n  remove(transport) {\r\n    if (!transport) return this;\r\n    let target = transport;\r\n    if (!isStream(transport) || transport.log.length > 2) {\r\n      target = this.transports.filter(\r\n        match => match.transport === transport\r\n      )[0];\r\n    }\r\n\r\n    if (target) {\r\n      this.unpipe(target);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all transports from this logger instance.\r\n   * @returns {Logger} - TODO: add return description.\r\n   */\r\n  clear() {\r\n    this.unpipe();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Cleans up resources (streams, event listeners) for all transports\r\n   * associated with this instance (if necessary).\r\n   * @returns {Logger} - TODO: add return description.\r\n   */\r\n  close() {\r\n    this.exceptions.unhandle();\r\n    this.rejections.unhandle();\r\n    this.clear();\r\n    this.emit('close');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the `target` levels specified on this instance.\r\n   * @param {Object} Target levels to use on this instance.\r\n   */\r\n  setLevels() {\r\n    warn.deprecated('setLevels');\r\n  }\r\n\r\n  /**\r\n   * Queries the all transports for this instance with the specified `options`.\r\n   * This will aggregate each transport's results into one object containing\r\n   * a property per transport.\r\n   * @param {Object} options - Query options for this instance.\r\n   * @param {function} callback - Continuation to respond to when complete.\r\n   */\r\n  query(options, callback) {\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    options = options || {};\r\n    const results = {};\r\n    const queryObject = Object.assign({}, options.query || {});\r\n\r\n    // Helper function to query a single transport\r\n    function queryTransport(transport, next) {\r\n      if (options.query && typeof transport.formatQuery === 'function') {\r\n        options.query = transport.formatQuery(queryObject);\r\n      }\r\n\r\n      transport.query(options, (err, res) => {\r\n        if (err) {\r\n          return next(err);\r\n        }\r\n\r\n        if (typeof transport.formatResults === 'function') {\r\n          res = transport.formatResults(res, options.format);\r\n        }\r\n\r\n        next(null, res);\r\n      });\r\n    }\r\n\r\n    // Helper function to accumulate the results from `queryTransport` into\r\n    // the `results`.\r\n    function addResults(transport, next) {\r\n      queryTransport(transport, (err, result) => {\r\n        // queryTransport could potentially invoke the callback multiple times\r\n        // since Transport code can be unpredictable.\r\n        if (next) {\r\n          result = err || result;\r\n          if (result) {\r\n            results[transport.name] = result;\r\n          }\r\n\r\n          // eslint-disable-next-line callback-return\r\n          next();\r\n        }\r\n\r\n        next = null;\r\n      });\r\n    }\r\n\r\n    // Iterate over the transports in parallel setting the appropriate key in\r\n    // the `results`.\r\n    asyncForEach(\r\n      this.transports.filter(transport => !!transport.query),\r\n      addResults,\r\n      () => callback(null, results)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a log stream for all transports. Options object is optional.\r\n   * @param{Object} options={} - Stream options for this instance.\r\n   * @returns {Stream} - TODO: add return description.\r\n   */\r\n  stream(options = {}) {\r\n    const out = new Stream();\r\n    const streams = [];\r\n\r\n    out._streams = streams;\r\n    out.destroy = () => {\r\n      let i = streams.length;\r\n      while (i--) {\r\n        streams[i].destroy();\r\n      }\r\n    };\r\n\r\n    // Create a list of all transports for this instance.\r\n    this.transports\r\n      .filter(transport => !!transport.stream)\r\n      .forEach(transport => {\r\n        const str = transport.stream(options);\r\n        if (!str) {\r\n          return;\r\n        }\r\n\r\n        streams.push(str);\r\n\r\n        str.on('log', log => {\r\n          log.transport = log.transport || [];\r\n          log.transport.push(transport.name);\r\n          out.emit('log', log);\r\n        });\r\n\r\n        str.on('error', err => {\r\n          err.transport = err.transport || [];\r\n          err.transport.push(transport.name);\r\n          out.emit('error', err);\r\n        });\r\n      });\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns an object corresponding to a specific timing. When done is called\r\n   * the timer will finish and log the duration. e.g.:\r\n   * @returns {Profile} - TODO: add return description.\r\n   * @example\r\n   *    const timer = winston.startTimer()\r\n   *    setTimeout(() => {\r\n   *      timer.done({\r\n   *        message: 'Logging message'\r\n   *      });\r\n   *    }, 1000);\r\n   */\r\n  startTimer() {\r\n    return new Profiler(this);\r\n  }\r\n\r\n  /**\r\n   * Tracks the time inbetween subsequent calls to this method with the same\r\n   * `id` parameter. The second call to this method will log the difference in\r\n   * milliseconds along with the message.\r\n   * @param {string} id Unique id of the profiler\r\n   * @returns {Logger} - TODO: add return description.\r\n   */\r\n  profile(id, ...args) {\r\n    const time = Date.now();\r\n    if (this.profilers[id]) {\r\n      const timeEnd = this.profilers[id];\r\n      delete this.profilers[id];\r\n\r\n      // Attempt to be kind to users if they are still using older APIs.\r\n      if (typeof args[args.length - 2] === 'function') {\r\n        // eslint-disable-next-line no-console\r\n        console.warn(\r\n          'Callback function no longer supported as of winston@3.0.0'\r\n        );\r\n        args.pop();\r\n      }\r\n\r\n      // Set the duration property of the metadata\r\n      const info = typeof args[args.length - 1] === 'object' ? args.pop() : {};\r\n      info.level = info.level || 'info';\r\n      info.durationMs = time - timeEnd;\r\n      info.message = info.message || id;\r\n      return this.write(info);\r\n    }\r\n\r\n    this.profilers[id] = time;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\r\n   * @returns {undefined}\r\n   * @deprecated\r\n   */\r\n  handleExceptions(...args) {\r\n    // eslint-disable-next-line no-console\r\n    console.warn(\r\n      'Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()'\r\n    );\r\n    this.exceptions.handle(...args);\r\n  }\r\n\r\n  /**\r\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\r\n   * @returns {undefined}\r\n   * @deprecated\r\n   */\r\n  unhandleExceptions(...args) {\r\n    // eslint-disable-next-line no-console\r\n    console.warn(\r\n      'Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()'\r\n    );\r\n    this.exceptions.unhandle(...args);\r\n  }\r\n\r\n  /**\r\n   * Throw a more meaningful deprecation notice\r\n   * @throws {Error} - TODO: add throws description.\r\n   */\r\n  cli() {\r\n    throw new Error(\r\n      [\r\n        'Logger.cli() was removed in winston@3.0.0',\r\n        'Use a custom winston.formats.cli() instead.',\r\n        'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'\r\n      ].join('\\n')\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Bubbles the `event` that occured on the specified `transport` up\r\n   * from this instance.\r\n   * @param {string} event - The event that occured\r\n   * @param {Object} transport - Transport on which the event occured\r\n   * @private\r\n   */\r\n  _onEvent(event, transport) {\r\n    function transportEvent(err) {\r\n      // https://github.com/winstonjs/winston/issues/1364\r\n      if (event === 'error' && !this.transports.includes(transport)) {\r\n        this.add(transport);\r\n      }\r\n      this.emit(event, err, transport);\r\n    }\r\n\r\n    if (!transport['__winston' + event]) {\r\n      transport['__winston' + event] = transportEvent.bind(this);\r\n      transport.on(event, transport['__winston' + event]);\r\n    }\r\n  }\r\n\r\n  _addDefaultMeta(msg) {\r\n    if (this.defaultMeta) {\r\n      Object.assign(msg, this.defaultMeta);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getLevelValue(levels, level) {\r\n  const value = levels[level];\r\n  if (!value && value !== 0) {\r\n    return null;\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Represents the current readableState pipe targets for this Logger instance.\r\n * @type {Array|Object}\r\n */\r\nObject.defineProperty(Logger.prototype, 'transports', {\r\n  configurable: false,\r\n  enumerable: true,\r\n  get() {\r\n    const { pipes } = this._readableState;\r\n    return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;\r\n  }\r\n});\r\n\r\nmodule.exports = Logger;\r\n","/**\r\n * profiler.js: TODO: add file header description.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * TODO: add class description.\r\n * @type {Profiler}\r\n * @private\r\n */\r\nmodule.exports = class Profiler {\r\n  /**\r\n   * Constructor function for the Profiler instance used by\r\n   * `Logger.prototype.startTimer`. When done is called the timer will finish\r\n   * and log the duration.\r\n   * @param {!Logger} logger - TODO: add param description.\r\n   * @private\r\n   */\r\n  constructor(logger) {\r\n    if (!logger) {\r\n      throw new Error('Logger is required for profiling.');\r\n    }\r\n\r\n    this.logger = logger;\r\n    this.start = Date.now();\r\n  }\r\n\r\n  /**\r\n   * Ends the current timer (i.e. Profiler) instance and logs the `msg` along\r\n   * with the duration since creation.\r\n   * @returns {mixed} - TODO: add return description.\r\n   * @private\r\n   */\r\n  done(...args) {\r\n    if (typeof args[args.length - 1] === 'function') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('Callback function no longer supported as of winston@3.0.0');\r\n      args.pop();\r\n    }\r\n\r\n    const info = typeof args[args.length - 1] === 'object' ? args.pop() : {};\r\n    info.level = info.level || 'info';\r\n    info.durationMs = (Date.now()) - this.start;\r\n\r\n    return this.logger.write(info);\r\n  }\r\n};\r\n","/**\r\n * exception-handler.js: Object for handling uncaughtException events.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst os = require('os');\r\nconst asyncForEach = require('async/forEach');\r\nconst debug = require('@dabh/diagnostics')('winston:rejection');\r\nconst once = require('one-time');\r\nconst stackTrace = require('stack-trace');\r\nconst ExceptionStream = require('./exception-stream');\r\n\r\n/**\r\n * Object for handling unhandledRejection events.\r\n * @type {RejectionHandler}\r\n */\r\nmodule.exports = class RejectionHandler {\r\n  /**\r\n   * TODO: add contructor description\r\n   * @param {!Logger} logger - TODO: add param description\r\n   */\r\n  constructor(logger) {\r\n    if (!logger) {\r\n      throw new Error('Logger is required to handle rejections');\r\n    }\r\n\r\n    this.logger = logger;\r\n    this.handlers = new Map();\r\n  }\r\n\r\n  /**\r\n   * Handles `unhandledRejection` events for the current process by adding any\r\n   * handlers passed in.\r\n   * @returns {undefined}\r\n   */\r\n  handle(...args) {\r\n    args.forEach(arg => {\r\n      if (Array.isArray(arg)) {\r\n        return arg.forEach(handler => this._addHandler(handler));\r\n      }\r\n\r\n      this._addHandler(arg);\r\n    });\r\n\r\n    if (!this.catcher) {\r\n      this.catcher = this._unhandledRejection.bind(this);\r\n      process.on('unhandledRejection', this.catcher);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes any handlers to `unhandledRejection` events for the current\r\n   * process. This does not modify the state of the `this.handlers` set.\r\n   * @returns {undefined}\r\n   */\r\n  unhandle() {\r\n    if (this.catcher) {\r\n      process.removeListener('unhandledRejection', this.catcher);\r\n      this.catcher = false;\r\n\r\n      Array.from(this.handlers.values()).forEach(wrapper =>\r\n        this.logger.unpipe(wrapper)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TODO: add method description\r\n   * @param {Error} err - Error to get information about.\r\n   * @returns {mixed} - TODO: add return description.\r\n   */\r\n  getAllInfo(err) {\r\n    let message = null;\r\n    if (err) {\r\n      message = typeof err === 'string' ? err : err.message;\r\n    }\r\n\r\n    return {\r\n      error: err,\r\n      // TODO (indexzero): how do we configure this?\r\n      level: 'error',\r\n      message: [\r\n        `unhandledRejection: ${message || '(no error message)'}`,\r\n        err && err.stack || '  No stack trace'\r\n      ].join('\\n'),\r\n      stack: err && err.stack,\r\n      exception: true,\r\n      date: new Date().toString(),\r\n      process: this.getProcessInfo(),\r\n      os: this.getOsInfo(),\r\n      trace: this.getTrace(err)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets all relevant process information for the currently running process.\r\n   * @returns {mixed} - TODO: add return description.\r\n   */\r\n  getProcessInfo() {\r\n    return {\r\n      pid: process.pid,\r\n      uid: process.getuid ? process.getuid() : null,\r\n      gid: process.getgid ? process.getgid() : null,\r\n      cwd: process.cwd(),\r\n      execPath: process.execPath,\r\n      version: process.version,\r\n      argv: process.argv,\r\n      memoryUsage: process.memoryUsage()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets all relevant OS information for the currently running process.\r\n   * @returns {mixed} - TODO: add return description.\r\n   */\r\n  getOsInfo() {\r\n    return {\r\n      loadavg: os.loadavg(),\r\n      uptime: os.uptime()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets a stack trace for the specified error.\r\n   * @param {mixed} err - TODO: add param description.\r\n   * @returns {mixed} - TODO: add return description.\r\n   */\r\n  getTrace(err) {\r\n    const trace = err ? stackTrace.parse(err) : stackTrace.get();\r\n    return trace.map(site => {\r\n      return {\r\n        column: site.getColumnNumber(),\r\n        file: site.getFileName(),\r\n        function: site.getFunctionName(),\r\n        line: site.getLineNumber(),\r\n        method: site.getMethodName(),\r\n        native: site.isNative()\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper method to add a transport as an exception handler.\r\n   * @param {Transport} handler - The transport to add as an exception handler.\r\n   * @returns {void}\r\n   */\r\n  _addHandler(handler) {\r\n    if (!this.handlers.has(handler)) {\r\n      handler.handleRejections = true;\r\n      const wrapper = new ExceptionStream(handler);\r\n      this.handlers.set(handler, wrapper);\r\n      this.logger.pipe(wrapper);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs all relevant information around the `err` and exits the current\r\n   * process.\r\n   * @param {Error} err - Error to handle\r\n   * @returns {mixed} - TODO: add return description.\r\n   * @private\r\n   */\r\n  _unhandledRejection(err) {\r\n    const info = this.getAllInfo(err);\r\n    const handlers = this._getRejectionHandlers();\r\n    // Calculate if we should exit on this error\r\n    let doExit =\r\n      typeof this.logger.exitOnError === 'function'\r\n        ? this.logger.exitOnError(err)\r\n        : this.logger.exitOnError;\r\n    let timeout;\r\n\r\n    if (!handlers.length && doExit) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('winston: exitOnError cannot be true with no rejection handlers.');\r\n      // eslint-disable-next-line no-console\r\n      console.warn('winston: not exiting process.');\r\n      doExit = false;\r\n    }\r\n\r\n    function gracefulExit() {\r\n      debug('doExit', doExit);\r\n      debug('process._exiting', process._exiting);\r\n\r\n      if (doExit && !process._exiting) {\r\n        // Remark: Currently ignoring any rejections from transports when\r\n        // catching unhandled rejections.\r\n        if (timeout) {\r\n          clearTimeout(timeout);\r\n        }\r\n        // eslint-disable-next-line no-process-exit\r\n        process.exit(1);\r\n      }\r\n    }\r\n\r\n    if (!handlers || handlers.length === 0) {\r\n      return process.nextTick(gracefulExit);\r\n    }\r\n\r\n    // Log to all transports attempting to listen for when they are completed.\r\n    asyncForEach(\r\n      handlers,\r\n      (handler, next) => {\r\n        const done = once(next);\r\n        const transport = handler.transport || handler;\r\n\r\n        // Debug wrapping so that we can inspect what's going on under the covers.\r\n        function onDone(event) {\r\n          return () => {\r\n            debug(event);\r\n            done();\r\n          };\r\n        }\r\n\r\n        transport._ending = true;\r\n        transport.once('finish', onDone('finished'));\r\n        transport.once('error', onDone('error'));\r\n      },\r\n      () => doExit && gracefulExit()\r\n    );\r\n\r\n    this.logger.log(info);\r\n\r\n    // If exitOnError is true, then only allow the logging of exceptions to\r\n    // take up to `3000ms`.\r\n    if (doExit) {\r\n      timeout = setTimeout(gracefulExit, 3000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the list of transports and exceptionHandlers for this instance.\r\n   * @returns {Array} - List of transports and exceptionHandlers for this\r\n   * instance.\r\n   * @private\r\n   */\r\n  _getRejectionHandlers() {\r\n    // Remark (indexzero): since `logger.transports` returns all of the pipes\r\n    // from the _readableState of the stream we actually get the join of the\r\n    // explicit handlers and the implicit transports with\r\n    // `handleRejections: true`\r\n    return this.logger.transports.filter(wrap => {\r\n      const transport = wrap.transport || wrap;\r\n      return transport.handleRejections;\r\n    });\r\n  }\r\n};\r\n","/**\r\n * tail-file.js: TODO: add file header description.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst fs = require('fs');\r\nconst { StringDecoder } = require('string_decoder');\r\nconst { Stream } = require('readable-stream');\r\n\r\n/**\r\n * Simple no-op function.\r\n * @returns {undefined}\r\n */\r\nfunction noop() {}\r\n\r\n/**\r\n * TODO: add function description.\r\n * @param {Object} options - Options for tail.\r\n * @param {function} iter - Iterator function to execute on every line.\r\n* `tail -f` a file. Options must include file.\r\n * @returns {mixed} - TODO: add return description.\r\n */\r\nmodule.exports = (options, iter) => {\r\n  const buffer = Buffer.alloc(64 * 1024);\r\n  const decode = new StringDecoder('utf8');\r\n  const stream = new Stream();\r\n  let buff = '';\r\n  let pos = 0;\r\n  let row = 0;\r\n\r\n  if (options.start === -1) {\r\n    delete options.start;\r\n  }\r\n\r\n  stream.readable = true;\r\n  stream.destroy = () => {\r\n    stream.destroyed = true;\r\n    stream.emit('end');\r\n    stream.emit('close');\r\n  };\r\n\r\n  fs.open(options.file, 'a+', '0644', (err, fd) => {\r\n    if (err) {\r\n      if (!iter) {\r\n        stream.emit('error', err);\r\n      } else {\r\n        iter(err);\r\n      }\r\n      stream.destroy();\r\n      return;\r\n    }\r\n\r\n    (function read() {\r\n      if (stream.destroyed) {\r\n        fs.close(fd, noop);\r\n        return;\r\n      }\r\n\r\n      return fs.read(fd, buffer, 0, buffer.length, pos, (error, bytes) => {\r\n        if (error) {\r\n          if (!iter) {\r\n            stream.emit('error', error);\r\n          } else {\r\n            iter(error);\r\n          }\r\n          stream.destroy();\r\n          return;\r\n        }\r\n\r\n        if (!bytes) {\r\n          if (buff) {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (options.start == null || row > options.start) {\r\n              if (!iter) {\r\n                stream.emit('line', buff);\r\n              } else {\r\n                iter(null, buff);\r\n              }\r\n            }\r\n            row++;\r\n            buff = '';\r\n          }\r\n          return setTimeout(read, 1000);\r\n        }\r\n\r\n        let data = decode.write(buffer.slice(0, bytes));\r\n        if (!iter) {\r\n          stream.emit('data', data);\r\n        }\r\n\r\n        data = (buff + data).split(/\\n+/);\r\n\r\n        const l = data.length - 1;\r\n        let i = 0;\r\n\r\n        for (; i < l; i++) {\r\n          // eslint-disable-next-line eqeqeq\r\n          if (options.start == null || row > options.start) {\r\n            if (!iter) {\r\n              stream.emit('line', data[i]);\r\n            } else {\r\n              iter(null, data[i]);\r\n            }\r\n          }\r\n          row++;\r\n        }\r\n\r\n        buff = data[l];\r\n        pos += bytes;\r\n        return read();\r\n      });\r\n    }());\r\n  });\r\n\r\n  if (!iter) {\r\n    return stream;\r\n  }\r\n\r\n  return stream.destroy;\r\n};\r\n","/* eslint-disable no-console */\r\n/*\r\n * console.js: Transport for outputting to the console.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst os = require('os');\r\nconst { LEVEL, MESSAGE } = require('triple-beam');\r\nconst TransportStream = require('winston-transport');\r\n\r\n/**\r\n * Transport for outputting to the console.\r\n * @type {Console}\r\n * @extends {TransportStream}\r\n */\r\nmodule.exports = class Console extends TransportStream {\r\n  /**\r\n   * Constructor function for the Console transport object responsible for\r\n   * persisting log messages and metadata to a terminal or TTY.\r\n   * @param {!Object} [options={}] - Options for this instance.\r\n   */\r\n  constructor(options = {}) {\r\n    super(options);\r\n\r\n    // Expose the name of this Transport on the prototype\r\n    this.name = options.name || 'console';\r\n    this.stderrLevels = this._stringArrayToSet(options.stderrLevels);\r\n    this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);\r\n    this.eol = (typeof options.eol === 'string') ? options.eol : os.EOL;\r\n\r\n    this.setMaxListeners(30);\r\n  }\r\n\r\n  /**\r\n   * Core logging method exposed to Winston.\r\n   * @param {Object} info - TODO: add param description.\r\n   * @param {Function} callback - TODO: add param description.\r\n   * @returns {undefined}\r\n   */\r\n  log(info, callback) {\r\n    setImmediate(() => this.emit('logged', info));\r\n\r\n    // Remark: what if there is no raw...?\r\n    if (this.stderrLevels[info[LEVEL]]) {\r\n      if (console._stderr) {\r\n        // Node.js maps `process.stderr` to `console._stderr`.\r\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\r\n      } else {\r\n        // console.error adds a newline\r\n        console.error(info[MESSAGE]);\r\n      }\r\n\r\n      if (callback) {\r\n        callback(); // eslint-disable-line callback-return\r\n      }\r\n      return;\r\n    } else if (this.consoleWarnLevels[info[LEVEL]]) {\r\n      if (console._stderr) {\r\n        // Node.js maps `process.stderr` to `console._stderr`.\r\n        // in Node.js console.warn is an alias for console.error\r\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\r\n      } else {\r\n        // console.warn adds a newline\r\n        console.warn(info[MESSAGE]);\r\n      }\r\n\r\n      if (callback) {\r\n        callback(); // eslint-disable-line callback-return\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (console._stdout) {\r\n      // Node.js maps `process.stdout` to `console._stdout`.\r\n      console._stdout.write(`${info[MESSAGE]}${this.eol}`);\r\n    } else {\r\n      // console.log adds a newline.\r\n      console.log(info[MESSAGE]);\r\n    }\r\n\r\n    if (callback) {\r\n      callback(); // eslint-disable-line callback-return\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a Set-like object with strArray's elements as keys (each with the\r\n   * value true).\r\n   * @param {Array} strArray - Array of Set-elements as strings.\r\n   * @param {?string} [errMsg] - Custom error message thrown on invalid input.\r\n   * @returns {Object} - TODO: add return description.\r\n   * @private\r\n   */\r\n  _stringArrayToSet(strArray, errMsg) {\r\n    if (!strArray)\r\n      return {};\r\n\r\n    errMsg = errMsg || 'Cannot make set from type other than Array of string elements';\r\n\r\n    if (!Array.isArray(strArray)) {\r\n      throw new Error(errMsg);\r\n    }\r\n\r\n    return strArray.reduce((set, el) =>  {\r\n      if (typeof el !== 'string') {\r\n        throw new Error(errMsg);\r\n      }\r\n      set[el] = true;\r\n\r\n      return set;\r\n    }, {});\r\n  }\r\n};\r\n","/* eslint-disable complexity,max-statements */\r\n/**\r\n * file.js: Transport for outputting to a local log file.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst asyncSeries = require('async/series');\r\nconst zlib = require('zlib');\r\nconst { MESSAGE } = require('triple-beam');\r\nconst { Stream, PassThrough } = require('readable-stream');\r\nconst TransportStream = require('winston-transport');\r\nconst debug = require('@dabh/diagnostics')('winston:file');\r\nconst os = require('os');\r\nconst tailFile = require('../tail-file');\r\n\r\n/**\r\n * Transport for outputting to a local log file.\r\n * @type {File}\r\n * @extends {TransportStream}\r\n */\r\nmodule.exports = class File extends TransportStream {\r\n  /**\r\n   * Constructor function for the File transport object responsible for\r\n   * persisting log messages and metadata to one or more files.\r\n   * @param {Object} options - Options for this instance.\r\n   */\r\n  constructor(options = {}) {\r\n    super(options);\r\n\r\n    // Expose the name of this Transport on the prototype.\r\n    this.name = options.name || 'file';\r\n\r\n    // Helper function which throws an `Error` in the event that any of the\r\n    // rest of the arguments is present in `options`.\r\n    function throwIf(target, ...args) {\r\n      args.slice(1).forEach(name => {\r\n        if (options[name]) {\r\n          throw new Error(`Cannot set ${name} and ${target} together`);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Setup the base stream that always gets piped to to handle buffering.\r\n    this._stream = new PassThrough();\r\n    this._stream.setMaxListeners(30);\r\n\r\n    // Bind this context for listener methods.\r\n    this._onError = this._onError.bind(this);\r\n\r\n    if (options.filename || options.dirname) {\r\n      throwIf('filename or dirname', 'stream');\r\n      this._basename = this.filename = options.filename\r\n        ? path.basename(options.filename)\r\n        : 'winston.log';\r\n\r\n      this.dirname = options.dirname || path.dirname(options.filename);\r\n      this.options = options.options || { flags: 'a' };\r\n    } else if (options.stream) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('options.stream will be removed in winston@4. Use winston.transports.Stream');\r\n      throwIf('stream', 'filename', 'maxsize');\r\n      this._dest = this._stream.pipe(this._setupStream(options.stream));\r\n      this.dirname = path.dirname(this._dest.path);\r\n      // We need to listen for drain events when write() returns false. This\r\n      // can make node mad at times.\r\n    } else {\r\n      throw new Error('Cannot log to file without filename or stream.');\r\n    }\r\n\r\n    this.maxsize = options.maxsize || null;\r\n    this.rotationFormat = options.rotationFormat || false;\r\n    this.zippedArchive = options.zippedArchive || false;\r\n    this.maxFiles = options.maxFiles || null;\r\n    this.eol = (typeof options.eol === 'string') ? options.eol : os.EOL;\r\n    this.tailable = options.tailable || false;\r\n\r\n    // Internal state variables representing the number of files this instance\r\n    // has created and the current size (in bytes) of the current logfile.\r\n    this._size = 0;\r\n    this._pendingSize = 0;\r\n    this._created = 0;\r\n    this._drain = false;\r\n    this._opening = false;\r\n    this._ending = false;\r\n\r\n    if (this.dirname) this._createLogDirIfNotExist(this.dirname);\r\n    this.open();\r\n  }\r\n\r\n  finishIfEnding() {\r\n    if (this._ending) {\r\n      if (this._opening) {\r\n        this.once('open', () => {\r\n          this._stream.once('finish', () => this.emit('finish'));\r\n          setImmediate(() => this._stream.end());\r\n        });\r\n      } else {\r\n        this._stream.once('finish', () => this.emit('finish'));\r\n        setImmediate(() => this._stream.end());\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Core logging method exposed to Winston. Metadata is optional.\r\n   * @param {Object} info - TODO: add param description.\r\n   * @param {Function} callback - TODO: add param description.\r\n   * @returns {undefined}\r\n   */\r\n  log(info, callback = () => {}) {\r\n    // Remark: (jcrugzz) What is necessary about this callback(null, true) now\r\n    // when thinking about 3.x? Should silent be handled in the base\r\n    // TransportStream _write method?\r\n    if (this.silent) {\r\n      callback();\r\n      return true;\r\n    }\r\n\r\n    // Output stream buffer is full and has asked us to wait for the drain event\r\n    if (this._drain) {\r\n      this._stream.once('drain', () => {\r\n        this._drain = false;\r\n        this.log(info, callback);\r\n      });\r\n      return;\r\n    }\r\n    if (this._rotate) {\r\n      this._stream.once('rotate', () => {\r\n        this._rotate = false;\r\n        this.log(info, callback);\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Grab the raw string and append the expected EOL.\r\n    const output = `${info[MESSAGE]}${this.eol}`;\r\n    const bytes = Buffer.byteLength(output);\r\n\r\n    // After we have written to the PassThrough check to see if we need\r\n    // to rotate to the next file.\r\n    //\r\n    // Remark: This gets called too early and does not depict when data\r\n    // has been actually flushed to disk.\r\n    function logged() {\r\n      this._size += bytes;\r\n      this._pendingSize -= bytes;\r\n\r\n      debug('logged %s %s', this._size, output);\r\n      this.emit('logged', info);\r\n\r\n      // Do not attempt to rotate files while opening\r\n      if (this._opening) {\r\n        return;\r\n      }\r\n\r\n      // Check to see if we need to end the stream and create a new one.\r\n      if (!this._needsNewFile()) {\r\n        return;\r\n      }\r\n\r\n      // End the current stream, ensure it flushes and create a new one.\r\n      // This could potentially be optimized to not run a stat call but its\r\n      // the safest way since we are supporting `maxFiles`.\r\n      this._rotate = true;\r\n      this._endStream(() => this._rotateFile());\r\n    }\r\n\r\n    // Keep track of the pending bytes being written while files are opening\r\n    // in order to properly rotate the PassThrough this._stream when the file\r\n    // eventually does open.\r\n    this._pendingSize += bytes;\r\n    if (this._opening\r\n      && !this.rotatedWhileOpening\r\n      && this._needsNewFile(this._size + this._pendingSize)) {\r\n      this.rotatedWhileOpening = true;\r\n    }\r\n\r\n    const written = this._stream.write(output, logged.bind(this));\r\n    if (!written) {\r\n      this._drain = true;\r\n      this._stream.once('drain', () => {\r\n        this._drain = false;\r\n        callback();\r\n      });\r\n    } else {\r\n      callback(); // eslint-disable-line callback-return\r\n    }\r\n\r\n    debug('written', written, this._drain);\r\n\r\n    this.finishIfEnding();\r\n\r\n    return written;\r\n  }\r\n\r\n  /**\r\n   * Query the transport. Options object is optional.\r\n   * @param {Object} options - Loggly-like query options for this instance.\r\n   * @param {function} callback - Continuation to respond to when complete.\r\n   * TODO: Refactor me.\r\n   */\r\n  query(options, callback) {\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    options = normalizeQuery(options);\r\n    const file = path.join(this.dirname, this.filename);\r\n    let buff = '';\r\n    let results = [];\r\n    let row = 0;\r\n\r\n    const stream = fs.createReadStream(file, {\r\n      encoding: 'utf8'\r\n    });\r\n\r\n    stream.on('error', err => {\r\n      if (stream.readable) {\r\n        stream.destroy();\r\n      }\r\n      if (!callback) {\r\n        return;\r\n      }\r\n\r\n      return err.code !== 'ENOENT' ? callback(err) : callback(null, results);\r\n    });\r\n\r\n    stream.on('data', data => {\r\n      data = (buff + data).split(/\\n+/);\r\n      const l = data.length - 1;\r\n      let i = 0;\r\n\r\n      for (; i < l; i++) {\r\n        if (!options.start || row >= options.start) {\r\n          add(data[i]);\r\n        }\r\n        row++;\r\n      }\r\n\r\n      buff = data[l];\r\n    });\r\n\r\n    stream.on('close', () => {\r\n      if (buff) {\r\n        add(buff, true);\r\n      }\r\n      if (options.order === 'desc') {\r\n        results = results.reverse();\r\n      }\r\n\r\n      // eslint-disable-next-line callback-return\r\n      if (callback) callback(null, results);\r\n    });\r\n\r\n    function add(buff, attempt) {\r\n      try {\r\n        const log = JSON.parse(buff);\r\n        if (check(log)) {\r\n          push(log);\r\n        }\r\n      } catch (e) {\r\n        if (!attempt) {\r\n          stream.emit('error', e);\r\n        }\r\n      }\r\n    }\r\n\r\n    function push(log) {\r\n      if (\r\n        options.rows &&\r\n        results.length >= options.rows &&\r\n        options.order !== 'desc'\r\n      ) {\r\n        if (stream.readable) {\r\n          stream.destroy();\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (options.fields) {\r\n        log = options.fields.reduce((obj, key) => {\r\n          obj[key] = log[key];\r\n          return obj;\r\n        }, {});\r\n      }\r\n\r\n      if (options.order === 'desc') {\r\n        if (results.length >= options.rows) {\r\n          results.shift();\r\n        }\r\n      }\r\n      results.push(log);\r\n    }\r\n\r\n    function check(log) {\r\n      if (!log) {\r\n        return;\r\n      }\r\n\r\n      if (typeof log !== 'object') {\r\n        return;\r\n      }\r\n\r\n      const time = new Date(log.timestamp);\r\n      if (\r\n        (options.from && time < options.from) ||\r\n        (options.until && time > options.until) ||\r\n        (options.level && options.level !== log.level)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    function normalizeQuery(options) {\r\n      options = options || {};\r\n\r\n      // limit\r\n      options.rows = options.rows || options.limit || 10;\r\n\r\n      // starting row offset\r\n      options.start = options.start || 0;\r\n\r\n      // now\r\n      options.until = options.until || new Date();\r\n      if (typeof options.until !== 'object') {\r\n        options.until = new Date(options.until);\r\n      }\r\n\r\n      // now - 24\r\n      options.from = options.from || (options.until - (24 * 60 * 60 * 1000));\r\n      if (typeof options.from !== 'object') {\r\n        options.from = new Date(options.from);\r\n      }\r\n\r\n      // 'asc' or 'desc'\r\n      options.order = options.order || 'desc';\r\n\r\n      return options;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a log stream for this transport. Options object is optional.\r\n   * @param {Object} options - Stream options for this instance.\r\n   * @returns {Stream} - TODO: add return description.\r\n   * TODO: Refactor me.\r\n   */\r\n  stream(options = {}) {\r\n    const file = path.join(this.dirname, this.filename);\r\n    const stream = new Stream();\r\n    const tail = {\r\n      file,\r\n      start: options.start\r\n    };\r\n\r\n    stream.destroy = tailFile(tail, (err, line) => {\r\n      if (err) {\r\n        return stream.emit('error', err);\r\n      }\r\n\r\n      try {\r\n        stream.emit('data', line);\r\n        line = JSON.parse(line);\r\n        stream.emit('log', line);\r\n      } catch (e) {\r\n        stream.emit('error', e);\r\n      }\r\n    });\r\n\r\n    return stream;\r\n  }\r\n\r\n  /**\r\n   * Checks to see the filesize of.\r\n   * @returns {undefined}\r\n   */\r\n  open() {\r\n    // If we do not have a filename then we were passed a stream and\r\n    // don't need to keep track of size.\r\n    if (!this.filename) return;\r\n    if (this._opening) return;\r\n\r\n    this._opening = true;\r\n\r\n    // Stat the target file to get the size and create the stream.\r\n    this.stat((err, size) => {\r\n      if (err) {\r\n        return this.emit('error', err);\r\n      }\r\n      debug('stat done: %s { size: %s }', this.filename, size);\r\n      this._size = size;\r\n      this._dest = this._createStream(this._stream);\r\n      this._opening = false;\r\n      this.once('open', () => {\r\n        if (this._stream.eventNames().includes('rotate')) {\r\n          this._stream.emit('rotate');\r\n        } else {\r\n          this._rotate = false;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stat the file and assess information in order to create the proper stream.\r\n   * @param {function} callback - TODO: add param description.\r\n   * @returns {undefined}\r\n   */\r\n  stat(callback) {\r\n    const target = this._getFile();\r\n    const fullpath = path.join(this.dirname, target);\r\n\r\n    fs.stat(fullpath, (err, stat) => {\r\n      if (err && err.code === 'ENOENT') {\r\n        debug('ENOENT ok', fullpath);\r\n        // Update internally tracked filename with the new target name.\r\n        this.filename = target;\r\n        return callback(null, 0);\r\n      }\r\n\r\n      if (err) {\r\n        debug(`err ${err.code} ${fullpath}`);\r\n        return callback(err);\r\n      }\r\n\r\n      if (!stat || this._needsNewFile(stat.size)) {\r\n        // If `stats.size` is greater than the `maxsize` for this\r\n        // instance then try again.\r\n        return this._incFile(() => this.stat(callback));\r\n      }\r\n\r\n      // Once we have figured out what the filename is, set it\r\n      // and return the size.\r\n      this.filename = target;\r\n      callback(null, stat.size);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Closes the stream associated with this instance.\r\n   * @param {function} cb - TODO: add param description.\r\n   * @returns {undefined}\r\n   */\r\n  close(cb) {\r\n    if (!this._stream) {\r\n      return;\r\n    }\r\n\r\n    this._stream.end(() => {\r\n      if (cb) {\r\n        cb(); // eslint-disable-line callback-return\r\n      }\r\n      this.emit('flush');\r\n      this.emit('closed');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * TODO: add method description.\r\n   * @param {number} size - TODO: add param description.\r\n   * @returns {undefined}\r\n   */\r\n  _needsNewFile(size) {\r\n    size = size || this._size;\r\n    return this.maxsize && size >= this.maxsize;\r\n  }\r\n\r\n  /**\r\n   * TODO: add method description.\r\n   * @param {Error} err - TODO: add param description.\r\n   * @returns {undefined}\r\n   */\r\n  _onError(err) {\r\n    this.emit('error', err);\r\n  }\r\n\r\n  /**\r\n   * TODO: add method description.\r\n   * @param {Stream} stream - TODO: add param description.\r\n   * @returns {mixed} - TODO: add return description.\r\n   */\r\n  _setupStream(stream) {\r\n    stream.on('error', this._onError);\r\n\r\n    return stream;\r\n  }\r\n\r\n  /**\r\n   * TODO: add method description.\r\n   * @param {Stream} stream - TODO: add param description.\r\n   * @returns {mixed} - TODO: add return description.\r\n   */\r\n  _cleanupStream(stream) {\r\n    stream.removeListener('error', this._onError);\r\n\r\n    return stream;\r\n  }\r\n\r\n  /**\r\n   * TODO: add method description.\r\n   */\r\n  _rotateFile() {\r\n    this._incFile(() => this.open());\r\n  }\r\n\r\n  /**\r\n   * Unpipe from the stream that has been marked as full and end it so it\r\n   * flushes to disk.\r\n   *\r\n   * @param {function} callback - Callback for when the current file has closed.\r\n   * @private\r\n   */\r\n  _endStream(callback = () => {}) {\r\n    if (this._dest) {\r\n      this._stream.unpipe(this._dest);\r\n      this._dest.end(() => {\r\n        this._cleanupStream(this._dest);\r\n        callback();\r\n      });\r\n    } else {\r\n      callback(); // eslint-disable-line callback-return\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the WritableStream for the active file on this instance. If we\r\n   * should gzip the file then a zlib stream is returned.\r\n   *\r\n   * @param {ReadableStream} source – PassThrough to pipe to the file when open.\r\n   * @returns {WritableStream} Stream that writes to disk for the active file.\r\n   */\r\n  _createStream(source) {\r\n    const fullpath = path.join(this.dirname, this.filename);\r\n\r\n    debug('create stream start', fullpath, this.options);\r\n    const dest = fs.createWriteStream(fullpath, this.options)\r\n      // TODO: What should we do with errors here?\r\n      .on('error', err => debug(err))\r\n      .on('close', () => debug('close', dest.path, dest.bytesWritten))\r\n      .on('open', () => {\r\n        debug('file open ok', fullpath);\r\n        this.emit('open', fullpath);\r\n        source.pipe(dest);\r\n\r\n        // If rotation occured during the open operation then we immediately\r\n        // start writing to a new PassThrough, begin opening the next file\r\n        // and cleanup the previous source and dest once the source has drained.\r\n        if (this.rotatedWhileOpening) {\r\n          this._stream = new PassThrough();\r\n          this._stream.setMaxListeners(30);\r\n          this._rotateFile();\r\n          this.rotatedWhileOpening = false;\r\n          this._cleanupStream(dest);\r\n          source.end();\r\n        }\r\n      });\r\n\r\n    debug('create stream ok', fullpath);\r\n    if (this.zippedArchive) {\r\n      const gzip = zlib.createGzip();\r\n      gzip.pipe(dest);\r\n      return gzip;\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * TODO: add method description.\r\n   * @param {function} callback - TODO: add param description.\r\n   * @returns {undefined}\r\n   */\r\n  _incFile(callback) {\r\n    debug('_incFile', this.filename);\r\n    const ext = path.extname(this._basename);\r\n    const basename = path.basename(this._basename, ext);\r\n\r\n    if (!this.tailable) {\r\n      this._created += 1;\r\n      this._checkMaxFilesIncrementing(ext, basename, callback);\r\n    } else {\r\n      this._checkMaxFilesTailable(ext, basename, callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the next filename to use for this instance in the case that log\r\n   * filesizes are being capped.\r\n   * @returns {string} - TODO: add return description.\r\n   * @private\r\n   */\r\n  _getFile() {\r\n    const ext = path.extname(this._basename);\r\n    const basename = path.basename(this._basename, ext);\r\n    const isRotation = this.rotationFormat\r\n      ? this.rotationFormat()\r\n      : this._created;\r\n\r\n    // Caveat emptor (indexzero): rotationFormat() was broken by design When\r\n    // combined with max files because the set of files to unlink is never\r\n    // stored.\r\n    const target = !this.tailable && this._created\r\n      ? `${basename}${isRotation}${ext}`\r\n      : `${basename}${ext}`;\r\n\r\n    return this.zippedArchive && !this.tailable\r\n      ? `${target}.gz`\r\n      : target;\r\n  }\r\n\r\n  /**\r\n   * Increment the number of files created or checked by this instance.\r\n   * @param {mixed} ext - TODO: add param description.\r\n   * @param {mixed} basename - TODO: add param description.\r\n   * @param {mixed} callback - TODO: add param description.\r\n   * @returns {undefined}\r\n   * @private\r\n   */\r\n  _checkMaxFilesIncrementing(ext, basename, callback) {\r\n    // Check for maxFiles option and delete file.\r\n    if (!this.maxFiles || this._created < this.maxFiles) {\r\n      return setImmediate(callback);\r\n    }\r\n\r\n    const oldest = this._created - this.maxFiles;\r\n    const isOldest = oldest !== 0 ? oldest : '';\r\n    const isZipped = this.zippedArchive ? '.gz' : '';\r\n    const filePath = `${basename}${isOldest}${ext}${isZipped}`;\r\n    const target = path.join(this.dirname, filePath);\r\n\r\n    fs.unlink(target, callback);\r\n  }\r\n\r\n  /**\r\n   * Roll files forward based on integer, up to maxFiles. e.g. if base if\r\n   * file.log and it becomes oversized, roll to file1.log, and allow file.log\r\n   * to be re-used. If file is oversized again, roll file1.log to file2.log,\r\n   * roll file.log to file1.log, and so on.\r\n   * @param {mixed} ext - TODO: add param description.\r\n   * @param {mixed} basename - TODO: add param description.\r\n   * @param {mixed} callback - TODO: add param description.\r\n   * @returns {undefined}\r\n   * @private\r\n   */\r\n  _checkMaxFilesTailable(ext, basename, callback) {\r\n    const tasks = [];\r\n    if (!this.maxFiles) {\r\n      return;\r\n    }\r\n\r\n    // const isZipped = this.zippedArchive ? '.gz' : '';\r\n    const isZipped = this.zippedArchive ? '.gz' : '';\r\n    for (let x = this.maxFiles - 1; x > 1; x--) {\r\n      tasks.push(function (i, cb) {\r\n        let fileName = `${basename}${(i - 1)}${ext}${isZipped}`;\r\n        const tmppath = path.join(this.dirname, fileName);\r\n\r\n        fs.exists(tmppath, exists => {\r\n          if (!exists) {\r\n            return cb(null);\r\n          }\r\n\r\n          fileName = `${basename}${i}${ext}${isZipped}`;\r\n          fs.rename(tmppath, path.join(this.dirname, fileName), cb);\r\n        });\r\n      }.bind(this, x));\r\n    }\r\n\r\n    asyncSeries(tasks, () => {\r\n      fs.rename(\r\n        path.join(this.dirname, `${basename}${ext}`),\r\n        path.join(this.dirname, `${basename}1${ext}${isZipped}`),\r\n        callback\r\n      );\r\n    });\r\n  }\r\n\r\n  _createLogDirIfNotExist(dirPath) {\r\n    /* eslint-disable no-sync */\r\n    if (!fs.existsSync(dirPath)) {\r\n      fs.mkdirSync(dirPath, { recursive: true });\r\n    }\r\n    /* eslint-enable no-sync */\r\n  }\r\n};\r\n","/**\r\n * http.js: Transport for outputting to a json-rpcserver.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst http = require('http');\r\nconst https = require('https');\r\nconst { Stream } = require('readable-stream');\r\nconst TransportStream = require('winston-transport');\r\nconst jsonStringify = require('safe-stable-stringify');\r\n\r\n/**\r\n * Transport for outputting to a json-rpc server.\r\n * @type {Stream}\r\n * @extends {TransportStream}\r\n */\r\nmodule.exports = class Http extends TransportStream {\r\n  /**\r\n   * Constructor function for the Http transport object responsible for\r\n   * persisting log messages and metadata to a terminal or TTY.\r\n   * @param {!Object} [options={}] - Options for this instance.\r\n   */\r\n  // eslint-disable-next-line max-statements\r\n  constructor(options = {}) {\r\n    super(options);\r\n\r\n    this.options = options;\r\n    this.name = options.name || 'http';\r\n    this.ssl = !!options.ssl;\r\n    this.host = options.host || 'localhost';\r\n    this.port = options.port;\r\n    this.auth = options.auth;\r\n    this.path = options.path || '';\r\n    this.agent = options.agent;\r\n    this.headers = options.headers || {};\r\n    this.headers['content-type'] = 'application/json';\r\n    this.batch = options.batch || false;\r\n    this.batchInterval = options.batchInterval || 5000;\r\n    this.batchCount = options.batchCount || 10;\r\n    this.batchOptions = [];\r\n    this.batchTimeoutID = -1;\r\n    this.batchCallback = {};\r\n\r\n    if (!this.port) {\r\n      this.port = this.ssl ? 443 : 80;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Core logging method exposed to Winston.\r\n   * @param {Object} info - TODO: add param description.\r\n   * @param {function} callback - TODO: add param description.\r\n   * @returns {undefined}\r\n   */\r\n  log(info, callback) {\r\n    this._request(info, (err, res) => {\r\n      if (res && res.statusCode !== 200) {\r\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\r\n      }\r\n\r\n      if (err) {\r\n        this.emit('warn', err);\r\n      } else {\r\n        this.emit('logged', info);\r\n      }\r\n    });\r\n\r\n    // Remark: (jcrugzz) Fire and forget here so requests dont cause buffering\r\n    // and block more requests from happening?\r\n    if (callback) {\r\n      setImmediate(callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Query the transport. Options object is optional.\r\n   * @param {Object} options -  Loggly-like query options for this instance.\r\n   * @param {function} callback - Continuation to respond to when complete.\r\n   * @returns {undefined}\r\n   */\r\n  query(options, callback) {\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    options = {\r\n      method: 'query',\r\n      params: this.normalizeQuery(options)\r\n    };\r\n\r\n    if (options.params.path) {\r\n      options.path = options.params.path;\r\n      delete options.params.path;\r\n    }\r\n\r\n    if (options.params.auth) {\r\n      options.auth = options.params.auth;\r\n      delete options.params.auth;\r\n    }\r\n\r\n    this._request(options, (err, res, body) => {\r\n      if (res && res.statusCode !== 200) {\r\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\r\n      }\r\n\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      if (typeof body === 'string') {\r\n        try {\r\n          body = JSON.parse(body);\r\n        } catch (e) {\r\n          return callback(e);\r\n        }\r\n      }\r\n\r\n      callback(null, body);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a log stream for this transport. Options object is optional.\r\n   * @param {Object} options - Stream options for this instance.\r\n   * @returns {Stream} - TODO: add return description\r\n   */\r\n  stream(options = {}) {\r\n    const stream = new Stream();\r\n    options = {\r\n      method: 'stream',\r\n      params: options\r\n    };\r\n\r\n    if (options.params.path) {\r\n      options.path = options.params.path;\r\n      delete options.params.path;\r\n    }\r\n\r\n    if (options.params.auth) {\r\n      options.auth = options.params.auth;\r\n      delete options.params.auth;\r\n    }\r\n\r\n    let buff = '';\r\n    const req = this._request(options);\r\n\r\n    stream.destroy = () => req.destroy();\r\n    req.on('data', data => {\r\n      data = (buff + data).split(/\\n+/);\r\n      const l = data.length - 1;\r\n\r\n      let i = 0;\r\n      for (; i < l; i++) {\r\n        try {\r\n          stream.emit('log', JSON.parse(data[i]));\r\n        } catch (e) {\r\n          stream.emit('error', e);\r\n        }\r\n      }\r\n\r\n      buff = data[l];\r\n    });\r\n    req.on('error', err => stream.emit('error', err));\r\n\r\n    return stream;\r\n  }\r\n\r\n  /**\r\n   * Make a request to a winstond server or any http server which can\r\n   * handle json-rpc.\r\n   * @param {function} options - Options to sent the request.\r\n   * @param {function} callback - Continuation to respond to when complete.\r\n   */\r\n  _request(options, callback) {\r\n    options = options || {};\r\n\r\n    const auth = options.auth || this.auth;\r\n    const path = options.path || this.path || '';\r\n\r\n    delete options.auth;\r\n    delete options.path;\r\n\r\n    if (this.batch) {\r\n      this._doBatch(options, callback, auth, path);\r\n    } else {\r\n      this._doRequest(options, callback, auth, path);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send or memorize the options according to batch configuration\r\n   * @param {function} options - Options to sent the request.\r\n   * @param {function} callback - Continuation to respond to when complete.\r\n   * @param {Object?} auth - authentication options\r\n   * @param {string} path - request path\r\n   */\r\n  _doBatch(options, callback, auth, path) {\r\n    this.batchOptions.push(options);\r\n    if (this.batchOptions.length === 1) {\r\n      // First message stored, it's time to start the timeout!\r\n      const me = this;\r\n      this.batchCallback = callback;\r\n      this.batchTimeoutID = setTimeout(function () {\r\n        // timeout is reached, send all messages to endpoint\r\n        me.batchTimeoutID = -1;\r\n        me._doBatchRequest(me.batchCallback, auth, path);\r\n      }, this.batchInterval);\r\n    }\r\n    if (this.batchOptions.length === this.batchCount) {\r\n      // max batch count is reached, send all messages to endpoint\r\n      this._doBatchRequest(this.batchCallback, auth, path);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initiate a request with the memorized batch options, stop the batch timeout\r\n   * @param {function} callback - Continuation to respond to when complete.\r\n   * @param {Object?} auth - authentication options\r\n   * @param {string} path - request path\r\n   */\r\n  _doBatchRequest(callback, auth, path) {\r\n    if (this.batchTimeoutID > 0) {\r\n      clearTimeout(this.batchTimeoutID);\r\n      this.batchTimeoutID = -1;\r\n    }\r\n    const batchOptionsCopy = this.batchOptions.slice();\r\n    this.batchOptions = [];\r\n    this._doRequest(batchOptionsCopy, callback, auth, path);\r\n  }\r\n\r\n  /**\r\n   * Make a request to a winstond server or any http server which can\r\n   * handle json-rpc.\r\n   * @param {function} options - Options to sent the request.\r\n   * @param {function} callback - Continuation to respond to when complete.\r\n   * @param {Object?} auth - authentication options\r\n   * @param {string} path - request path\r\n   */\r\n  _doRequest(options, callback, auth, path) {\r\n    // Prepare options for outgoing HTTP request\r\n    const headers = Object.assign({}, this.headers);\r\n    if (auth && auth.bearer) {\r\n      headers.Authorization = `Bearer ${auth.bearer}`;\r\n    }\r\n    const req = (this.ssl ? https : http).request({\r\n      ...this.options,\r\n      method: 'POST',\r\n      host: this.host,\r\n      port: this.port,\r\n      path: `/${path.replace(/^\\//, '')}`,\r\n      headers: headers,\r\n      auth: (auth && auth.username && auth.password) ? (`${auth.username}:${auth.password}`) : '',\r\n      agent: this.agent\r\n    });\r\n\r\n    req.on('error', callback);\r\n    req.on('response', res => (\r\n      res.on('end', () => callback(null, res)).resume()\r\n    ));\r\n    req.end(Buffer.from(jsonStringify(options, this.options.replacer), 'utf8'));\r\n  }\r\n};\r\n","/**\r\n * transports.js: Set of all transports Winston knows about.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * TODO: add property description.\r\n * @type {Console}\r\n */\r\nObject.defineProperty(exports, 'Console', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get() {\r\n    return require('./console');\r\n  }\r\n});\r\n\r\n/**\r\n * TODO: add property description.\r\n * @type {File}\r\n */\r\nObject.defineProperty(exports, 'File', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get() {\r\n    return require('./file');\r\n  }\r\n});\r\n\r\n/**\r\n * TODO: add property description.\r\n * @type {Http}\r\n */\r\nObject.defineProperty(exports, 'Http', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get() {\r\n    return require('./http');\r\n  }\r\n});\r\n\r\n/**\r\n * TODO: add property description.\r\n * @type {Stream}\r\n */\r\nObject.defineProperty(exports, 'Stream', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get() {\r\n    return require('./stream');\r\n  }\r\n});\r\n","/**\r\n * stream.js: Transport for outputting to any arbitrary stream.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n\r\n'use strict';\r\n\r\nconst isStream = require('is-stream');\r\nconst { MESSAGE } = require('triple-beam');\r\nconst os = require('os');\r\nconst TransportStream = require('winston-transport');\r\n\r\n/**\r\n * Transport for outputting to any arbitrary stream.\r\n * @type {Stream}\r\n * @extends {TransportStream}\r\n */\r\nmodule.exports = class Stream extends TransportStream {\r\n  /**\r\n   * Constructor function for the Console transport object responsible for\r\n   * persisting log messages and metadata to a terminal or TTY.\r\n   * @param {!Object} [options={}] - Options for this instance.\r\n   */\r\n  constructor(options = {}) {\r\n    super(options);\r\n\r\n    if (!options.stream || !isStream(options.stream)) {\r\n      throw new Error('options.stream is required.');\r\n    }\r\n\r\n    // We need to listen for drain events when write() returns false. This can\r\n    // make node mad at times.\r\n    this._stream = options.stream;\r\n    this._stream.setMaxListeners(Infinity);\r\n    this.isObjectMode = options.stream._writableState.objectMode;\r\n    this.eol = (typeof options.eol === 'string') ? options.eol : os.EOL;\r\n  }\r\n\r\n  /**\r\n   * Core logging method exposed to Winston.\r\n   * @param {Object} info - TODO: add param description.\r\n   * @param {Function} callback - TODO: add param description.\r\n   * @returns {undefined}\r\n   */\r\n  log(info, callback) {\r\n    setImmediate(() => this.emit('logged', info));\r\n    if (this.isObjectMode) {\r\n      this._stream.write(info);\r\n      if (callback) {\r\n        callback(); // eslint-disable-line callback-return\r\n      }\r\n      return;\r\n    }\r\n\r\n    this._stream.write(`${info[MESSAGE]}${this.eol}`);\r\n    if (callback) {\r\n      callback(); // eslint-disable-line callback-return\r\n    }\r\n    return;\r\n  }\r\n};\r\n","// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n","'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n","'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount, ...nodes) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    walker = insert(this, walker, nodes[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n","module.exports = require(\"assert\");","module.exports = require(\"buffer\");","module.exports = require(\"crypto\");","module.exports = require(\"domain\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"http2\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"process\");","module.exports = require(\"querystring\");","module.exports = require(\"stream\");","module.exports = require(\"string_decoder\");","module.exports = require(\"tls\");","module.exports = require(\"tty\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"zlib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6304);\n",""],"names":[],"sourceRoot":""}